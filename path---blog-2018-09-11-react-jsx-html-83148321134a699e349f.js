webpackJsonp([0xaef771a4239c],{707:function(n,s){n.exports={data:{markdownRemark:{html:'<p>当你在查看React的例子时候，可能已经见过JSX了。但React代码也可以用纯JS代码来编写：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> rootElement <span class="token operator">=</span>\n  React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'div\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'h1\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>style<span class="token punctuation">:</span> <span class="token punctuation">{</span>color<span class="token punctuation">:</span> <span class="token string">\'red\'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">\'The world is yours\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'p\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">\'Say hello to my little friend\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>rootElement<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'app\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>有些人不喜欢将整个标记代码编写为函数调用。这可能是为什么Facebook上的人想出了JSX - 一个<code class="gatsby-code-text">React.createElement(type, config, …children)的语法糖方法</code>。 这就是为什么我们可以重构上面的例子：</p>\n<blockquote>\n<p>这也就是render不能return两个元素(或组件)的原因，因为一个函数绝不可能有两个返回值</p>\n</blockquote>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> RootElement <span class="token operator">=</span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>color<span class="token punctuation">:</span><span class="token string">\'red\'</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>The world is yours<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Say hello to my little friend<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>RootElement<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'app\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>在构建过程中Babel会将标记转换为纯JS代码。</p>\n<h3 id="reactcreateelement源码分析"><a href="#reactcreateelement%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>React.createElement源码分析</h3>\n<p><a href="https://github.com/facebook/react/blob/master/packages/react/src/ReactElement.js">源代码GitHub地址</a></p>\n<p>首先看<code class="gatsby-code-text">createElement</code>函数,有三个参数，第一个是组件的类型，第二个是配置项(除了ref和key都会被添加到props属性上))，第三个是children</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token comment">// type可以是react组件，也可以是span之类的标签字符串</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> config<span class="token punctuation">,</span> children<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> propName<span class="token punctuation">;</span>\n\n  <span class="token comment">// Reserved names are extracted</span>\n  <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> ref <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> self <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> source <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>config <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasValidRef</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      ref <span class="token operator">=</span> config<span class="token punctuation">.</span>ref<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasValidKey</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      key <span class="token operator">=</span> <span class="token string">\'\'</span> <span class="token operator">+</span> config<span class="token punctuation">.</span>key<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    self <span class="token operator">=</span> config<span class="token punctuation">.</span>__self <span class="token operator">===</span> undefined <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token punctuation">:</span> config<span class="token punctuation">.</span>__self<span class="token punctuation">;</span>\n    source <span class="token operator">=</span> config<span class="token punctuation">.</span>__source <span class="token operator">===</span> undefined <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token punctuation">:</span> config<span class="token punctuation">.</span>__source<span class="token punctuation">;</span>\n    <span class="token comment">// Remaining properties are added to a new props object</span>\n    <span class="token comment">// 把config传进去的对象的键值对添加到props中，注意剔除key和ref</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>propName <span class="token keyword">in</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>\n        hasOwnProperty<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> propName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n        <span class="token operator">!</span><span class="token constant">RESERVED_PROPS</span><span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>propName<span class="token punctuation">)</span>\n      <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        props<span class="token punctuation">[</span>propName<span class="token punctuation">]</span> <span class="token operator">=</span> config<span class="token punctuation">[</span>propName<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// Children can be more than one argument, and those are transferred onto</span>\n  <span class="token comment">// the newly allocated props object.</span>\n  <span class="token comment">// children 可能是1个或者多个元素</span>\n  <span class="token comment">// 如果是一个则直接把子元素赋值给children属性</span>\n  <span class="token comment">// 如果是多个元素，则先把元素转换为数组，然后赋值给children属性</span>\n  <span class="token comment">// 所以我们在使用this.props.children属性的时候，可能是一个对象，也可能一个数组，也可能是undefined</span>\n  <span class="token comment">// 绝不能当成一个数组直接使用</span>\n  <span class="token keyword">const</span> childrenLength <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>childrenLength <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    props<span class="token punctuation">.</span>children <span class="token operator">=</span> children<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>childrenLength <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> childArray <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span>childrenLength<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> childrenLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      childArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arguments<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    props<span class="token punctuation">.</span>children <span class="token operator">=</span> childArray<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// Resolve default props</span>\n  <span class="token comment">// 把defaultProps添加到props中，注意检查时候已经包含对应的props了</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">&amp;&amp;</span> type<span class="token punctuation">.</span>defaultProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> defaultProps <span class="token operator">=</span> type<span class="token punctuation">.</span>defaultProps<span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>propName <span class="token keyword">in</span> defaultProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">[</span>propName<span class="token punctuation">]</span> <span class="token operator">===</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        props<span class="token punctuation">[</span>propName<span class="token punctuation">]</span> <span class="token operator">=</span> defaultProps<span class="token punctuation">[</span>propName<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token function">ReactElement</span><span class="token punctuation">(</span>\n    type<span class="token punctuation">,</span>\n    key<span class="token punctuation">,</span>\n    ref<span class="token punctuation">,</span>\n    self<span class="token punctuation">,</span>\n    source<span class="token punctuation">,</span>\n    ReactCurrentOwner<span class="token punctuation">.</span>current<span class="token punctuation">,</span>\n    props<span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">ReactElement</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>type<span class="token punctuation">,</span> key<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> self<span class="token punctuation">,</span> source<span class="token punctuation">,</span> owner<span class="token punctuation">,</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token comment">// This tag allows us to uniquely identify this as a React Element</span>\n    $$<span class="token keyword">typeof</span><span class="token punctuation">:</span> <span class="token constant">REACT_ELEMENT_TYPE</span><span class="token punctuation">,</span>\n\n    <span class="token comment">// Built-in properties that belong on the element</span>\n    type<span class="token punctuation">:</span> type<span class="token punctuation">,</span>\n    key<span class="token punctuation">:</span> key<span class="token punctuation">,</span>\n    ref<span class="token punctuation">:</span> ref<span class="token punctuation">,</span>\n    props<span class="token punctuation">:</span> props<span class="token punctuation">,</span>\n\n    <span class="token comment">// Record the component responsible for creating this element.</span>\n    _owner<span class="token punctuation">:</span> owner<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> element<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>从上面的代码也能看出来实际上，<code class="gatsby-code-text">React.createElement</code>方法就是返回了一个普通的对象，这个对象上主要有<code class="gatsby-code-text">type</code>,<code class="gatsby-code-text">key</code>,<code class="gatsby-code-text">ref</code>,<code class="gatsby-code-text">props</code>这几个关键属性。</p>\n<p>其中type为字符串的时候，表示为dom节点(JSX为小写开头)，type为函数那么就是自定义组件(JSX为大写开头)。</p>\n<p>而我们经常使用组件的方法：<code class="gatsby-code-text">&lt;Button&gt;click me&lt;/Button&gt;</code>,实际上就是一个对组件实例化的过程，也就是创建了一个对象用来表述这个组件。</p>\n<p>这也就是React虚拟DOM的本质，即：用JavaScript对象来描述DOM结构和属性。</p>\n<h3 id="jsx和html的区别"><a href="#jsx%E5%92%8Chtml%E7%9A%84%E5%8C%BA%E5%88%AB" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>JSX和HTML的区别</h3>\n<ul>\n<li>属性 - JSX不是一种语言，仅仅是<code class="gatsby-code-text">createElement</code>函数的语法糖，也就是需要转义成JavaScript,由于这一点，有些属性无法使用，需要用className来代替class,htmlFor来代替for,因为class和for是JavaScript关键字</li>\n<li>样式 - 与HTML不同，样式属性期望传入Javascript对象，而不是CSS字符串，而且样式名的写法为驼峰式命名法</li>\n<li>根元素 - JSX将会被转义为JavaScript函数，而一个函数不可能有两个返回值，因此有多个同级元素必须把他们包裹在一个父元素中，如果不想无谓的增加一个div元素，也可以使用<code class="gatsby-code-text">React.Fragment</code>来包裹起来</li>\n<li>\n<p>空格 - 看下面的代码：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-html"><code class="gatsby-code-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>foo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\nbar\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>bar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>如果是浏览器直接把上面的代码当成HTML来解析的话，会显示<code class="gatsby-code-text">foo bar bar</code>,注意其中是有空格的，而如果是在JSX中写这段代码，则会显示<code class="gatsby-code-text">foobarbar</code>没有将空格计算在内，如果要加入空格，除非在JSX中显式的插入空格：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>foo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n<span class="token punctuation">{</span><span class="token string">\' \'</span><span class="token punctuation">}</span>\nbar\n<span class="token punctuation">{</span><span class="token string">\' \'</span><span class="token punctuation">}</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>bar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n</li>\n<li>布尔属性值 - 在JSX中如果某个属性没有赋值，则会默认认为该属性值为true,类似于HTML属性中的disabled，这也就意味着如果想把属性值设置为false，则需要显式的声明为false,这个地方通常会让人感到困惑，因为我们通常认为遗漏的属性值应该为false</li>\n<li>\n<p>展开属性 - 向子元素传递数据时，不要按引用方式传递整个JavaScript对象，而是要使用对象的基本类型值，以方便校验，这种做法很常见，并且引发的bug更少，写出的组件更稳健且不容易出错。</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span>id <span class="token punctuation">:</span> <span class="token string">\'bar\'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">foo</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span></code></pre>\n      </div>\n</li>\n</ul>\n<h3 id="solution"><a href="#solution" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>solution</h3>\n<p>JSX违背了关注点分离的原则，然后事实情况是自从ajax流行以来，DOM高度依赖从JS中接收到的数据来展示信息，样式也同样存在同样的问题，CSS选择器完全遵循了DOM标记结构来选择元素，几乎不可能在不影响其他文件的前提下修改某个文件，而这就是耦合，大多数情况下所谓的关注点分离实质上是一种技术上的分离，本质上并没有分离，而是一种感觉分离的假象。</p>\n<p>React尝试更进一步，将模板放到其所属位置，即与逻辑在一起，也就是React建议你编写小型代码块的方式来组织应用，而这就是组件化开发。</p>\n<p>此外，React还建议将样式的逻辑也放在组件中，也就是<code class="gatsby-code-text">CSS in JS</code>，不过这个概念颇具争议，现在并没有大规模的推广开。</p>\n<p>React的最终目标是将创建组件所用到的技术都封装起来，来实现组建内高内聚，组件间低耦合的开发方式。</p>',frontmatter:{title:"react jsx",img:"./img/2016-08-21.jpeg",author:["Sylvenas"],excerpt:null,catalogue:null},fields:{date:"September 10, 2018",path:"blog/react/2018-09-11-react-jsx.md",slug:"/blog/2018/09/11/react-jsx.html"}},allMarkdownRemark:{edges:[{node:{frontmatter:{title:"shell intro"},fields:{slug:"/blog/2021/06/02/shell-intro.html"}}},{node:{frontmatter:{title:"React Hooks 原理及实现"},fields:{slug:"/blog/2021/03/30/react-hooks.html"}}},{node:{frontmatter:{title:"npm package依赖管理"},fields:{slug:"/blog/2021/03/03/npm-package.html"}}},{node:{frontmatter:{title:"被讨厌的勇气"},fields:{slug:"/blog/2020/05/14/被讨厌的勇气.html"}}},{node:{frontmatter:{title:"自然变换 - Natural Transformation"},fields:{slug:"/blog/2020/05/02/自然变换.html"}}},{node:{frontmatter:{title:"遍历与队列 - Traversable"},fields:{slug:"/blog/2020/04/25/遍历与队列.html"}}},{node:{frontmatter:{title:"加法是自然之道 - Monoid"},fields:{slug:"/blog/2020/03/02/加法是自然之道.html"}}},{node:{frontmatter:{title:"俄罗斯套娃娃 - Monad"},fields:{slug:"/blog/2020/02/12/俄罗斯套娃娃.html"}}},{node:{frontmatter:{title:"纪念刘和珍君"},fields:{slug:"/blog/2020/02/07/记念刘和珍君.html"}}},{node:{frontmatter:{title:"应用函子 - Applicative"},fields:{slug:"/blog/2020/02/05/应用函子.html"}}}]}},pathContext:{slug:"/blog/2018/09/11/react-jsx.html"}}}});