webpackJsonp([23036640950291],{698:function(n,s){n.exports={data:{markdownRemark:{html:'<h3 id="left-or-right-"><a href="#left-or-right-" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Left or Right ?</h3>\n<p><img src="../images/leftOrRight.jpg" alt="Left or Right"></p>\n<p>说出来可能会让你震惊，<code class="gatsby-code-text">try/catch</code> 并不十分“纯”。当一个错误抛出的时候，我们没有收到返回值，反而是得到了一个警告！抛错的函数吐出一大堆的 0 和 1 作为盾和矛来攻击我们，简直就像是在反击输入值的入侵而进行的一场电子大作战。有了<code class="gatsby-code-text">Either</code>这个新朋友，我们就能以一种比向输入值宣战好得多的方式来处理错误，那就是返回一条非常礼貌的消息作为回应。我们来看一下：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">class</span> <span class="token class-name">Either</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// Either构造函数，接受一个异常或者合法的值</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>$value <span class="token operator">=</span> value<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">static</span> <span class="token function">left</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Left</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">static</span> <span class="token function">right</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Right</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">static</span> <span class="token keyword">of</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> Either<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">static</span> <span class="token function">fromNullable</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment">// 若值非法则返回Left，否则返回Right</span>\n        <span class="token keyword">return</span> val <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> Either<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">:</span> Either<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$value\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Left</span> <span class="token keyword">extends</span> <span class="token class-name">Either</span> <span class="token punctuation">{</span>\n    <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// Left不做任何操作</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">chain</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>   \n        <span class="token keyword">return</span> <span class="token keyword">this</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">filter</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">getOrElse</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 尝试提取Right中的值，如果不存在则返回默认值</span>\n        <span class="token keyword">return</span> other\n    <span class="token punctuation">}</span>\n    <span class="token function">orElse</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment">// 将给定的函数应用于Left值，Right不做任何操作</span>\n        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$value<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">getOrElseThrow</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">fold</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> g<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$value<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">\'Can’t extract the value of a Left(a).\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Right</span> <span class="token keyword">extends</span> <span class="token class-name">Either</span> <span class="token punctuation">{</span>\n    <span class="token function">map</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> Either<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$value<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">getOrElse</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$value\n    <span class="token punctuation">}</span>\n    <span class="token function">orElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">chain</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$value<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">getOrElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$value\n    <span class="token punctuation">}</span>\n    <span class="token function">filter</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> Either<span class="token punctuation">.</span><span class="token function">fromNullable</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$value<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$value <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">fold</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> g<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$value<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>和<code class="gatsby-code-text">Maybe</code>略有不同，<code class="gatsby-code-text">Either</code>代表的是两个逻辑分离的Left和Right,他们永远不会同时出现：</p>\n<ul>\n<li>Left(a) —包含一个可能的错误消息或抛出的一场对象</li>\n<li>Right(b) —包含一个成功的值\n<code class="gatsby-code-text">Either</code>通常操作右值，这意味着在容器上映射函数总是在Right(b)子类型上执行。类似于Maybe的Just分支</li>\n</ul>\n<p>来看看它们是怎么运行的：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx">Either<span class="token punctuation">.</span><span class="token function">Right</span><span class="token punctuation">(</span><span class="token string">"rain"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">"b"</span><span class="token operator">+</span>str<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Right("brain")</span>\n\nEither<span class="token punctuation">.</span><span class="token function">Left</span><span class="token punctuation">(</span><span class="token string">"rain"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">"b"</span><span class="token operator">+</span>str<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Left("rain")</span>\n\nEither<span class="token punctuation">.</span><span class="token function">Right</span><span class="token punctuation">(</span><span class="token punctuation">{</span>host<span class="token punctuation">:</span> <span class="token string">\'localhost\'</span><span class="token punctuation">,</span> port<span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">\'host\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Right(\'localhost\')</span>\n\nEither<span class="token punctuation">.</span><span class="token function">Left</span><span class="token punctuation">(</span><span class="token string">"rolls eyes..."</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"host"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Left(\'rolls eyes...\')</span></code></pre>\n      </div>\n<p>Left 就像是青春期少年那样无视我们要 map 它的请求。Right 的作用就像是一个 Container（也就是 Identity）。这里强大的地方在于，Left 有能力在它内部嵌入一个错误消息。</p>\n<p>假设有一个可能会失败的函数，就拿根据生日计算年龄来说好了。的确，我们可以用 Maybe(null) 来表示失败并把程序引向另一个分支，但是这并没有告诉我们太多信息。很有可能我们想知道失败的原因是什么。用 Either 写一个这样的程序看看：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> moment <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'moment\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// getAge :: Date -> User -> Either(String, Number)</span>\n<span class="token keyword">const</span> getAge <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span> user<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> birthDate <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>birthDate<span class="token punctuation">,</span> <span class="token string">\'YYYY-MM-DD\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> birthDate<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token operator">?</span> Either<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">diff</span><span class="token punctuation">(</span>birthDate<span class="token punctuation">,</span> <span class="token string">\'years\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">:</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token string">\'Birth date could not be parsed\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">getAge</span><span class="token punctuation">(</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> birthDate<span class="token punctuation">:</span> <span class="token string">\'2005-12-12\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Right(9)</span>\n\n<span class="token function">getAge</span><span class="token punctuation">(</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> birthDate<span class="token punctuation">:</span> <span class="token string">\'July 4, 2001\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Left(\'Birth date could not be parsed\')</span></code></pre>\n      </div>\n<p>这么一来，就像<code class="gatsby-code-text">Maybe(null)</code>，当返回一个<code class="gatsby-code-text">Left</code>的时候就直接让程序短路。跟<code class="gatsby-code-text">Maybe(null)</code>不同的是，现在我们对程序为何脱离原先轨道至少有了一点头绪。有一件事要注意，这里返回的是<code class="gatsby-code-text">Either(String, Number)</code>，意味着我们这个 <code class="gatsby-code-text">Either</code>左边的值是<code class="gatsby-code-text">String</code>，右边（也就是正确的值）的值是<code class="gatsby-code-text">Number</code>。</p>\n<p>如果 birthdate 合法，这个程序就会把它神秘的命运打印在屏幕上让我们见证；如果不合法，我们就会收到一个有着清清楚楚的错误消息的 Left，尽管这个消息是稳稳当当地待在它的容器里的。这种行为就像，虽然我们在抛错，但是是以一种平静温和的方式抛错，而不是像一个小孩子那样，有什么不对劲就闹脾气大喊大叫。</p>\n<p>在这个例子中，我们根据 birthdate 的合法性来控制代码的逻辑分支，同时又让代码进行从右到左的直线运动，而不用爬过各种条件语句的大括号。通常，我们不会把 console.log 放到 zoltar 函数里，而是在调用 zoltar 的时候才 map 它，不过本例中，让你看看 Right 分支如何与 Left 不同也是很有帮助的。我们在 Right 分支的类型签名中使用 _ 表示一个应该忽略的值（在有些浏览器中，你必须要 console.log.bind(console) 才能把 console.log 当作一等公民使用）。</p>\n<p>我想借此机会指出一件你可能没注意到的事：这个例子中，尽管 fortune 使用了 Either，它对每一个 functor 到底要干什么却是毫不知情的。前面例子中的 finishTransaction 也是一样。通俗点来讲，一个函数在调用的时候，如果被 map 包裹了，那么它就会从一个非 functor 函数转换为一个 functor 函数。我们把这个过程叫做 lift。一般情况下，普通函数更适合操作普通的数据类型而不是容器类型，在必要的时候再通过 lift 变为合适的容器去操作容器类型。这样做的好处是能得到更简单、重用性更高的函数，它们能够随需求而变，兼容任意 functor。</p>\n<p>Either 并不仅仅只对合法性检查这种一般性的错误作用非凡，对一些更严重的、能够中断程序执行的错误比如文件丢失或者 socket 连接断开等，Either 同样效果显著。你可以试试把前面例子中的 Maybe 替换为 Either，看怎么得到更好的反馈。</p>\n<blockquote>\n<p>仅仅是把 Either 当作一个错误消息的容器使用，这样的介绍有失偏颇，它的能耐远不止于此。比如，它表示了逻辑或（也就是 ||）。再比如，它体现了范畴学里 coproduct 的概念，当然本书不会涉及这方面的知识，但值得你去深入了解，因为这个概念有很多特性值得利用。还比如，它是标准的 sum type（或者叫不交并集，disjoint union of sets），因为它含有的所有可能的值的总数就是它包含的那两种类型的总数</p>\n</blockquote>\n<h3 id="try-catch"><a href="#try-catch" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>try-catch</h3>\n<p>Either还可以用来包装try-catch，来让我们的程序更加的适合函数组合(普通的try/catch会导致程序出现另一个出口，无法进行多个分支的组合)：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> <span class="token function-variable function">tryCatch</span> <span class="token operator">=</span> f <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">Right</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">Left</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h3 id="either-use-cases"><a href="#either-use-cases" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Either Use Cases</h3>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> <span class="token function-variable function">openSite</span> <span class="token operator">=</span> <span class="token punctuation">(</span>current_user<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>current_user<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">renderpage</span><span class="token punctuation">(</span>current_user<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">showLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">openSite1</span> <span class="token operator">=</span> <span class="token punctuation">(</span>current_user<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">fromNullable</span><span class="token punctuation">(</span>current_user<span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span>showLogin<span class="token punctuation">,</span> renderpage<span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> <span class="token function-variable function">getPrefs</span> <span class="token operator">=</span> user <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span>premium<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">loadPrefs</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>preferences<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> defaultPrefs\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">getPrefs1</span> <span class="token operator">=</span> user <span class="token operator">=></span>\n    <span class="token punctuation">(</span>user<span class="token punctuation">.</span>premium <span class="token operator">?</span> <span class="token function">Right</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">Left</span><span class="token punctuation">(</span><span class="token string">\'not premium\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>u <span class="token operator">=></span> u<span class="token punctuation">.</span>preferences<span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> defaultPrefs<span class="token punctuation">,</span> prefs <span class="token operator">=></span> <span class="token function">loadPrefs</span><span class="token punctuation">(</span>prefs<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> <span class="token function-variable function">streetName</span> <span class="token operator">=</span> user <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> address <span class="token operator">=</span> user<span class="token punctuation">.</span>address\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>address<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> street <span class="token operator">=</span> address<span class="token punctuation">.</span>street\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>street<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> street<span class="token punctuation">.</span>name\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token string">\'no street\'</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">streetName1</span> <span class="token operator">=</span> user <span class="token operator">=></span>\n    <span class="token function">fromNullable</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>address<span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span>a <span class="token operator">=></span> <span class="token function">fromNullable</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>street<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span>s <span class="token operator">=></span> <span class="token function">fromNullable</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span>e <span class="token operator">=></span> <span class="token string">\'no street\'</span><span class="token punctuation">,</span> n <span class="token operator">=></span> n<span class="token punctuation">)</span></code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> <span class="token function-variable function">concatUniq</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> ys<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> found <span class="token operator">=</span> ys<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>y <span class="token operator">=></span> y <span class="token operator">===</span> x<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n    <span class="token keyword">return</span> found <span class="token operator">?</span> ys <span class="token punctuation">:</span> ys<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">concatUniq1</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> ys<span class="token punctuation">)</span> <span class="token operator">=></span>\n    <span class="token function">fromNullable</span><span class="token punctuation">(</span>ys<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>y <span class="token operator">=></span> y <span class="token operator">===</span> x<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> ys<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> y <span class="token operator">=></span> ys<span class="token punctuation">)</span></code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> <span class="token function-variable function">wrapExamples</span> <span class="token operator">=</span> example <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>example<span class="token punctuation">.</span>previewPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            example<span class="token punctuation">.</span>preview <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>example<span class="token punctuation">.</span>previewPath<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> example\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">readFile</span> <span class="token operator">=</span> x <span class="token operator">=></span> <span class="token function">tryCatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">wrapExample</span> <span class="token operator">=</span> example <span class="token operator">=></span>\n    <span class="token function">fromNullable</span><span class="token punctuation">(</span>example<span class="token punctuation">.</span>previewPath<span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span>readFile<span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> example<span class="token punctuation">,</span>\n            preview <span class="token operator">=></span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> preview <span class="token punctuation">}</span><span class="token punctuation">,</span> example<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> <span class="token function-variable function">parseDbUrl</span> <span class="token operator">=</span> cfg <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>cfg<span class="token punctuation">)</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> c<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/postgres:\\/\\/([^:]+):([^@]+)@([^:]+):(\\d+)\\/(.+)/</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">null</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">parseDbUrl</span> <span class="token operator">=</span> cfg <span class="token operator">=></span>\n    <span class="token function">tryCatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>cfg<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span>c <span class="token operator">=></span> <span class="token function">fromNullable</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span>e <span class="token operator">=></span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n            u <span class="token operator">=></span> u<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/postgres:\\/\\/([^:]+):([^@]+)@([^:]+):(\\d+)\\/(.+)/</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>\n      </div>',
frontmatter:{title:"FP12：Either:Left or Right",img:"./img/2018-08-03.jpeg",author:["Sylvenas"],excerpt:null,catalogue:null},fields:{date:"August 02, 2018",path:"blog/functional/2018-08-03-FP12-Either.md",slug:"/blog/2018/08/03/FP12-Either.html"}},allMarkdownRemark:{edges:[{node:{frontmatter:{title:"React Hooks 原理及实现"},fields:{slug:"/blog/2021/03/30/react-hooks.html"}}},{node:{frontmatter:{title:"被讨厌的勇气"},fields:{slug:"/blog/2020/05/14/被讨厌的勇气.html"}}},{node:{frontmatter:{title:"自然变换 - Natural Transformation"},fields:{slug:"/blog/2020/05/02/自然变换.html"}}},{node:{frontmatter:{title:"遍历与队列 - Traversable"},fields:{slug:"/blog/2020/04/25/遍历与队列.html"}}},{node:{frontmatter:{title:"加法是自然之道 - Monoid"},fields:{slug:"/blog/2020/03/02/加法是自然之道.html"}}},{node:{frontmatter:{title:"俄罗斯套娃娃 - Monad"},fields:{slug:"/blog/2020/02/12/俄罗斯套娃娃.html"}}},{node:{frontmatter:{title:"纪念刘和珍君"},fields:{slug:"/blog/2020/02/07/记念刘和珍君.html"}}},{node:{frontmatter:{title:"应用函子 - Applicative"},fields:{slug:"/blog/2020/02/05/应用函子.html"}}},{node:{frontmatter:{title:"动物庄园"},fields:{slug:"/blog/2020/02/01/动物庄园.html"}}},{node:{frontmatter:{title:"薛定谔的 Maybe - IO"},fields:{slug:"/blog/2020/01/30/薛定谔的Maybe.html"}}}]}},pathContext:{slug:"/blog/2018/08/03/FP12-Either.html"}}}});