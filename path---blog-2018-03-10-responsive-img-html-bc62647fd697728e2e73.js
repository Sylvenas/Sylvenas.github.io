webpackJsonp([25883942521650],{489:function(n,s){n.exports={data:{markdownRemark:{html:'<p>所谓响应式的图片，就是让我们在不同的平台，不同的设备上使用的图片都不一样，设计师切图给我们的时候，一般都会把给我1x,2x,3x,4x的图片，有的时候，那么这几张图片我们该怎么使用呢？</p>\n<p>这个时候就会有HTML5的img,<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/img">srcset</a>属性出场的时候到了，srcset可以让我们支持在一个img元素中预设多张图片，方便浏览器在不同的设备中选择最合适的那一张图片。   </p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-html"><code class="gatsby-code-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>small.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>medium.jpg 1000w, large.jpg 2000w<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>yah<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>简单介绍一个srcset的使用方法：\n以逗号分隔的一个或多个字符串列表表明一系列用户代理使用的可能的图像。每一个字符串由以下组成：</p>\n<ul>\n<li>\n<p>一个图像的URL。</p>\n</li>\n<li>\n<p>可选的，空格后跟以下的其一：</p>\n<ul>\n<li>一个宽度描述符，这是一个正整数，后面紧跟<code class="gatsby-code-text">&#39;w&#39;</code>符号。该整数宽度除以sizes属性给出的资源(source)大小来计算得到有效的像素密度，即换算成和x描述符等价的值。</li>\n<li>一个像素密度描述符，这是一个正浮点数，后面紧跟<code class="gatsby-code-text">&#39;x&#39;</code>符号。</li>\n</ul>\n</li>\n<li>\n<p>如果没有指定源描述符，那它会被指定为默认的<code class="gatsby-code-text">1x</code>。</p>\n</li>\n<li>\n<p>在相同的<code class="gatsby-code-text">srcset</code>属性中混合使用宽度描述符和像素密度描述符时，会导致该值无效。重复的描述符（比如，两个源 在相同的srcset两个源都是 ‘2x’）也是无效的。</p>\n</li>\n</ul>\n<h3 id="第二个参数的说明"><a href="#%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%8F%82%E6%95%B0%E7%9A%84%E8%AF%B4%E6%98%8E" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>第二个参数的说明</h3>\n<h4 id="如果为1x，2x，3x之类的"><a href="#%E5%A6%82%E6%9E%9C%E4%B8%BA1x%EF%BC%8C2x%EF%BC%8C3x%E4%B9%8B%E7%B1%BB%E7%9A%84" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>如果为1x，2x，3x之类的</h4>\n<p>1x表示是一倍屏，也是最常见的一种电脑屏幕了，2x表示的两倍屏，一般现在apple的macbook都是两倍屏，现在新的手机，会出现3倍屏，4倍屏之类的，这个很好理解，</p>\n<h4 id="如果第二为w的应当如何理解"><a href="#%E5%A6%82%E6%9E%9C%E7%AC%AC%E4%BA%8C%E4%B8%BAw%E7%9A%84%E5%BA%94%E5%BD%93%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>如果第二为w的应当如何理解</h4>\n<p>举例来说明：\n如果我们要显示一张图片为320px宽度在1x屏幕上，并且我们现在手中有三张图片，分别是small.jpg(500px wide),middle.jpg(1000px wide), large.jpg (2000px wide)。</p>\n<p>那个浏览器该如何判断选用哪一张图片呢？先做个简单的计算\n500 / 320 = 1.5625\n1000 / 320 = 3.125\n2000 / 320 = 6.25</p>\n<p>如果是1x的屏幕，那么1.5625是最接近的一张，尽管这张图片<code class="gatsby-code-text">分辨率</code>也有一点点高,但是却是这三张图片里面最合适的了。</p>\n<p>如果是2x的屏幕，尽管1.5625还是最接近的一张图片，但是这张图片对于2x的屏幕来说却是有一点不够清楚，会让用户觉得图片有点模糊，那么很明显这个时候3.125是更好的选择</p>\n<h4 id="also-sizes"><a href="#also-sizes" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Also, sizes</h4>\n<p>还有一个与<code class="gatsby-code-text">srcset</code>属性配合使用sizes属性，\n表示资源大小的以逗号隔开的一个或多个字符串。每一个资源大小包括：</p>\n<ul>\n<li>一个媒体条件。最后一项一定是被忽略的。</li>\n<li>一个资源尺寸的值。</li>\n</ul>\n<p>资源尺寸的值被用来指定图像的预期尺寸。当srcset使用 ‘w’ 描述符时，用户代理使用当前图像大小来选择srcset中合适的一个图像URL。 被选中的尺寸影响图像的显示大小（如果没有CSS样式被应用的话）。如果没有设置srcset属性，或者没值，那么sizes属性也将不起作用。</p>\n<p>其实sizes属性并没有那么的必要，有时候使用起来或许还有点危险，因为这是相当于把CSS的一部分功能放进了HTMl标记中，举例来说：</p>\n<p><code class="gatsby-code-text">sizes=&quot;(min-width: 800px) 50vw, 100vw&quot;</code></p>\n<p>这个属性的意思是，如果浏览器的窗口大于等于800px的情况下，那么该图片应该显示视口的一半宽度，否则应当显示为满屏。</p>\n<h4 id="responsivewebp-images-in-html"><a href="#responsivewebp-images-in-html" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Responsive&#x26;Webp images in HTML</h4>\n<p>最基本的<code class="gatsby-code-text">img</code>标签又一个<code class="gatsby-code-text">src</code>属性可以指向图片的URL:</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-html"><code class="gatsby-code-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image description<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre>\n      </div>\n<p>但是你可以更进一步使用<code class="gatsby-code-text">srcset</code>属性，根据不同屏幕的像素密度因子制定不同清晰度的图片：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-html"><code class="gatsby-code-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image_1x.jpg 1x, image_2x.jpg 2x<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image_1x.jpg<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre>\n      </div>\n<p>我们使用了两种不同的像素密度因子：<code class="gatsby-code-text">1x</code>和<code class="gatsby-code-text">2x</code>,根据实际的硬件设备，浏览器会选择正确的那个，同时使用<code class="gatsby-code-text">src</code>属性指向回退选项。</p>\n<p>目前除了IE,Edge之外的大多数浏览器都实现了<code class="gatsby-code-text">srcset</code>属性。</p>\n<p>但是对于相同的像素密度因子，无论显示大小如何，你的浏览器都会选择相同的图片，不过有时候我们却想在web端显示大而清晰的图片，而在手机端的时候，我们要选择小而清晰的图片。</p>\n<p><code class="gatsby-code-text">srcset</code>属性除了能接受像素密度因子，之外，还可以接受宽度单位<code class="gatsby-code-text">w</code>,相当于CSS像素。使用宽度，可以使浏览器能够显示我们想要的正确的图像。</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-html"><code class="gatsby-code-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>\n    <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image-sm.jpg 600w,\n    image-md.jpg 900w,\n    image-lg.jpg 1440w<span class="token punctuation">"</span></span>\n    <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image_1x.jpg<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre>\n      </div>\n<p>但是这里又一个问题就是，有了宽度浏览器去决定要获取哪一个图片的时候，它还不知道我们的CSS设置，因为在这个时候，CSS文件还没有请求到，这个时候浏览器只能假设我们要显示一个全宽的图片。</p>\n<p>如果全宽的图像正是你想要的，那么OK！但是如果你只想在一个<code class="gatsby-code-text">50vw</code>宽度的容器内显示图像呢，那么<code class="gatsby-code-text">sizes</code>属性可以为你解决这个问题</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-html"><code class="gatsby-code-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>\n    <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image-sm.jpg 600w,\n    image-md.jpg 900w,\n    image-lg.jpg 1440w<span class="token punctuation">"</span></span>\n    <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50vw<span class="token punctuation">"</span></span>\n    <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image_1x.jpg<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre>\n      </div>\n<p>通过添加<code class="gatsby-code-text">sizes=50vw</code>属性，我们告诉浏览器图片将会被渲染在<code class="gatsby-code-text">50vw</code>的宽度内，基于这个信息，浏览器可以选择使用哪张图片了</p>\n<p>但是如果你想在一个大屏幕上使用<code class="gatsby-code-text">50vw</code>来展示一张图片，然后在手机端使用<code class="gatsby-code-text">100vw</code>全屏来展示一张图片，这个时候该怎么做呢，<code class="gatsby-code-text">sizes</code>属性还支持媒体查询</p>\n<p>你可以在<code class="gatsby-code-text">600px</code>一下的时候，使用全屏宽度来展示图片，如果宽度超过<code class="gatsby-code-text">600px</code>，就可以使用<code class="gatsby-code-text">50vw</code>来展示图片。</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-html"><code class="gatsby-code-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>\n    <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image-sm.jpg 600w,\n    image-md.jpg 900w,\n    image-lg.jpg 1440w<span class="token punctuation">"</span></span>\n    <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(max-width: 600px) 100vw, 50vw<span class="token punctuation">"</span></span>\n    <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image_1x.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre>\n      </div>\n<p>这个解决方案，看上去很不错啦，不过我们发现我们的像素密度因子去哪了？如果我们使用上面的方案，我们会在<code class="gatsby-code-text">1x</code>和<code class="gatsby-code-text">2x</code>的屏幕上选择相同的图片。</p>\n<h4>picture元素</h4>\nHTML5的`picture`元素可以接受`source`和`img`元素作为子元素，我们可以使用`source`元素列出来我们想要提供给浏览器的其他图片。\n``` html\n<picture>\n    <source\n        srcset="image.webp"\n        type="image/webp" >\n    <img\n        src="image.jpg"\n        type="image/jpeg"\n        alt="image description">\n</picture>\n```\n让我们在`picture`元素中添加`source`元素作为`WebP`格式的第一个选项，然后是指向常规JPG图像的`img`。 现在，当浏览器不支持WebP时，它将优雅地回退到`img` 元素(例如Safari)。\n`source`元素向我们打开了一个新世界，它可以接受媒体查询，首先在`media`属性中，我们使用媒体查询，然后在`srcset`属性中，放置合适的图像，尽可能的使用`source`元素增加我们的选项\n``` html\n<picture>\n    <source\n        media="(min-width: 900px)"\n        srcset="image-lg.webp"\n        type="image/webp" >\n    <source\n        media="(min-width: 600px)"\n        srcset="image-md.webp"\n        type="image/webp" >\n    <source\n        srcset="image-sm.webp"\n        type="image/webp" >\n    <img\n        src="image-lg.jpg"\n        type="image/jpeg"\n        alt="image description">\n</picture>\n```\n上面我们已经准备了三个WebP格式的图像，这取决于显示器的大小，并且一个JPG图像作为回退选项。\n<p><code class="gatsby-code-text">srcset</code>属性的最后一个秘密是它也接受像素密度因子，我们可以决定在哪个屏幕上以及在哪个像素密度因子下提供不同的图像。方法就是在图像的<code class="gatsby-code-text">srcset</code>中，后跟一个空格和像素密度因子，例如：<code class="gatsby-code-text">1x</code>,<code class="gatsby-code-text">2x</code>,<code class="gatsby-code-text">3x</code>,<code class="gatsby-code-text">4x</code>.</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-html"><code class="gatsby-code-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>picture</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span>\n        <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(min-width: 900px)<span class="token punctuation">"</span></span>\n        <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image-lg_1x.webp 1x, image-lg_2x.webp 2x<span class="token punctuation">"</span></span>\n        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/webp<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span>\n        <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(min-width: 601px)<span class="token punctuation">"</span></span>\n        <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image-md_1x.webp 1x, image-md_2x.webp 2x<span class="token punctuation">"</span></span>\n        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/webp<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span>\n        <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(max-width: 600px)<span class="token punctuation">"</span></span>\n        <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image-sm_1x.webp 1x, image-sm_1x.webp 1x<span class="token punctuation">"</span></span>\n        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/webp<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>\n        <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image-lg_1x.jpg<span class="token punctuation">"</span></span>\n        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/jpeg<span class="token punctuation">"</span></span>\n        <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image description<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>picture</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>上面我们使用了WebP格式的图片和像素密度因子，但是有些浏览器不支持WebP格式，我们必须在<code class="gatsby-code-text">img</code>标签内设置回退选项。</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-html"><code class="gatsby-code-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>picture</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span>\n        <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(min-width: 900px)<span class="token punctuation">"</span></span>\n        <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image-lg_1x.webp 1x, image-lg_2x.webp 2x<span class="token punctuation">"</span></span>\n        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/webp<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span>\n        <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(min-width: 601px)<span class="token punctuation">"</span></span>\n        <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image-md_1x.webp 1x, image-md_2x.webp 2x<span class="token punctuation">"</span></span>\n        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/webp<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span>\n        <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image-sm_1x.webp 1x, image-sm_2x.webp 2x<span class="token punctuation">"</span></span>\n        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/webp<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> \n        <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image-sm_1x.jpg 600w,\n            image-md_1x.jpg 900w,\n            image-lg_1x.jpg 1440w<span class="token punctuation">"</span></span>\n        <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image_lg_1x.jpg<span class="token punctuation">"</span></span>\n        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/jpeg<span class="token punctuation">"</span></span>\n        <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image description<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>picture</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>我们用<code class="gatsby-code-text">picture</code>元素替换了<code class="gatsby-code-text">img</code>元素。在可能的情况下，我们希望根据显示尺寸和2种不同的像素密度，以三种不同的大小提供WebP格式的图像。如果览器不支持 <code class="gatsby-code-text">picture</code>元素或<code class="gatsby-code-text">WebP</code>格式，它将回落到具有三种不同大小<code class="gatsby-code-text">JPG</code>的标准<code class="gatsby-code-text">img</code>元素。</p>\n<blockquote>\n<p>请注意，在<code class="gatsby-code-text">img</code>元素中，<code class="gatsby-code-text">srcset</code>属性应放置在<code class="gatsby-code-text">src</code>属性之前。否则，浏览器会首先下载<code class="gatsby-code-text">src</code>图像，如果在<code class="gatsby-code-text">srcset</code>中找到了更好的图像，它也会下载这个图像。这样我们最终会得到两个图像。</p>\n</blockquote>\n<h4 id="how-to-use-responsive-images-in-css"><a href="#how-to-use-responsive-images-in-css" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>How To Use Responsive Images In CSS</h4>\n<p>借助less等预编译语言，配合webp是否支持的方案，可以写出如下代码：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-less"><code class="gatsby-code-less"><span class="token selector">.retinabg(<span class="token variable">@file-2x</span>; <span class="token variable">@reg-2x</span>; <span class="token variable">@reg-1x</span>; <span class="token variable">@type</span>) when (isstring(<span class="token variable">@reg-2x</span>))</span> <span class="token punctuation">{</span>\n    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url("@{file-2x}.@{reg-1x}.@{type}")</span><span class="token punctuation">;</span>\n    <span class="token selector">.webpa &amp;</span> <span class="token punctuation">{</span>\n        <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url(\'@{file-2x}.@{reg-1x}.@{type}.webp\')</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token atrule">@media only screen and <span class="token punctuation">(</span> min-device-pixel-ratio<span class="token punctuation">:</span> 2<span class="token punctuation">)</span>,\n    only screen and <span class="token punctuation">(</span> min-resolution<span class="token punctuation">:</span> 192dpi<span class="token punctuation">)</span>,\n    only screen and <span class="token punctuation">(</span> min-resolution<span class="token punctuation">:</span> 2dppx<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>\n        <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url("@{file-2x}.@{reg-2x}.@{type}")</span><span class="token punctuation">;</span>\n        <span class="token selector">.webpa &amp;</span> <span class="token punctuation">{</span>\n            <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url(\'@{file-2x}.@{reg-2x}.@{type}.webp\')</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.retinabg-test</span> <span class="token punctuation">{</span>\n    <span class="token mixin-usage function">.retinabg</span><span class="token punctuation">(</span><span class="token string">\'./bg.jpg\'</span><span class="token punctuation">,</span><span class="token string">\'2x\'</span><span class="token punctuation">,</span><span class="token string">\'1x\'</span><span class="token punctuation">,</span><span class="token string">\'jpg\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>编译之后的结果为：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-css"><code class="gatsby-code-css"><span class="token selector">.retinabg-test</span> <span class="token punctuation">{</span>\n  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url("./bg.jpg.1x.jpg")</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.webpa .retinabg-test</span> <span class="token punctuation">{</span>\n  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url(\'./bg.jpg.1x.jpg.webp\')</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token atrule"><span class="token rule">@media</span> only screen and <span class="token punctuation">(</span><span class="token property">min-device-pixel-ratio</span><span class="token punctuation">:</span> 2<span class="token punctuation">)</span>, only screen and <span class="token punctuation">(</span><span class="token property">min-resolution</span><span class="token punctuation">:</span> 192dpi<span class="token punctuation">)</span>, only screen and <span class="token punctuation">(</span><span class="token property">min-resolution</span><span class="token punctuation">:</span> 2dppx<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>\n  <span class="token selector">.retinabg-test</span> <span class="token punctuation">{</span>\n    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url("./bg.jpg.2x.jpg")</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token selector">.webpa .retinabg-test</span> <span class="token punctuation">{</span>\n    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url(\'./bg.jpg.2x.jpg.webp\')</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h4 id="how-to-generate-reponsive-images"><a href="#how-to-generate-reponsive-images" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>How To Generate Reponsive Images</h4>\n<p>上面提到了不同屏幕，尺寸，格式下的图片都需要不同的图片，不过设计师一般给我们的都是一张图片，应当如何处理呢，特别是存在大量图片的时候，我们需要一个能够批量处理图片的工具。</p>\n<p>我们可以选择支持三个分界线的图片：<code class="gatsby-code-text">600px</code>,<code class="gatsby-code-text">900px</code>,<code class="gatsby-code-text">1440px</code>和两种像素密度因子(用来支持retina屏和普通屏)，这样就是由原来的一张图片转换为了6张图片，同时我们要尽可能的支持WebP,那么这时候，就是12张图片了。</p>\n<p><a href="http://www.imagemagick.org/script/index.php">ImageMagic</a>和<a href="http://www.graphicsmagick.org/">GraphicsMagick</a>都是免费且强大的图片处理工具，并且现在都有node.js的版本，这是我们前端开发工程师擅长的领域。</p>\n<p><a href="https://github.com/aheckmann/gm">gm</a>就是node.js版本的GraphicsMagick,使用方法如下：\n首先安装GraphicsMagick和ImageMagick</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-text"><code class="gatsby-code-text">brew install graphicsmagick\nbrew install imagemagick --with-webp</code></pre>\n      </div>\n<p>然后安装gm:</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-text"><code class="gatsby-code-text">npm install gm</code></pre>\n      </div>\n<p>然后我们就可以写代码批量处理某个文件夹的所有文件,gm的<a href="http://aheckmann.github.io/gm/">具体api</a>很简单，直接看文档就可以了，不再具体说明。</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> gm <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'gm\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    dir <span class="token operator">=</span> __dirname <span class="token operator">+</span> <span class="token string">\'/imgs\'</span><span class="token punctuation">,</span>\n    imageMagick <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"imagemagick"</span><span class="token punctuation">)</span>\n\n<span class="token keyword">var</span> filePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'./imgs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nfs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">//遍历读取到的文件列表  </span>\n        files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">//获取当前文件的绝对路径  </span>\n            <span class="token keyword">var</span> filedir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">//根据文件路径获取文件信息，返回一个fs.Stats对象  </span>\n            fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span>filedir<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>eror<span class="token punctuation">,</span> stats<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>eror<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">\'获取文件stats失败\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">var</span> isFile <span class="token operator">=</span> stats<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//是文件   </span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span>isFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token keyword">var</span> name <span class="token operator">=</span> filename<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'.\'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n                        <span class="token keyword">var</span> type <span class="token operator">=</span> filename<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'.\'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n                        <span class="token keyword">const</span> createFun <span class="token operator">=</span> <span class="token function">createResponsiveImgs</span><span class="token punctuation">(</span>filedir<span class="token punctuation">,</span> name<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token function">createFun</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">\'sm\'</span><span class="token punctuation">,</span> <span class="token string">\'1x\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token function">createFun</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token string">\'sm\'</span><span class="token punctuation">,</span> <span class="token string">\'2x\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token function">createFun</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token string">\'md\'</span><span class="token punctuation">,</span> <span class="token string">\'1x\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token function">createFun</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token string">\'md\'</span><span class="token punctuation">,</span> <span class="token string">\'2x\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token function">createFun</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token string">\'lg\'</span><span class="token punctuation">,</span> <span class="token string">\'1x\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token function">createFun</span><span class="token punctuation">(</span><span class="token number">1600</span><span class="token punctuation">,</span> <span class="token string">\'lg\'</span><span class="token punctuation">,</span> <span class="token string">\'2x\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">createResponsiveImgs</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> fileName<span class="token punctuation">,</span> fileType<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>size<span class="token punctuation">,</span> name<span class="token punctuation">,</span> density<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token function">gm</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        file<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`resImg/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fileName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>density<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fileType<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> err <span class="token operator">=></span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                imageMagick<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token template-string"><span class="token string">`resImg/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fileName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>density<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fileType<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`resImg/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fileName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>density<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.webp`</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                    err <span class="token operator">=></span> <span class="token punctuation">{</span>\n                        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>\n                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fileName <span class="token operator">+</span> <span class="token string">\'创建成功\'</span><span class="token punctuation">)</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>原文件的图像都在imgs文件夹内，新生成的图像在resImg文件夹内，新生成的图像具有一下命名结构：    </p>\n<p><strong>originName _ description _ density.type</strong>  </p>\n<p>在我的项目中，原图片的大小为486kb,新生成的12个图片中，最大的为 124kb,最小的为7kb,这样计算的话，我们减少了<code class="gatsby-code-text">4-70</code>倍的大小，对于网速加载速度而言，自然会快很多，尤其是在不同的终端，不同的分辨率之下！</p>',
frontmatter:{title:"web image 加载优化方案--responsive-image",img:"./img/2018-03-10.jpeg",author:["Sylvenas"],excerpt:null,catalogue:null},fields:{date:"March 09, 2018",path:"blog/performance/2018-03-10-responsive-img.md",slug:"/blog/2018/03/10/responsive-img.html"}},allMarkdownRemark:{edges:[{node:{frontmatter:{title:"How JavaScript Work: 内存管理/垃圾收集/内存泄漏"},fields:{slug:"/blog/2019/02/05/menory-management.html"}}},{node:{frontmatter:{title:"前端资源加载优先级"},fields:{slug:"/blog/2019/01/12/load-priority.html"}}},{node:{frontmatter:{title:"FP18：Semigroup"},fields:{slug:"/blog/2018/12/13/FP18-Semigroup.html"}}},{node:{frontmatter:{title:"FP17：Transform Naturally"},fields:{slug:"/blog/2018/12/11/FP17-Transform-Naturally.html"}}},{node:{frontmatter:{title:"How JavaScript Work: 引擎、运行时、调用栈概述"},fields:{slug:"/blog/2018/11/12/overview-of-the-engine-the-runtime-the-call-stack.html"}}},{node:{frontmatter:{title:"FP16：Applicative Functor"},fields:{slug:"/blog/2018/11/07/FB16-Applicative-Functor.html"}}},{node:{frontmatter:{title:"FP15：Monad-2"},fields:{slug:"/blog/2018/09/11/FB15-Monad-2.html"}}},{node:{frontmatter:{title:"FP14：Monad-1"},fields:{slug:"/blog/2018/09/02/FP14-Monad-1.html"}}},{node:{frontmatter:{title:"'类'模式"},fields:{slug:"/blog/2018/08/24/class-pattern.html"}}},{node:{frontmatter:{title:"代理模式"},fields:{slug:"/blog/2018/08/24/代理-pattern.html"}}}]}},pathContext:{slug:"/blog/2018/03/10/responsive-img.html"}}}});