webpackJsonp([86743910227843],{574:function(n,s){n.exports={data:{markdownRemark:{html:'<h3 id="自然变换"><a href="#%E8%87%AA%E7%84%B6%E5%8F%98%E6%8D%A2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>自然变换</h3>\n<p>所谓自然变换也也就是变化包裹值的容器盒子：<code class="gatsby-code-text">F(x) =&gt; G(x)</code>,举个简单的例子，把Either转换为Task:</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> <span class="token function-variable function">eitherToTask</span> <span class="token operator">=</span> e <span class="token operator">=></span>\n    e<span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span>Task<span class="token punctuation">.</span>rejected<span class="token punctuation">,</span> Task<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">eitherToTask</span><span class="token punctuation">(</span><span class="token function">Right</span><span class="token punctuation">(</span><span class="token string">\'hello\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span>err <span class="token operator">=></span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">\'err\'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> x <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'res\'</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// res hello</span>\n\n<span class="token keyword">const</span> res2 <span class="token operator">=</span> <span class="token function">eitherToTask</span><span class="token punctuation">(</span><span class="token function">Left</span><span class="token punctuation">(</span><span class="token string">\'errrrrr\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span>err <span class="token operator">=></span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">\'err\'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> x <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'res\'</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// err errrrrr</span></code></pre>\n      </div>\n<h3 id="同构"><a href="#%E5%90%8C%E6%9E%84" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>同构</h3>\n<p>前面我们介绍过Task 是一种Lazy Promise的概念，那么是否可以将Task转为promise呢？答案是肯定的！</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"> <span class="token comment">// taskToPromise :: Task a b -> Promise a b</span>\n<span class="token keyword">const</span> <span class="token function-variable function">taskToPromise</span> <span class="token operator">=</span> x <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span>reject<span class="token punctuation">,</span> resolve<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> task <span class="token operator">=</span> <span class="token function">Task</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rej<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">res</span><span class="token punctuation">(</span><span class="token string">\'hello taskToPromise\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">taskToPromise</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>x <span class="token operator">=></span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> x <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'something went wrong\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// => hello taskToPromise</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// => Promise { &lt;pending> }</span></code></pre>\n      </div>\n<p>同样的，我们也可以把Promise转换为Task</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> <span class="token function-variable function">promiseToTask</span> <span class="token operator">=</span> p <span class="token operator">=></span> <span class="token function">Task</span><span class="token punctuation">(</span><span class="token punctuation">(</span>reject<span class="token punctuation">,</span> resolve<span class="token punctuation">)</span> <span class="token operator">=></span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>reject<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> promise <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'hello promiseToTask\'</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">promiseToTask</span><span class="token punctuation">(</span>promise<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span>\n        err <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'something went wrong\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        x <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// => hello promiseToTask</span></code></pre>\n      </div>\n<p><strong>Note：</strong>我们没办法实现<code class="gatsby-code-text">taskToEither</code>,因为我们不能把一个异步的逻辑转换为同步的过程，这个是不合理的，因为异步的结果，必须要等到异步call back的时候才能拿到。</p>\n<h3 id="定律"><a href="#%E5%AE%9A%E5%BE%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>定律</h3>\n<h4 id="nthfxmapf--ntfxmapf"><a href="#nthfxmapf--ntfxmapf" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>nth(fx).map(f) == nt(fx.map(f))</h4>\n<p>也就是先进行map然后自然变换和先自然变化然后map的结果是一样的</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx">    <span class="token comment">// 因为nt必须满足这个定律所以boxToEither必须使用Right,因为left会跳过map</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">boxToEither</span> <span class="token operator">=</span> b <span class="token operator">=></span>\n        b<span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span>Right<span class="token punctuation">)</span>\n\n    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">boxToEither</span><span class="token punctuation">(</span><span class="token function">Box</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">=></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// Right(400)</span>\n\n    <span class="token keyword">const</span> res2 <span class="token operator">=</span> <span class="token function">boxToEither</span><span class="token punctuation">(</span><span class="token function">Box</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">=></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span> <span class="token comment">// Right(400)</span></code></pre>\n      </div>\n<h4 id="自然变换的目的"><a href="#%E8%87%AA%E7%84%B6%E5%8F%98%E6%8D%A2%E7%9A%84%E7%9B%AE%E7%9A%84" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>自然变换的目的</h4>\n<p>是为了函数组合，其实我们目前所做的所有努力都是为了让函数组合更方便,是想如果自然变换，我们怎么进行不同容器的chain和map呢？</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> <span class="token function-variable function">fake</span> <span class="token operator">=</span> id <span class="token operator">=></span>\n    <span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`user</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> best_friend_id<span class="token punctuation">:</span> id <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> Db <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    find<span class="token punctuation">:</span> id <span class="token operator">=></span>\n        <span class="token function">Task</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rej<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=></span>\n        <span class="token function">res</span><span class="token punctuation">(</span>id <span class="token operator">></span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token function">Right</span><span class="token punctuation">(</span><span class="token function">fake</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">Left</span><span class="token punctuation">(</span><span class="token string">\'not found\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">eitherToTask</span> <span class="token operator">=</span> e <span class="token operator">=></span>\n    e<span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span>Task<span class="token punctuation">.</span>rejected<span class="token punctuation">,</span> Task<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">app</span> <span class="token operator">=</span> id <span class="token operator">=></span> Db<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token comment">// Task(Right(user))</span>\n    <span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span>eitherToTask<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span>user <span class="token operator">=></span> Db<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>best_friend_id<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span>eitherToTask<span class="token punctuation">)</span>\n\n<span class="token function">app</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>error<span class="token punctuation">,</span> console<span class="token punctuation">.</span>log<span class="token punctuation">)</span> <span class="token comment">// { id: 4, name: \'user4\', best_friend_id: 5 }</span>\n<span class="token function">app</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>error<span class="token punctuation">,</span> console<span class="token punctuation">.</span>log<span class="token punctuation">)</span> <span class="token comment">//not found</span></code></pre>\n      </div>',frontmatter:{title:"自然变换 - Natural Transformation",img:"./img/2017-02-26.jpeg",author:["sylvenas"],excerpt:null,catalogue:null},fields:{date:"May 01, 2020",path:"blog/monad/2020-05-02-自然变换.md",slug:"/blog/2020/05/02/自然变换.html"}},allMarkdownRemark:{edges:[{node:{frontmatter:{title:"React Hooks 原理及实现"},fields:{slug:"/blog/2021/03/30/react-hooks.html"}}},{node:{frontmatter:{title:"npm package依赖管理"},fields:{slug:"/blog/2021/03/03/npm-package.html"}}},{node:{frontmatter:{title:"被讨厌的勇气"},fields:{slug:"/blog/2020/05/14/被讨厌的勇气.html"}}},{node:{frontmatter:{title:"自然变换 - Natural Transformation"},fields:{slug:"/blog/2020/05/02/自然变换.html"}}},{node:{frontmatter:{title:"遍历与队列 - Traversable"},fields:{slug:"/blog/2020/04/25/遍历与队列.html"}}},{node:{frontmatter:{title:"加法是自然之道 - Monoid"},fields:{slug:"/blog/2020/03/02/加法是自然之道.html"}}},{node:{frontmatter:{title:"俄罗斯套娃娃 - Monad"},fields:{slug:"/blog/2020/02/12/俄罗斯套娃娃.html"}}},{node:{frontmatter:{title:"纪念刘和珍君"},fields:{slug:"/blog/2020/02/07/记念刘和珍君.html"}}},{node:{frontmatter:{title:"应用函子 - Applicative"},fields:{slug:"/blog/2020/02/05/应用函子.html"}}},{node:{frontmatter:{title:"动物庄园"},fields:{slug:"/blog/2020/02/01/动物庄园.html"}}}]}},pathContext:{slug:"/blog/2020/05/02/自然变换.html"}}}});