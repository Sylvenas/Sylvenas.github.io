{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/2017/11/8/Rxjs-Observer.html","result":{"data":{"markdownRemark":{"html":"<h3>Observer</h3>\n<p><strong>what is Observer?</strong> Observer(观察者)是Observable(可观察对象)推送的数据的消费者。在Rxjs中，Observer是由回调组成的对象，对象的键名分别为：<code class=\"language-text\">next</code>、<code class=\"language-text\">error</code>和<code class=\"language-text\">complete</code>，以此接受Observable推送的不同类型的通知，下面的代码是Observer的一个简单示例：</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> observer <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Observer got a next value: '</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function-variable function\">error</span><span class=\"token operator\">:</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Observer got an error: '</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function-variable function\">complete</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Observer got a complete notification'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Observer的使用，只需要在<code class=\"language-text\">subscribe</code>Observable时，把observer作为参数传递给<code class=\"language-text\">subscribe</code>方法即可。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">observable<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>Observers are just objects with three callbacks, one for each type of notification that an Observable may deliver.</p>\n</blockquote>\n<p>在Rxjs中，Observer中的<code class=\"language-text\">next</code>,<code class=\"language-text\">error</code>,<code class=\"language-text\">complete</code>三个处理逻辑是可以部分缺失的，即使缺失了部分，Observable仍能正常运行的，只不过是对应的处理逻辑会被忽略，因为没有定义相应的处理逻辑，Observable也就无法处理的。</p>\n<p>下面例子中的Observer就缺少了<code class=\"language-text\">complete</code>的处理逻辑：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> observer <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Observer got a next value: '</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token function-variable function\">error</span><span class=\"token operator\">:</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Observer got an error: '</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在<code class=\"language-text\">subscribe</code>Observable的时候，可以直接把函数作为参数传递给<code class=\"language-text\">subscribe</code>方法，而不用传入整个Observer对象,当只传入一个函数的时候，Rxjs在内部会创建一个只含有<code class=\"language-text\">next</code>处理逻辑的Observer。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">observable<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Observer got a next value: '</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>当然你也可以把<code class=\"language-text\">next</code>,<code class=\"language-text\">error</code>,<code class=\"language-text\">complete</code>的回调函数作为参数全部传入<code class=\"language-text\">subscribe</code>方法：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">observable<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>\r\n  <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Observer got a next value: '</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Observer got an error: '</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Observer got a complete notification'</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>上面的例子，在Observable的内部，依然可以正常的调用<code class=\"language-text\">observer.next</code>,<code class=\"language-text\">observer.error</code>,<code class=\"language-text\">observer.complete</code>三个方法。</p>","excerpt":"Observer what is Observer? Observer(观察者)是Observable(可观察对象)推送的数据的消费者。在Rxjs中，Observer是由回调组成的对象，对象的键名分别为：、和，以此接受Observable推送的不同类型的通知，下面的代码是Observer的一个简单示例： Observer的使用，只需要在Observable时，把observer作为参数传递给方法即可。 Observers are just objects with three callbacks…","fields":{"slug":"/blog/2017/11/8/Rxjs-Observer.html","date":"2017-11-07T16:00:00.000Z"},"frontmatter":{"title":"Rxjs Observer","img":"./img/2017-11-08.jpeg","author":["Sylvenas"],"categories":"Rxjs"}}},"pageContext":{"slug":"/blog/2017/11/8/Rxjs-Observer.html"}},"staticQueryHashes":[]}