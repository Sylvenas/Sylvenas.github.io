{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/2017/11/23/FP6-Curry-and-PartialApplication.html","result":{"data":{"markdownRemark":{"html":"<p>在了解什么是偏应用函数和柯里化之前，我们先复习一下中学数学中的高斯消元法的简单应用：<br>\n设函数<code class=\"language-text\">f(x,y) = x + y</code>；在<code class=\"language-text\">y = 1</code>的时候，函数可以修改为<code class=\"language-text\">f(x) = x + 1</code>；<br>\n上面的基本思路就是把<code class=\"language-text\">二元</code>变成<code class=\"language-text\">一元</code>，同理我们可以把三元函数<code class=\"language-text\">降元</code>为二元，甚至把多元函数<code class=\"language-text\">降元</code>为一元函数。</p>\n<p>那么我们可以在一定程度上认为函数求值的过程，也可以认为就是函数消元的过程，当所有的元都被消完之后，那么就可以求的函数值。</p>\n<p>在函数式编程中，我们也可以采用类似的思路去解决我们的问题，下面我们看几个关于函数参数的例子：</p>\n<h3>All for One</h3>\n<p>我们先看一个简单的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>parseInt<span class=\"token punctuation\">)</span></code></pre></div>\n<p>上面的代码执行的结果很多人在第一次接触的时候，都会弄错，我认识的想当一部人认为上面的结果是<code class=\"language-text\">[1, 2, 3]</code>,但是实际上面代码运行的结果为：<code class=\"language-text\">[1, NaN, NaN]</code>,这是因为<code class=\"language-text\">map</code>函数会向传入它的函数，传递三个参数：<code class=\"language-text\">currentValue</code>,<code class=\"language-text\">index</code>,<code class=\"language-text\">array</code>,而<code class=\"language-text\">parseInt</code>函数是可以接收两个参数的，这样说明一下，上面的结果也就不难理解了。</p>\n<p>那么把上面的问题概括一下，可以描述为：如果一个函数本身可以接收多个参数，但是某些情况下，我们只想给该函数传入一个参数的情况下调用该函数。</p>\n<p>我们设计一个简单的小助手来包装一个函数，使得只有一个参数能够被传入该函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">unary</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">onlyOneArg</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">uncay(...)</code>创建一个函数，这个函数会把除了第一个参数之外的所有参数全部忽略。在应用<code class=\"language-text\">parseInt</code>函数的时候，传入的第二个参数<code class=\"language-text\">index</code>会被自己忽略。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token function\">unary</span><span class=\"token punctuation\">(</span>parseInt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token comment\">// [1, 2, 3]</span></code></pre></div>\n<h3>One on One</h3>\n<p>说到只有一个参数的函数，函数式编程中有一个常见的最基础的函数，它接收一个参数，什么都不做，直接把该参数返回：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">identity</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> v<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这个函数看起来超级简单，甚至没有什么用处。但是，请记住任何函数在函数式编程中都是有用武之地的。就像演艺界中：没有小角色，只有小演员。\r\n例如：设想你用一个正则表达式来分割一个字符串，但是结果数组中可能包含一个空值，我们可以使用<code class=\"language-text\">Array.prototype.filter</code>和<code class=\"language-text\">identity</code>来过滤空值。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> words <span class=\"token operator\">=</span> <span class=\"token string\">\"   Now is the time for all...  \"</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\s|\\b</span><span class=\"token regex-delimiter\">/</span></span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nwords<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span> identity <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token comment\">// [\"Now\",\"is\",\"the\",\"time\",\"for\",\"all\",\"...\"]</span></code></pre></div>\n<p>另一个例子是，我们可以把<code class=\"language-text\">identity(...)</code>作为转换函数的默认参数。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg<span class=\"token punctuation\">,</span>formatFn <span class=\"token operator\">=</span> identity</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    msg <span class=\"token operator\">=</span> <span class=\"token function\">formatFn</span><span class=\"token punctuation\">(</span> msg <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> msg <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">upper</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">txt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> txt<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token function\">output</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">,</span> upper <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// HELLO WORLD</span>\r\n<span class=\"token function\">output</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Hello World\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// Hello World</span></code></pre></div>\n<h3>Unchanging One</h3>\n<p>有些API不允许给方法传递一个值，只能传递一个函数作为参数，即使这个函数也只是返回一个值，JavaScript中的<code class=\"language-text\">Promises</code>是一个典型的案例：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// doesn't work:</span>\r\np1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> foo <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> p2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> bar <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\">// instead:</span>\r\np1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> foo <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> p2<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> bar <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>但是我们依然可以创建一个函数式的工具来帮我实现这个：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">constant</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> v<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\np1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> foo <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> <span class=\"token function\">constant</span><span class=\"token punctuation\">(</span> p2 <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> bar <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Some Now, Some Later and Partial Application</h3>\n<p>如果一个函数可以接收多个参数，你可能会想先指定部分参数，余下的参数稍后在指定，来看这个函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">,</span>callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">// ..</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>想象一个场景，你要发起多个已知URl的API请求，但是这些请求的数据和处理响应信息的毁掉函数要稍后才能知道。</p>\n<p>当然你可以等这些参数都确定下来之后，在发起<code class=\"language-text\">ajax(...)</code>请求，并且到那时候在饮用全局URL常量。但我们还有另一个选择，就是创建一个已经预设URL实参的函数引用。</p>\n<p>我们将创建一个新函数，其内部仍然发起<code class=\"language-text\">ajax(...)</code>请求，此外在等待接收另外两个参数的同时，我们将手动将<code class=\"language-text\">ajax(...)</code>第一个参数设置成你的API的地址。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getPerson</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span>cb</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"http://some.api/person\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> cb <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">getOrder</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span>cb</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"http://some.api/order\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> cb <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>手动指定这些函数完全是有可能的，但是很明显这是个冗长乏味的过程，尤其是预设参数可能还会变化的情况，例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getCurrentUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cb</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">getPerson</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span> user<span class=\"token operator\">:</span> <span class=\"token constant\">CURRENT_USER_ID</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> cb <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>函数式编程的核心思路之一，就是在做同一种事情的时候找到一种通用的模式，并试着将这种抽象的模式转换为可重用的函数。实际上，这种思路早已是大多数开发人员的本能反应了，这种思路也不是函数式编程所独有的。但是对于函数式编程而言，这个思路的重要性是毋庸置疑的。</p>\n<p>为了实现这个预设第一个参数的函数，我们不能仅仅着眼与前面手动实现的方式，还要在整体概念上概括一下到底发生了什么？</p>\n<p>用一句话来说明发生的事情：<code class=\"language-text\">getOrder(data,cb)</code>是<code class=\"language-text\">ajax(url,data,cb)</code>函数的<strong>偏应用函数(partial application)</strong>,该术语描述的概念是：<strong>在函数调用时(function call-site)，将实参应用于(apply)形参</strong>。如你所见：我们一开始仅应用了部分实参，--先将<code class=\"language-text\">\"http://some.api/person\"</code>实参应用到<code class=\"language-text\">url</code>形参,剩下的参数稍后在应用。</p>\n<p>该模式严格的说法是：偏函数严格来讲是一个减少函数参数个数(function.length)的过程;这里的参数个数指的是函数期望传入的形参的数量。我们通过<code class=\"language-text\">getOrder(...)</code>把原函数<code class=\"language-text\">ajax(...)</code>的参数个数从3个减少到2个。</p>\n<p>让我们来定义一个<code class=\"language-text\">partial(...)</code>的工具函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">partial</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>presetArgs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">partiallyApplied</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>laterArgs</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">...</span>presetArgs<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>laterArgs <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// or the ES6 => arrow form</span>\r\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">partial</span> <span class=\"token operator\">=</span>\r\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>presetArgs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\r\n        <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>laterArgs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\r\n            <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">...</span>presetArgs<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>laterArgs <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">partial(...)</code>函数接收<code class=\"language-text\">fn</code>参数，<code class=\"language-text\">fn</code>是将要被我们<code class=\"language-text\">偏应用(oartially apply)</code>实参的函数。接着<code class=\"language-text\">fn</code>形参之后，<code class=\"language-text\">presetArgs</code>数组手机了后面传入的部分参数，保存起来稍后使用。</p>\n<p>我们创建并<code class=\"language-text\">return</code>了新的内部函数(为了清晰明了，我们把它命令为<code class=\"language-text\">partiallyApplied(...)</code>),该函数接收<code class=\"language-text\">laterArgs</code>数组\r\n作为稍后要传递的剩余参数。</p>\n<p>你注意到在<code class=\"language-text\">partiallyApplied(...)</code>函数内部的<code class=\"language-text\">fn</code>和<code class=\"language-text\">presetArgs</code>的引用了吗？它们是怎么工作的呢？在函数<code class=\"language-text\">partial(...)</code>执行结束之后，内部函数为何还能访问到<code class=\"language-text\">fn</code>和<code class=\"language-text\">presetArgs</code>?很明显，在JavaScript中这就是<strong>闭包(closure)</strong> .内部函数<code class=\"language-text\">partiallyApplied(...)</code>封闭了<code class=\"language-text\">fn</code>和<code class=\"language-text\">presetArgs</code>变量，所以无论该函数在哪里运行，我们都可以访问到这些变量。</p>\n<p>当<code class=\"language-text\">partiallyApplied(...)</code>函数稍后在某处执行时，该函数使用被闭包作用(closed over)的<code class=\"language-text\">fn</code>引用来执行原函数，首先传入(被闭包作用的)<code class=\"language-text\">presetArgs</code>数组中所有偏应用(partial application)实参，然后传入刚刚被传入的<code class=\"language-text\">laterArgs</code>数组中的实参。</p>\n<p>现在我们用<code class=\"language-text\">partial(..)</code>函数来制造一些之前我们提到的偏函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> getPerson <span class=\"token operator\">=</span> <span class=\"token function\">partial</span><span class=\"token punctuation\">(</span> ajax<span class=\"token punctuation\">,</span> <span class=\"token string\">\"http://some.api/person\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">var</span> getOrder <span class=\"token operator\">=</span> <span class=\"token function\">partial</span><span class=\"token punctuation\">(</span> ajax<span class=\"token punctuation\">,</span> <span class=\"token string\">\"http://some.api/order\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>请暂停并思考一下<code class=\"language-text\">getPerson(...)</code>函数的外形和内在，它相当于下面这样的：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">getPerson</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">partiallyApplied</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>laterArgs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"http://some.api/person\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>laterArgs <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>那我们仔细思考一下<code class=\"language-text\">getCurrentUser(...)</code>函数又该是怎么样的呢？</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// version 1</span>\r\n<span class=\"token keyword\">var</span> getCurrentUser <span class=\"token operator\">=</span> <span class=\"token function\">partial</span><span class=\"token punctuation\">(</span>\r\n    ajax<span class=\"token punctuation\">,</span>\r\n    <span class=\"token string\">\"http://some.api/person\"</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">{</span> user<span class=\"token operator\">:</span> <span class=\"token constant\">CURRENT_USER_ID</span> <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\">// version 2</span>\r\n<span class=\"token keyword\">var</span> getCurrentUser <span class=\"token operator\">=</span> <span class=\"token function\">partial</span><span class=\"token punctuation\">(</span> getPerson<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> user<span class=\"token operator\">:</span> <span class=\"token constant\">CURRENT_USER_ID</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>我们可以(version1)直接指定<code class=\"language-text\">url</code>和<code class=\"language-text\">data</code>两个实参来定义<code class=\"language-text\">getCurrentUser(...)</code>函数，也可以(版本2)将<code class=\"language-text\">getCurrentUser(...)</code>函数定义为<code class=\"language-text\">getPerson(...)</code>的偏应用，该偏应用仅指定一个<code class=\"language-text\">data</code>实参。</p>\n<p>因为version2重用了已经定义好的函数，所有在表达上更清晰一些，这也更符合函数式编程的精神。</p>\n<p>我们在看另外一个偏应用的例子：设想一个<code class=\"language-text\">add(...)</code>函数，它接收两个参数，并返回二者之和：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>现在我们有一个数字数组，并要给数组中的每个数字加一个确定的数值，我们讲使用<code class=\"language-text\">Array.prototype.map()</code>函数。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">adder</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\">// [4,5,6]</span></code></pre></div>\n<p>因为<code class=\"language-text\">add(..)</code>函数签名不是我们预期传递给<code class=\"language-text\">map(..)</code>函数的，所以我们不能直接把它传入<code class=\"language-text\">map(..)</code>函数，这样以来，偏应用就有了用武之地：我们可以偏应用<code class=\"language-text\">add(..)</code>函数的第一个参数，以符合<code class=\"language-text\">map(..)</code>函数的预期。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span> <span class=\"token function\">partial</span><span class=\"token punctuation\">(</span> add<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token comment\">// [4,5,6]</span>\r\n</code></pre></div>\n<h4>bind(...)</h4>\n<p>JavaScript函数有一个内置的<code class=\"language-text\">bind(..)</code>函数，该函数有两个功能：预设<code class=\"language-text\">this</code>关键字的上下文，一级偏应用实参。</p>\n<p>我认为将这两个功能混合进一个函数是非常糟糕的决定。有时候你不关心<code class=\"language-text\">this</code>的绑定，而只是要偏应用实参。在上面的例子中，如果我们要偏应用<code class=\"language-text\">url</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> getPerson <span class=\"token operator\">=</span> <span class=\"token function\">ajax</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"http://some.api/person\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>传递的第一个参数null,看上去是真的很糟糕</p>\n</blockquote>\n<h3>One at a Time and Curry</h3>\n<p>我们现在来看一个和偏应用(partial application)很类似的技术，该技术将一个期望接收多个参数的函数拆解城连续的链式函数(chained function)，每个链式函数只接收一个单一参数(function.length===1),并返回接收下一个参数的函数。</p>\n<p>而这就是柯里化(currying)技术。</p>\n<p>在计算机科学中，<strong>柯里化(currying)</strong>,又译为<strong>加里化</strong>，是把接收多个参数的函数变换成接收一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数而且返回结果的心函数的技术。这个技术是由Christopher Strachey以逻辑学家Haskell Brooks Curry命名的，尽管它是Moses Schönfinkel和Friedrich Ludwig Gottlob Frege发明的。</p>\n<p>在直觉上，柯里化声称*\"如果你固定某些参数，你将得到接受雨轩参数的一个函数\"*。例如上面上面提到的<code class=\"language-text\">消元</code>的例子。\r\n从数学的角度来看，柯里化也可以理解为一个逐次消元的过程，把函数的元全消掉，那就可以得到函数的值，值也就是0元函数。</p>\n<p>在理论计算机科学中，柯里化提出了简单的理论模型，比如：只接受一个单一参数的lambda演算中，研究带有多个参数的函数的方式。</p>\n<p>比如我们有一个函数如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">babyAnimals</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token string\">'I love '</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">' and '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">return</span> result\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token function\">babyAnimals</span><span class=\"token punctuation\">(</span><span class=\"token string\">'panda'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sloth'</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\">// I love panda and sloth  </span></code></pre></div>\n<p>那么我们可以把它转换成一个currying(柯里化)函数，如下：</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">babyAnimals</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r</span><span class=\"gatsby-highlight-code-line\">        <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token string\">'I love '</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">' and '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r</span><span class=\"gatsby-highlight-code-line\">        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\r</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span>\r</span><span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">var</span> babyPanda <span class=\"token operator\">=</span> <span class=\"token function\">babyAnimals</span><span class=\"token punctuation\">(</span><span class=\"token string\">'panda'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token function\">babyPanda</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sloth'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token comment\">// I love panda and sloth  </span>\r\n<span class=\"token function\">babyPanda</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token comment\">// I love panda and cat  </span></code></pre></div>\n<p><code class=\"language-text\">babyAnimals</code>是一个柯里化的函数，它被设计成了在函数本身完全执行之前，第一个参数已经被<strong>预填充</strong> 了,那么这样带来的显而易见的好处就是,<code class=\"language-text\">babyPanda</code>可以添加别的小动物，可以很方便的表达我除了对panda的爱之外对其他种类小动物的爱。</p>\n<p>currying不是原生的JavaScript提供的功能，但是我们可以编写一个(currier)函数把任何给定的函数转换为自己的curried版本，下面是一个简单的实现：</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">curry</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> fn <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r</span>    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'curry function expected the argument to be a function.'</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">curried</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r</span>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> fn<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r</span>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token function\">curried</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n      <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>现在我们可以把任何函数作为<code class=\"language-text\">currier</code>函数的参数，来生成函数的柯里化版本。</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sequence</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">start<span class=\"token punctuation\">,</span> end</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\r\n<span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span>\r</span><span class=\"token keyword\">var</span> seq5 <span class=\"token operator\">=</span> <span class=\"token function\">currier</span><span class=\"token punctuation\">(</span>sequence<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token function\">seq5</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [3,4,5]</span></code></pre></div>\n<blockquote>\n<p>柯里化和偏应用很类似，都可以预填充部分数据，但是，两者的不同之处在于，柯里化函数会明确的返回一个期望<strong>只接收下一个参数</strong>的函数，而偏应用则是返回一个可以<strong>接收余下所有参数</strong>的函数。</p>\n<p>柯里化在每次调用时都会生成嵌套的一元函数。在底层，函数的最终结果是由这些一元函数的逐步组合产生的。同时，柯里化的变体允许同时传递一部分参数。因此，可以完全控制函数求值的时间和方式。</p>\n<p>部分应用将函数的参数与一些预设值绑定(赋值)，从而产生一个拥有更少参数的心函数。该函数的闭包中包含了这些已赋值的参数，在之后的调用中被完全求值。</p>\n</blockquote>\n<p>例如：一个原函数期望接收5个参数，那么这个函数的柯里化形式只会接收第一个参数，并且返回一个用来接收第二个参数的函数。并且这个被返回的函数也只能接收第二个参数，并返回一个接收第三个参数的函数，以此类推；但是这个原函数的偏应用函数，可以先固定前面的某几个参数，然后接收剩下的全部的参数。</p>\n<h3>Real World Currying Examples</h3>\n<p>柯里化技术使用的非常广泛，通常用于创建可抽象函数行为的函数包装器，可预设其参数或者部分求值。其优势源于具有较少参数的纯函数比较多参数的函数更易使用。两种方法都有助于向函数提供正确的参数，这样函数就不必在减少为一元函数时公然地访问其作用域之外的对象。这种分离参数获取逻辑的方式使得函数具有更好的可重用性。更重要的是，它简化了函数组合。</p>\n<h4>扩展JavaScript原生对象的方法</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Log <span class=\"token operator\">=</span> console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">partial</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>presetArgs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n\t<span class=\"token keyword\">const</span> placeholder <span class=\"token operator\">=</span> <span class=\"token string\">'_'</span><span class=\"token punctuation\">;</span>\r\n\r\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">bound</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\r\n\t\t<span class=\"token keyword\">let</span> position <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> presetArgs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token keyword\">const</span> args <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\t\targs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> presetArgs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> placeholder <span class=\"token operator\">?</span>\r\n\t\t\t\targuments<span class=\"token punctuation\">[</span>position<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> presetArgs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\r\n\t\t<span class=\"token punctuation\">}</span>\r\n\r\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>position <span class=\"token operator\">&lt;</span> arguments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\t\targs<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">[</span>position<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\t\t<span class=\"token punctuation\">}</span>\r\n\r\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\r\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n\t<span class=\"token keyword\">return</span> bound<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>first <span class=\"token operator\">=</span> <span class=\"token function\">partial</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>substring<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>last <span class=\"token operator\">=</span> <span class=\"token function\">partial</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>slice<span class=\"token punctuation\">,</span> <span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>asName <span class=\"token operator\">=</span> <span class=\"token function\">partial</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(\\w+)\\s(\\w+)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'$2, $1'</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>compute <span class=\"token operator\">=</span> <span class=\"token function\">partial</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abcdef'</span><span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">last</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zhao tao'</span><span class=\"token punctuation\">.</span><span class=\"token function\">asName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>JavaScript Bind</h4>\n<p><code class=\"language-text\">Function.prototype.bind()</code>可以直接实现currying的功能</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">var</span> inc <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r</span><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token function\">inc</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 3</span></code></pre></div>\n<h4>React and Redux</h4>\n<p><a href=\"\">react-redux connect()</a>function 也是一个柯里化函数</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>TodoApp<span class=\"token punctuation\">)</span></code></pre></div>\n<h4>Event Handling</h4>\n<p>react中事件传参</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fieldName</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token function\">saveField</span><span class=\"token punctuation\">(</span>fieldName<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">...</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<h4>Rendering HTML</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">renderHtmlTag</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">tagName</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">content</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>tagName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>content<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>tagName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">></span><span class=\"token template-punctuation string\">`</span></span>\r\n\r\nrenderDiv <span class=\"token operator\">=</span> <span class=\"token function\">renderHtmlTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span>\r\nrenderH1 <span class=\"token operator\">=</span> <span class=\"token function\">renderHtmlTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">)</span>\r\n\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\r\n  <span class=\"token function\">renderDiv</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is a really cool div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token function\">renderH1</span><span class=\"token punctuation\">(</span><span class=\"token string\">'and this is an even cooler h1'</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Why Currying and Partial Application?</h3>\n<p>无论是柯里化风格( <code class=\"language-text\">sum(1)(2)(3)</code> )还是偏应用风格( <code class=\"language-text\">partial(sum,1,2)(3)</code> ),它们看起来比原函数还要复杂奇怪很多，那么在函数式编程时，我们为什么要这么做呢？答案有一下几个方面：</p>\n<p>首先是显而易见的理由，使用柯里化和便应用可以将指定分离的时机和地方独立开来，而传统的函数调用则需要预先确定所有的实参。如果你在代码某一处只获取了部分实参，然后在另一处确定部分实参，这个时候柯里化和偏应用就能派上用场。</p>\n<p>另一个最能体现柯里化应用的是，当函数只有一个形参的时候，我么能够比较容易的组合它们。因此，如果一个函数最终需要三个实参，那么它被柯里化以后会变成需要三次调用，每次调用需要一个实参的函数。当我们组合函数的时候，这种单元函数的形式会让我们处理器来更简单。</p>","excerpt":"在了解什么是偏应用函数和柯里化之前，我们先复习一下中学数学中的高斯消元法的简单应用： 设函数；在的时候，函数可以修改为； 上面的基本思路就是把变成，同理我们可以把三元函数为二元，甚至把多元函数为一元函数。 那么我们可以在一定程度上认为函数求值的过程，也可以认为就是函数消元的过程，当所有的元都被消完之后，那么就可以求的函数值。 在函数式编程中，我们也可以采用类似的思路去解决我们的问题，下面我们看几个关于函数参数的例子： All for One…","fields":{"slug":"/blog/2017/11/23/FP6-Curry-and-PartialApplication.html","date":"November 22, 2017"},"frontmatter":{"title":"FP6：Partial Application And Curry","img":"./img/2017-11-23.jpeg","author":["Sylvenas"],"categories":"functional"}}},"pageContext":{"slug":"/blog/2017/11/23/FP6-Curry-and-PartialApplication.html"}},"staticQueryHashes":[]}