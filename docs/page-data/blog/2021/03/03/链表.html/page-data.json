{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/2021/03/03/链表.html","result":{"data":{"markdownRemark":{"html":"<h2>707.设计链表</h2>\n<p>/**\n设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：val 和 next。val 是当前节点的值，next 是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性 prev 以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。</p>\n<p>在链表类中实现这些功能：</p>\n<p>get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。\naddAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。\naddAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。\naddAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val  的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果index小于0，则在头部插入节点。\ndeleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点。</p>\n<p>示例：</p>\n<p>MyLinkedList linkedList = new MyLinkedList();\nlinkedList.addAtHead(1);\nlinkedList.addAtTail(3);\nlinkedList.addAtIndex(1,2);   // 链表变为1-> 2-> 3\nlinkedList.get(1);            // 返回2\nlinkedList.deleteAtIndex(1);  // 现在链表是1-> 3\nlinkedList.get(1);            // 返回3\n*/</p>\n<p>/**</p>\n<p>// 假设链表为 5 -> 3 > 1\n{\nval: 5,\nnext: {\nval: 3,\nnext: {\nval: 1,\nnext: null\n}\n}\n}\n// 双链表的结构就会多一个prev, 这个就不写了, 不然字数限制\n*/</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyLinkedList</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> curr <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>curr<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n            curr <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span>next\n            i<span class=\"token operator\">++</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> curr<span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">:</span> curr<span class=\"token punctuation\">.</span>val\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">addAtHead</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>val <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> val<span class=\"token punctuation\">,</span> next<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> val<span class=\"token punctuation\">,</span> next<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">addAtTail</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> curr <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            curr <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span>next\n        <span class=\"token punctuation\">}</span>\n        curr<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> val<span class=\"token punctuation\">,</span> next<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">addAtIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index<span class=\"token punctuation\">,</span> val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addAtHead</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">deleteAtIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>206.反转链表</h2>\n<p>/**</p>\n<ul>\n<li>给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。</li>\n<li></li>\n<li>head = [1,2,3,4,5] => [5,4,3,2,1]</li>\n<li>head = [1,2] => [2,1]</li>\n<li>head = [] => []</li>\n</ul>\n<p>*/</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">\n<span class=\"token comment\">/**\n* Definition for singly-linked list.\n* function ListNode(val, next) {\n*     this.val = (val===undefined ? 0 : val)\n*     this.next = (next===undefined ? null : next)\n* }\n*/</span>\n<span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/************* 循环 *****************/</span>\n <span class=\"token comment\">/**\n  * @param {ListNode} head\n  * @return {ListNode}\n  */</span>\n <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">reverseList</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">head</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> prev <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建这个变量作为反转链表的尾部</span>\n   <span class=\"token keyword\">let</span> curr <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这个变量用于不断的移动指针。</span>\n\n   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">let</span> next <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 翻转之前需要先保存 next 节点，不然翻转之后找不到这个位置的元素了</span>\n     curr<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前节点 next 指针翻转指向 pre 前置节点</span>\n     prev <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 pre 移动到 cur 当前的位置</span>\n     curr <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 cur 移动到 next 的位置 执行下一次的循环</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token keyword\">return</span> prev<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">const</span> linkList <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n   value<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n   next<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n     value<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n     next<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n       value<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n       next<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span>linkList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => { value: 3, next: { value: 2, next: { value: 1, next: null } } }</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/************* 递归 *****************/</span>\n <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">reverseList2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">head</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reverse</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">prev<span class=\"token punctuation\">,</span> curr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>curr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> prev<span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">let</span> next <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n     curr<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">return</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">return</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">const</span> linkList <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n   value<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n   next<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n     value<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n     next<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n       value<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n       next<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">const</span> res2 <span class=\"token operator\">=</span> <span class=\"token function\">reverseList2</span><span class=\"token punctuation\">(</span>linkList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => { value: 3, next: { value: 2, next: { value: 1, next: null } } }</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>203.移除链表元素</h2>\n<p>/**\n删除链表中等于给定值 val 的所有节点。</p>\n<p>示例:\n输入: 1->2->6->3->4->5->6, val = 6\n输出: 1->2->3->4->5\n*/</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Definition for singly-linked list.\n     * function ListNode(val, next) {\n     *     this.val = (val===undefined ? 0 : val)\n     *     this.next = (next===undefined ? null : next)\n     * }\n     */</span>\n    <span class=\"token comment\">/**\n     * @param {ListNode} head\n     * @param {number} val\n     * @return {ListNode}\n    */</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> val<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>next <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> next<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">removeElements</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">head<span class=\"token punctuation\">,</span> val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">let</span> newHead <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            prev <span class=\"token operator\">=</span> newHead<span class=\"token punctuation\">,</span>\n            curr <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n\n        newHead<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> curr\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">.</span>val <span class=\"token operator\">===</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                prev<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span>next\n                curr <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span>next\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                prev <span class=\"token operator\">=</span> curr\n                curr <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span>next\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> newHead<span class=\"token punctuation\">.</span>next\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>142.环形链表II</h2>\n<p>/**</p>\n<p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p>\n<p>为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意，pos 仅仅是用于标识环的情况，并不会作为参数传递到函数中。</p>\n<p>说明：不允许修改给定的链表。</p>\n<p>进阶：</p>\n<p>你是否可以使用 O(1) 空间解决此题？\n*/</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n* Definition for singly-linked list.\n* function ListNode(val) {\n*     this.val = val;\n*     this.next = null;\n* }\n*/</span>\n\n<span class=\"token comment\">/**\n* @param {ListNode} head\n* @return {ListNode}\n*/</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">detectCycle</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">head</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","excerpt":"707.设计链表 /**\n设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：val 和 next。val 是当前节点的值，next 是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性 prev 以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。 在链表类中实现这些功能： get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。\naddAtHead(val)：在链表的第一个元素之前添加一个值为 val…","fields":{"slug":"/blog/2021/03/03/链表.html","date":"March 02, 2021"},"frontmatter":{"title":"链表","img":"./img/2015-03-25.jpg","author":["Sylvenas"],"categories":"code"}}},"pageContext":{"slug":"/blog/2021/03/03/链表.html"}},"staticQueryHashes":[]}