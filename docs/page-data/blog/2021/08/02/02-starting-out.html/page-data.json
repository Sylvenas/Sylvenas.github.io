{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/2021/08/02/02-starting-out.html","result":{"data":{"markdownRemark":{"html":"<h1>ready-begin</h1>\n<h2>各就各位，预备！</h2>\n<p>[$img/startingout.png]</p>\n<p>好的，出发！如果你属于那种从不看说明书的不良人士，我推荐你还是回头看一下简介的最后一节。那里面讲了这个教程中你需要用到的工具及基本用法。我们首先要做的就是进入ghc的交互模式，接着就可以调几个函数小体验一把Haskell了。打开控制台，输入ghci，可以看到如下欢迎信息：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token constant\">GHCi</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">version</span> <span class=\"token number\">6.8</span><span class=\"token punctuation\">.</span><span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token hvariable\">http</span><span class=\"token operator\">://</span><span class=\"token hvariable\">www</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">haskell</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">org</span><span class=\"token operator\">/</span><span class=\"token hvariable\">ghc</span><span class=\"token operator\">/</span>  \n<span class=\"token operator\">:?</span> <span class=\"token hvariable\">for</span> <span class=\"token hvariable\">help</span>  <span class=\"token constant\">Loading</span> <span class=\"token hvariable\">package</span> <span class=\"token hvariable\">base</span> <span class=\"token operator\">...</span> <span class=\"token hvariable\">linking</span> <span class=\"token operator\">...</span> <span class=\"token hvariable\">done</span><span class=\"token punctuation\">.</span>  \n<span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>恭喜，你已经进入了ghci！目前它的命令行提示为<code class=\"language-text\">prelude></code>，不过在你装载什么东西之后，它会随着变得比较长。免得碍眼，我们输入个<code class=\"language-text\">:set prompt \"ghci> \"</code> 把它改成<code class=\"language-text\">ghci></code>。</p>\n<p>如下是一些简单的运算：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">15</span>  <span class=\"token number\">17</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token number\">49</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span>  <span class=\"token number\">4900</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token number\">1892</span> <span class=\"token operator\">-</span> <span class=\"token number\">1472</span>  <span class=\"token number\">420</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token number\">5</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span>  <span class=\"token number\">2.5</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>很简单。也可以在一行中使用多个运算符，按照运算符优先级执行计算，使用括号可以更改优先级次序。</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token number\">50</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">4999</span>  \n<span class=\"token number\">1</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token number\">50</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span> <span class=\"token operator\">-</span> <span class=\"token number\">4999</span>  \n<span class=\"token number\">1</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token number\">50</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token operator\">-</span> <span class=\"token number\">4999</span><span class=\"token punctuation\">)</span>  \n<span class=\"token operator\">-</span><span class=\"token number\">244950</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>很酷么？嗯，我承认不。处理负数时会有个小陷阱：执行<code class=\"language-text\">5 * -3</code>会使ghci报错。因此，使用负数时最好将其置于括号之中，像<code class=\"language-text\">5 * (-3)</code>就不会有问题。</p>\n<p>逻辑运算也同样直白，你也许知道，&#x26;&#x26; 指逻辑与，|| 指逻辑或，not 指逻辑否。</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token constant\">True</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token constant\">False</span>  \n<span class=\"token constant\">False</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token constant\">True</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token constant\">True</span>  \n<span class=\"token constant\">True</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token constant\">False</span> <span class=\"token operator\">||</span> <span class=\"token constant\">True</span>  \n<span class=\"token constant\">True</span>   \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token builtin\">not</span> <span class=\"token constant\">False</span>  \n<span class=\"token constant\">True</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token builtin\">not</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">True</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token constant\">True</span><span class=\"token punctuation\">)</span>  \n<span class=\"token constant\">False</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>相等性可以这样判定：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token number\">5</span> <span class=\"token operator\">==</span> <span class=\"token number\">5</span>  \n<span class=\"token constant\">True</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span>  \n<span class=\"token constant\">False</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token number\">5</span> <span class=\"token operator\">/=</span> <span class=\"token number\">5</span>  \n<span class=\"token constant\">False</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token number\">5</span> <span class=\"token operator\">/=</span> <span class=\"token number\">4</span>  \n<span class=\"token constant\">True</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token string\">\"hello\"</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"hello\"</span>  \n<span class=\"token constant\">True</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p><code class=\"language-text\">/=</code> 表示 <code class=\"language-text\">不等于</code></p>\n</blockquote>\n<p>执行<code class=\"language-text\">5 + \"llama\"</code>或者<code class=\"language-text\">5 == True</code>会怎样？好的，一个大大的报错等着你。</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token constant\">No</span> <span class=\"token keyword\">instance</span> <span class=\"token hvariable\">for</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Num</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Char</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  \n<span class=\"token hvariable\">arising</span> <span class=\"token hvariable\">from</span> <span class=\"token hvariable\">a</span> <span class=\"token hvariable\">use</span> <span class=\"token keyword\">of</span> `<span class=\"token operator\">+</span>' <span class=\"token hvariable\">at</span> <span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span>  \n<span class=\"token constant\">Possible</span> <span class=\"token hvariable\">fix</span><span class=\"token operator\">:</span> <span class=\"token hvariable\">add</span> <span class=\"token hvariable\">an</span> <span class=\"token keyword\">instance</span> <span class=\"token hvariable\">declaration</span> <span class=\"token hvariable\">for</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Num</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Char</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  \n<span class=\"token constant\">In</span> <span class=\"token hvariable\">the</span> <span class=\"token hvariable\">expression</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"llama\"</span>  \n<span class=\"token constant\">In</span> <span class=\"token hvariable\">the</span> <span class=\"token hvariable\">definition</span> <span class=\"token keyword\">of</span> `<span class=\"token hvariable\">it</span>'<span class=\"token operator\">:</span> <span class=\"token hvariable\">it</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"llama\"</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>呀呀！ghci 提示说<code class=\"language-text\">\"llama\"</code>并不是数值类型，所以它不知道该怎样才能给它加上5。即便是<code class=\"language-text\">\"four\"</code>甚至是<code class=\"language-text\">\"4\"</code>也不可以，Haskell不拿它当数值。执行<code class=\"language-text\">True == 5</code>, ghci就会提示类型不匹配。<code class=\"language-text\">+</code>运算符要求两端都是数值，而<code class=\"language-text\">==</code>运算符仅对两个可比较的值可用。这就要求他们的类型都必须匹配，苹果和橙子就无法做比较。我们会在后面深入地理解类型的概念。</p>\n<blockquote>\n<p><code class=\"language-text\">5 + 4.0</code>是可以执行的，<code class=\"language-text\">5</code>既可以做被看做整数也可以被看做浮点数，但<code class=\"language-text\">4.0</code>则不能被看做整数。</p>\n</blockquote>\n<p>[$img/ringring.png]</p>\n<p>也许你并未察觉，不过从始至终我们一直都在使用函数。<code class=\"language-text\">*</code>就是一个将两个数相乘的函数，就像三明治一样，用两个参数将它夹在中央，这被称作中缀函数。而其他大多数不能与数夹在一起的函数则被称作前缀函数。绝大部分函数都是前缀函数，在后面我们就不多做甄别。大多数命令式编程语言中的函数调用形式通常就是函数名、括号、由逗号分隔的参数表。而在Haskell中，函数调用的形式是函数名、空格、空格分隔的参数表。简单举个例子，我们调用Haskell中最无聊的函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token builtin\">succ</span> <span class=\"token number\">8</span>  \n<span class=\"token number\">9</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">succ</code>函数返回一个数的后继（译者注: successor, 在这里就是8后面那个数，也就是9）。如你所见，通过空格将函数与参数分隔。调用多个参数的函数也是同样容易，<code class=\"language-text\">min</code>和<code class=\"language-text\">max</code>接受两个可比较大小的参数，并返回较大或者较小的那个数。</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token builtin\">min</span> <span class=\"token number\">9</span> <span class=\"token number\">10</span>  \n<span class=\"token number\">9</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token builtin\">min</span> <span class=\"token number\">3.4</span> <span class=\"token number\">3.2</span>  \n<span class=\"token number\">3.2</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token builtin\">max</span> <span class=\"token number\">100</span> <span class=\"token number\">101</span>  \n<span class=\"token number\">101</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>函数调用拥有最高的优先级，如下两句是等效的：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token builtin\">succ</span> <span class=\"token number\">9</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">max</span> <span class=\"token number\">5</span> <span class=\"token number\">4</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>  \n<span class=\"token number\">16</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">succ</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">max</span> <span class=\"token number\">5</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>  \n<span class=\"token number\">16</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>若要取9乘10的后继，<code class=\"language-text\">succ 9 * 10</code>是不行的，程序会先取9的后继，然后再乘以10得100。正确的写法应该是<code class=\"language-text\">succ (9 * 10)</code>，得91。如果某函数有两个参数，也可以用 .<code class=\"language-text\">. 符号将它括起，以中缀函数的形式调用它。例如求两个整数相除所得商的``div``函数,div 92 10可得9，但这种形式不容易理解：究竟是哪个数是除数，哪个数被除？使用中缀函数的形式`` 92 </code>div` 10<code class=\"language-text\"> 就更清晰了。从命令式编程走过来的人们往往会觉得函数调用离不开括号，比如在C中调用函数必加括号，就像</code>foo()<code class=\"language-text\">，</code>bar(1)<code class=\"language-text\">或者</code>baz(3, \"haha\")<code class=\"language-text\">这样。而在Haskell中，函数必须使用使用空格来，所以上述函数在Haskell中应该写作</code>foo<code class=\"language-text\">，</code>bar 1<code class=\"language-text\">和</code>baz 3 \"haha\"<code class=\"language-text\">。所以</code>bar (bar 3)<code class=\"language-text\">并不表示以</code>bar<code class=\"language-text\">和</code>3<code class=\"language-text\">两个参数去调用</code>bar<code class=\"language-text\">，而是以</code>bar 3<code class=\"language-text\">所得的结果作为参数去调用</code>bar<code class=\"language-text\">。在C中，就相当于</code>bar(bar(3))``。</p>\n<h2>启蒙：你的第一个函数</h2>\n<p>在前一节中我们简单介绍了函数的调用，现在让我们编写我们自己的函数！打开你最喜欢的编辑器，输入如下代码，它的功能就是将一个数字乘以2.</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">doubleMe</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">x</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>函数的声明与它的调用形式大体相同，都是先函数名，后跟由空格分隔的参数表。但在声明中一定要在 = 后面定义函数的行为。</p>\n<p>保存为baby.hs或任意名称，然后转至保存的位置，打开ghci，执行<code class=\"language-text\">:l baby.hs</code>。这样我们的函数就装载成功，可以调用了。</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span><span class=\"token hvariable\">l</span> <span class=\"token hvariable\">baby</span>  \n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span> <span class=\"token keyword\">of</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token constant\">Compiling</span> <span class=\"token constant\">Main</span>             <span class=\"token punctuation\">(</span> <span class=\"token hvariable\">baby</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">hs</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">interpreted</span> <span class=\"token punctuation\">)</span>  \n<span class=\"token constant\">Ok</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">modules</span> <span class=\"token hvariable\">loaded</span><span class=\"token operator\">:</span> <span class=\"token constant\">Main</span><span class=\"token punctuation\">.</span>  \n\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token hvariable\">doubleMe</span> <span class=\"token number\">9</span>  \n<span class=\"token number\">18</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token hvariable\">doubleMe</span> <span class=\"token number\">8.3</span>  \n<span class=\"token number\">16.6</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>+</strong> 运算符对整数和浮点都可用（实际上所有有数字特征的值都可以），所以我们的函数可以处理一切数值。声明一个包含两个参数的函数如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">doubleUs</span> <span class=\"token hvariable\">x</span> <span class=\"token hvariable\">y</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">x</span><span class=\"token operator\">*</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">y</span><span class=\"token operator\">*</span><span class=\"token number\">2</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>很简单。将它写成<code class=\"language-text\">doubleUs x y = x + x + y + y</code>也可以。测试一下（记住要保存为baby.hs并到ghci下边执行<code class=\"language-text\">:l baby.hs</code>）：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token hvariable\">doubleUs</span> <span class=\"token number\">4</span> <span class=\"token number\">9</span>  <span class=\"token number\">26</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token hvariable\">doubleUs</span> <span class=\"token number\">2.3</span> <span class=\"token number\">34.2</span>  <span class=\"token number\">73.0</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token hvariable\">doubleUs</span> <span class=\"token number\">28</span> <span class=\"token number\">88</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">doubleMe</span> <span class=\"token number\">123</span>  \n<span class=\"token number\">478</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>你可以在其他函数中调用你编写的函数，如此一来我们可以将<code class=\"language-text\">doubleMe</code>函数改为：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">doubleUs</span> <span class=\"token hvariable\">x</span> <span class=\"token hvariable\">y</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">doubleMe</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">doubleMe</span> <span class=\"token hvariable\">y</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>[^img/baby.png]</p>\n<p>这种情形在Haskell下边十分常见：编写一些简单的函数，然后将它们组合起来，形成一个较为复杂的函数，这样可以减少重复工作。设想若是哪天有个数学家验证说2应该是3，我们只需要将doubleMe改为<code class=\"language-text\">x+x+x</code>即可，由于doubleUs调用到doubleMe，于是整个程序便轻松进入2即是3的古怪世界。</p>\n<p>Haskell中的函数并没有顺序，所以先声明doubleUs还是先声明doubleMe都是同样的。如下，我们编写一个函数，它将小于100的数都乘以2，因为大于100的数都已经足够大了！</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">doubleSmallNumber</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">></span> <span class=\"token number\">100</span>                          \n                      <span class=\"token keyword\">then</span> <span class=\"token hvariable\">x</span>                          \n                      <span class=\"token keyword\">else</span> <span class=\"token hvariable\">x</span><span class=\"token operator\">*</span><span class=\"token number\">2</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>接下来介绍Haskell的if语句。你也许会觉得和其他语言很像，不过存在一些不同。Haskell中if语句的else部分是不可省略。在命令式语言中，你可以通过if语句来跳过一段代码，而在Haskell中，每个函数和表达式都要返回一个结果。对于这点我觉得将if语句置于一行之中会更易理解。Haskell 中的if语句的另一个特点就是它其实是个表达式，表达式就是返回一个值的一段代码：5是个表达式，它返回5；4+8是个表达式；x+y也是个表达式，它返 回x+y的结果。正由于else是强制的，if语句一定会返回某个值，所以说if语句也是个表达式。如果要给刚刚定义的函数的结果都加上1，可以如此修改：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">doubleSmallNumber</span>' <span class=\"token hvariable\">x</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">></span> <span class=\"token number\">100</span> <span class=\"token keyword\">then</span> <span class=\"token hvariable\">x</span> <span class=\"token keyword\">else</span> <span class=\"token hvariable\">x</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>若是去掉括号，那就会只在小于100的时候加1。注意函数名最后的那个单引号，它没有任何特殊含义，只是一个函数名的合法字符罢了。通常，我们使用单引号来区分一个稍经修改但差别不大的函数。定义这样的函数也是可以的：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">conanO'Brien</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"It's a-me, Conan O'Brien!\"</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>在这里有两点需要注意。首先就是我们没有大写conan的首字母，因为首字母大写的函数是不允许的，稍后我们将讨论其原因；另外就是这个函数并没有任何参数。没有参数的函数通常被称作“定义”（或者“名字”），一旦定义，conanO'Brien就与字符串\"It's a-me, Conan O'Brien!\"完全等价，且它的值不可以修改。</p>\n<h2>List入门</h2>\n<p>[$img/list.png]</p>\n<p>在Haskell中，List就像现实世界中的购物单一样重要。它是最常用的数据结构，并且十分强大，灵活地使用它可以解决很多问题。本节我们将对List，字符串和list comprehension有个初步了解。 在Haskell中，List是一种单类型的数据结构，可以用来存储多个类型相同的元素。我们可以在里面装一组数字或者一组字符，但不能把字符和数字装在一起。</p>\n<blockquote>\n<p>在ghci下，我们可以使用let关键字来定义一个常量。在ghci下执行<code class=\"language-text\">let a =1</code>与在脚本中编写a=1是等价的。</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token keyword\">let</span> <span class=\"token hvariable\">lostNumbers</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">42</span><span class=\"token punctuation\">]</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token hvariable\">lostNumbers</span>  \n<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">42</span><span class=\"token punctuation\">]</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>如你所见，一个List由方括号括起，其中的元素用逗号分隔开来。若试图写<code class=\"language-text\">[1,2,'a',3,'b','c',4]</code>这样的List，Haskell就会报出这几个字符不是数字的错误。字符串实际上就是一组字符的List，\"Hello\"只是<code class=\"language-text\">['h','e','l','l','o']</code>的语法糖而已。所以我们可以使用处理List的函数来对字符串进行操作。 将两个List合并是很常见的操作，这可以通过<code class=\"language-text\">++</code>运算符实现。</p>\n<p>{{\nghci> [1,2,3,4] ++ [9,10,11,12]  \n[1,2,3,4,9,10,11,12]  \nghci> \"hello\" ++ \" \" ++ \"world\"  \n\"hello world\"  \nghci> ['w','o'] ++ ['o','t']  \n\"woot\"\n}}</p>\n<p>在使用<code class=\"language-text\">++</code>运算符处理长字符串时要格外小心(对长List也是同样)，Haskell会遍历整个的List(<code class=\"language-text\">++</code>符号左边的那个)。在处理较短的字符串时问题还不大，但要是在一个5000万长度的List上追加元素，那可得执行好一会儿了。所以说，用<code class=\"language-text\">:</code>运算符往一个List前端插入元素会是更好的选择。</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token char string\">'A'</span><span class=\"token operator\">:</span><span class=\"token string\">\" SMALL CAT\"</span>  \n<span class=\"token string\">\"A SMALL CAT\"</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> \n<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>**:**运算符可以连接一个元素到一个List或者字符串之中，而<code class=\"language-text\">++</code>运算符则是连接两个List。若要使用++运算符连接单个元素到一个List之中，就用方括号把它括起使之成为单个元素的List。<code class=\"language-text\">[1,2,3]</code>实际上是<code class=\"language-text\">1:2:3:[]</code>的语法糖。<code class=\"language-text\">[]</code>表示一个空List,若要从前端插入3，它就成了<code class=\"language-text\">[3]</code>,再插入2，它就成了<code class=\"language-text\">[2,3]</code>，以此类推。</p>\n<blockquote>\n<p><code class=\"language-text\">[],[[]],[[],[],[]]</code>是不同的。第一个是一个空的List，第二个是含有一个空List的List，第三个是含有三个空List的List。</p>\n</blockquote>\n<p>若是要按照索引取得List中的元素，可以使用!!运算符，索引的下标为0。</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token string\">\"Steve Buscemi\"</span> <span class=\"token operator\">!!</span> <span class=\"token number\">6</span>  \n<span class=\"token char string\">'B'</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token number\">9.4</span><span class=\"token punctuation\">,</span><span class=\"token number\">33.2</span><span class=\"token punctuation\">,</span><span class=\"token number\">96.2</span><span class=\"token punctuation\">,</span><span class=\"token number\">11.2</span><span class=\"token punctuation\">,</span><span class=\"token number\">23.25</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!!</span> <span class=\"token number\">1</span>  \n<span class=\"token number\">33.2</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>但你若是试图在一个只含有4个元素的List中取它的第6个元素，就会报错。要小心！</p>\n<p>List同样也可以用来装List，甚至是List的List的List：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token keyword\">let</span> <span class=\"token hvariable\">b</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token hvariable\">b</span>  \n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token hvariable\">b</span> <span class=\"token operator\">++</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>  \n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span><span class=\"token hvariable\">b</span>  \n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token hvariable\">b</span> <span class=\"token operator\">!!</span> <span class=\"token number\">2</span>  \n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>List中的List可以是不同长度，但必须得是相同的类型。如不可以在List中混合放置字符和数组相同，混合放置数值和字符的List也是同样不可以的。当List内装有可比较的元素时，使用 > 和 >=可以比较List的大小。它会先比较第一个元素，若它们的值相等，则比较下一个，以此类推。</p>\n<p>{{\nghci> [3,2,1] > [2,1,0]  \nTrue  \nghci> [3,2,1] > [2,10,100]  \nTrue  \nghci> [3,4,2] > [3,4]  \nTrue  \nghci> [3,4,2] > [2,4]  \nTrue  \nghci> [3,4,2] == [3,4,2]  \nTrue \n}}</p>\n<p>还可以对List做啥？如下是几个常用的函数:</p>\n<p><strong>head</strong>返回一个List的头部，也就是List的首个元素。</p>\n<p>{{\nghci> head [5,4,3,2,1] \n5\n}}</p>\n<p><strong>tail</strong>返回一个List的尾部，也就是List除去头部之后的部分。</p>\n<p>{{\nghci> tail [5,4,3,2,1]  \n[4,3,2,1]  \n}}</p>\n<p><strong>last</strong>返回一个List的最后一个元素。</p>\n<p>{{\nghci> last [5,4,3,2,1]  \n1  \n}}</p>\n<p><strong>init</strong>返回一个List除去最后一个元素的部分。</p>\n<p>{{\nghci> init [5,4,3,2,1]  \n[5,4,3,2]  \n}}</p>\n<p>如果我们把List想象为一头怪兽，那这就是它的样子：</p>\n<p>[img/listmonster.png]</p>\n<p>试一下，若是取一个空List的head又会怎样？</p>\n<p>{{\nghci> head []  \n*** Exception: Prelude.head: empty list \n}}</p>\n<p>omg，它翻脸了！怪兽压根就不存在，head又从何而来？在使用head，tail，last和init时要小心别用到空的List上，这个错误不会在编译时被捕获。所以说做些工作以防止从空List中取值会是个好的做法。</p>\n<p><strong>length</strong>返回一个List的长度。</p>\n<p>{{\nghci> length [5,4,3,2,1]  \n5 \n}}</p>\n<p><strong>null</strong>检查一个List是否为空。如果是，则返回True，否则返回False。应当避免使用xs==[]之类的语句来判断List是否为空，使用null会更好。</p>\n<p>{{\nghci> null [1,2,3]  \nFalse  \nghci> null []  \nTrue \n}}</p>\n<p><strong>reverse</strong>将一个List反转</p>\n<p>{{\nghci> reverse [5,4,3,2,1]  \n[1,2,3,4,5] \n}}</p>\n<p><strong>take</strong>返回一个List的前几个元素，看：</p>\n<p>{{\nghci> take 3 [5,4,3,2,1]  \n[5,4,3]  \nghci> take 1 [3,9,3]  \n[3]  \nghci> take 5 [1,2]  \n[1,2]  \nghci> take 0 [6,6,6] \n[] \n}}</p>\n<p>如上，若是试图取超过List长度的元素个数，只能得到原List。若take 0个元素，则会得到一个空List！drop与take的用法大体相同，它会删除一个List中的前几个元素。</p>\n<p>{{\nghci> drop 3 [8,4,2,1,5,6]  \n[1,5,6]  \nghci> drop 0 [1,2,3,4]  \n[1,2,3,4]  \nghci> drop 100 [1,2,3,4]  \n[]  \n}}</p>\n<p><strong>maximum</strong>返回一个List中最大的那个元素。<strong>minimum</strong>返回最小的。</p>\n<p>{{\nghci> minimum [8,4,2,1,5,6]  \n1  \nghci> maximum [1,9,2,3,4]  \n9  \n}}</p>\n<p><strong>sum</strong>返回一个List中所有元素的和。<strong>product</strong>返回一个List中所有元素的积。</p>\n<p>{{\nghci> sum [5,2,1,6,3,2,5,7]  \n31  \nghci> product [6,2,1,2]  \n24  \nghci> product [1,2,5,6,7,9,2,0]  \n0  \n}}</p>\n<p><strong>elem</strong>判断一个元素是否在包含于一个List，通常以中缀函数的形式调用它。</p>\n<p>{{\nghci> 4 <code class=\"language-text\">elem</code> [3,4,5,6]  \nTrue  \nghci> 10 <code class=\"language-text\">elem</code> [3,4,5,6]  \nFalse \n}}</p>\n<p>这就是几个基本的List操作函数，我们会在往后的一节中了解更多的函数。</p>\n<h2>德州区间</h2>\n<p>[$img/cowboy.png]</p>\n<p>该怎样得到一个包含1到20之间所有数的List呢? 我们完全可以用手把它全打出来，但显而易见，这并不是完美人士的方案，他们都用区间（Range）。区间是构造List方法之一，而其中的值必须是可枚举的，像1、2、3、4...字符同样也可以枚举，字母表就是A..Z所有字符的枚举。然而人名就不可以枚举了，\"john\"后面是谁？我不知道。</p>\n<p>要得到包含1到20中所有自然数的List，只要<code class=\"language-text\">[1..20]</code>即可，这与用手写 <code class=\"language-text\">[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]</code>是完全等价的。其实用手写一两个还不是什么大事，但若是手写一个非常长的List那就一定是笨得可以了。</p>\n<p>{{\nghci> [1..20]  \n[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]  \nghci> ['a'..'z']  \n\"abcdefghijklmnopqrstuvwxyz\"  \nghci> ['K'..'Z']  \n\"KLMNOPQRSTUVWXYZ\"\n}}</p>\n<p>区间很cool，允许你申明一个步长。要得到1到20间所有的偶数或者3的倍数该怎样？</p>\n<p>{{\nghci> [2,4..20]  \n[2,4,6,8,10,12,14,16,18,20]  \nghci> [3,6..20]  \n[3,6,9,12,15,18]  \n}}</p>\n<p>仅需用逗号将前两个元素隔开，再标上上限即可。尽管区间很聪明，但它恐怕还满足不了一些人对它的期许。你就不能通过<code class=\"language-text\">[1,2,4..100]</code>这样的语句来获得所有2的幂。一方面是因为步长只能标明一次，另一方面就是仅凭前几项，数组的后项是不能确定的。要得到20到1的List，<code class=\"language-text\">[20..1]</code>是不可以的。必须得<code class=\"language-text\">[20,19..1]</code>。在区间中使用浮点数要格外小心！出于定义的原因，浮点数并不精确。若是使用浮点数的话，你就会得到如下的糟糕结果</p>\n<p>{{\nghci> [0.1, 0.3 .. 1]  \n[0.1,0.3,0.5,0.7,0.8999999999999999,1.0999999999999999] \n}}</p>\n<p>我的建议就是避免在区间中使用浮点数。</p>\n<p>你也可以不标明区间的上限，从而得到一个无限长度的List。在后面我们会讲解关于无限List的更多细节。取前24个13的倍数该怎样？恩，你完全可以<code class=\"language-text\">[13,26..24*13]</code>，但有更好的方法： <code class=\"language-text\">take 24 [13,26..]</code>。</p>\n<p>由于Haskell是惰性的，它不会对无限长度的List求值，否则会没完没了的。它会等着，看你会从它那儿取多少。在这里它见你只要24个元素，便欣然交差。如下是几个生成无限List的函数cycle接受一个List做参数并返回一个无限List。如果你想看一下它的所有运算结果，它就会运行个没完没了了，所以应该在某处划好范围。</p>\n<p>{{\nghci> take 10 (cycle [1,2,3])  \n[1,2,3,1,2,3,1,2,3,1]  \nghci> take 12 (cycle \"LOL \")  \n\"LOL LOL LOL \"  \n}}</p>\n<p><strong>repeat</strong>接受一个值作参数，并返回一个仅包含该值的无限List。这与用cycle处理单元素List差不多。</p>\n<p>{{\nghci> take 10 (repeat 5)  \n[5,5,5,5,5,5,5,5,5,5] \n}}</p>\n<p>其实，你若只是想得到包含相同元素的List，使用replicate会更简单，如<code class=\"language-text\">replicate 3 10</code>，得<code class=\"language-text\">[10,10,10]</code>。</p>\n<h2>我是List Comprehension</h2>\n<p>[$img/kermit.png]</p>\n<p>学过数学的你对集合的comprehension（Set Comprehension）概念一定不会陌生。通过它，可以从既有的集合中按照规则产生一个新集合。前十个偶数的set comprehension可以表示为[img/setnotation.png]，竖线左端的部分是输出函数，x是变量，N是输入集合。在Haskell下，我们可以通过类似<code class=\"language-text\">take 10 [2,4..]</code>的代码来实现。但若是把简单的乘2改成更复杂的函数操作该怎么办呢？用list comprehension，它与set comprehension十分的相似，用它取前十个偶数轻而易举。这个list comprehension可以表示为：</p>\n<p>{{\nghci> [x*2 | x &#x3C;- [1..10]]  \n[2,4,6,8,10,12,14,16,18,20]\n}}</p>\n<p>如你所见，结果正确。给这个comprehension再添个限制条件（predicate），它与前面的条件由一个逗号分隔。在这里，我们要求只取乘以2后大于等于12的元素。</p>\n<p>{{\nghci> [x<em>2 | x &#x3C;- [1..10], x</em>2 >= 12]  \n[12,14,16,18,20] \n}}</p>\n<p>cool，灵了。若是取50到100间所有除7的余数为3的元素该怎么办？简单：</p>\n<p>{{\nghci> [ x | x &#x3C;- [50..100], x <code class=\"language-text\">mod</code> 7 == 3]  \n[52,59,66,73,80,87,94]  \n}}</p>\n<p>成功！从一个List中筛选出符合特定限制条件的操作也可以称为过滤（flitering）。即取一组数并且按照一定的限制条件过滤它们。再举个例子吧，假如我们想要一个comprehension，它能够使list中所有大于10的奇数变为“BANG”，小于10的奇数变为“BOOM”，其他则统统扔掉。方便重用起见，我们将这个comprehension置于一个函数之中。</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">boomBangs</span> <span class=\"token hvariable\">xs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token keyword\">if</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> <span class=\"token keyword\">then</span> <span class=\"token string\">\"BOOM!\"</span> <span class=\"token keyword\">else</span> <span class=\"token string\">\"BANG!\"</span> <span class=\"token operator\">|</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">&lt;-</span> <span class=\"token hvariable\">xs</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">odd</span> <span class=\"token hvariable\">x</span><span class=\"token punctuation\">]</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>这个comprehension的最后部分就是限制条件，使用odd函数判断是否为奇数：返回True，就是奇数，该List中的元素才被包含。</p>\n<p>{{\nghci> boomBangs [7..13]  \n[\"BOOM!\",\"BOOM!\",\"BANG!\",\"BANG!\"]  \n}}</p>\n<p>也可以加多个限制条件。若要达到10到20间所有不等于13，15或19的数，可以这样：</p>\n<p>{{\nghci> [ x | x &#x3C;- [10..20], x /= 13, x /= 15, x /= 19]  \n[10,11,12,14,16,17,18,20] \n}}</p>\n<p>除了多个限制条件之外，从多个List中取元素也是可以的。这样的话comprehension会把所有的元素组合交付给我们的输出函数。在不过滤的前提下，取自两个长度为4的集合的comprehension会产生一个长度为16的List。假设有两个List，<code class=\"language-text\">[2,5,10]</code>和<code class=\"language-text\">[8,10,11]</code>， 要取它们所有组合的积，可以这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span> <span class=\"token hvariable\">x</span><span class=\"token operator\">*</span><span class=\"token hvariable\">y</span> <span class=\"token operator\">|</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">&lt;-</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">y</span> <span class=\"token operator\">&lt;-</span> <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>  \n<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">55</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">110</span><span class=\"token punctuation\">]</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>意料之中，得到的新List长度为9。若只取乘积为50的结果该如何？</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span> <span class=\"token hvariable\">x</span><span class=\"token operator\">*</span><span class=\"token hvariable\">y</span> <span class=\"token operator\">|</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">&lt;-</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">y</span> <span class=\"token operator\">&lt;-</span> <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">x</span><span class=\"token operator\">*</span><span class=\"token hvariable\">y</span> <span class=\"token operator\">></span> <span class=\"token number\">50</span><span class=\"token punctuation\">]</span>  \n<span class=\"token punctuation\">[</span><span class=\"token number\">55</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">110</span><span class=\"token punctuation\">]</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>取个包含一组名词和形容词的List comprehension吧，写诗的话也许用得着。</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token keyword\">let</span> <span class=\"token hvariable\">nouns</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hobo\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"frog\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"pope\"</span><span class=\"token punctuation\">]</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token keyword\">let</span> <span class=\"token hvariable\">adjectives</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"lazy\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"grouchy\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"scheming\"</span><span class=\"token punctuation\">]</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">adjective</span> <span class=\"token operator\">++</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">++</span> <span class=\"token hvariable\">noun</span> <span class=\"token operator\">|</span> <span class=\"token hvariable\">adjective</span> <span class=\"token operator\">&lt;-</span> <span class=\"token hvariable\">adjectives</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">noun</span> <span class=\"token operator\">&lt;-</span> <span class=\"token hvariable\">nouns</span><span class=\"token punctuation\">]</span>  \n<span class=\"token punctuation\">[</span><span class=\"token string\">\"lazy hobo\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"lazy frog\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"lazy pope\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"grouchy hobo\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"grouchy frog\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"grouchy pope\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"scheming hobo\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"scheming frog\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"scheming pope\"</span><span class=\"token punctuation\">]</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>明白！让我们编写自己的length函数吧！就叫做length'!</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token builtin\">length</span>' <span class=\"token hvariable\">xs</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token hvariable\">_</span> <span class=\"token operator\">&lt;-</span> <span class=\"token hvariable\">xs</span><span class=\"token punctuation\">]</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">_</code>表示我们并不关心从List中取什么值，与其弄个永远不用的变量，不如直接一个<code class=\"language-text\">_</code>。这个函数将一个List中所有元素置换为1，并且使其相加求和。得到的结果便是我们的List长度。友情提示：字符串也是List，完全可以使用list comprehension来处理字符串。如下是个除去字符串中所有非大写字母的函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">removeNonUppercase</span> <span class=\"token hvariable\">st</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token hvariable\">c</span> <span class=\"token operator\">|</span> <span class=\"token hvariable\">c</span> <span class=\"token operator\">&lt;-</span> <span class=\"token hvariable\">st</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">c</span> `<span class=\"token builtin\">elem</span>` <span class=\"token punctuation\">[</span><span class=\"token char string\">'A'</span><span class=\"token operator\">..</span><span class=\"token char string\">'Z'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>测试一下：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token hvariable\">removeNonUppercase</span> <span class=\"token string\">\"Hahaha! Ahahaha!\"</span>  \n<span class=\"token string\">\"HA\"</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token hvariable\">removeNonUppercase</span> <span class=\"token string\">\"IdontLIKEFROGS\"</span>  \n<span class=\"token string\">\"ILIKEFROGS\"</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>在这里，限制条件做了所有的工作。它说：只有在<code class=\"language-text\">['A'..'Z']</code>之间的字符才可以被包含。</p>\n<p>若操作含有List的List，使用嵌套的List comprehension也是可以的。假设有个包含许多数值的List的List，让我们在不拆开它的前提下除去其中的所有奇数：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token keyword\">let</span> <span class=\"token hvariable\">xxs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">[</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">|</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">&lt;-</span> <span class=\"token hvariable\">xs</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">even</span> <span class=\"token hvariable\">x</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token hvariable\">xs</span> <span class=\"token operator\">&lt;-</span> <span class=\"token hvariable\">xxs</span><span class=\"token punctuation\">]</span>  \n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>将List Comprehension分成多行也是可以的。若非在GHCI之下，还是将List Comprehension分成多行好，尤其是需要嵌套的时候。</p>\n<h2>Tuple</h2>\n<p>[$img/tuple.png]</p>\n<p>从某种意义上讲，Tuple(元组)很像List--都是将多个值存入一个个体的容器。但它们却有着本质的不同，一组数字的List就是一组数字，它们的类型相同，且不关心其中包含元素的数量。而Tuple则要求你对需要组合的数据的数目非常的明确，它的类型取决于其中项的数目与其各自的类型。Tuple中的项由括号括起，并由逗号隔开。</p>\n<p>另外的不同之处就是Tuple中的项不必为同一类型，在Tuple里可以存入多类型项的组合。</p>\n<p>动脑筋，在Haskell中表示二维向量该如何？使用List是一种方法，它倒也工作良好。若要将一组向量置于一个List中来表示平面图形又该怎样？我们可以写类似<code class=\"language-text\">[[1,2],[8,11],[4,5]]</code>的代码来实现。但问题在于，<code class=\"language-text\">[[1,2],[8,11,5],[4,5]]</code>也是同样合法的，因为其中元素的类型都相同。尽管这样并不靠谱，但编译时并不会报错。然而一个长度为2的Tuple（也可以称作序对，Pair），是一个独立的类型，这便意味着一个包含一组序对的List不能再加入一个三元组，所以说把原先的方括号改为圆括号使用Tuple会更好:<code class=\"language-text\">[(1,2),(8,11),(4,5)]</code>。若试图表示这样的图形：<code class=\"language-text\">[(1,2),(8,11,5),(4,5)]</code>，就会报出以下的错误：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token constant\">Couldn</span>'<span class=\"token hvariable\">t</span> <span class=\"token hvariable\">match</span> <span class=\"token hvariable\">expected</span> <span class=\"token keyword\">type</span> `<span class=\"token punctuation\">(</span><span class=\"token hvariable\">t</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">t1</span><span class=\"token punctuation\">)</span>'\n<span class=\"token hvariable\">against</span> <span class=\"token hvariable\">inferred</span> <span class=\"token keyword\">type</span> `<span class=\"token punctuation\">(</span><span class=\"token hvariable\">t2</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">t3</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">t4</span><span class=\"token punctuation\">)</span>'\n<span class=\"token constant\">In</span> <span class=\"token hvariable\">the</span> <span class=\"token hvariable\">expression</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token constant\">In</span> <span class=\"token hvariable\">the</span> <span class=\"token hvariable\">expression</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token constant\">In</span> <span class=\"token hvariable\">the</span> <span class=\"token hvariable\">definition</span> <span class=\"token keyword\">of</span> `<span class=\"token hvariable\">it</span>'<span class=\"token operator\">:</span> <span class=\"token hvariable\">it</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>这告诉我们说程序在试图将序对和三元组置于同一List中，而这是不允许的。同样<code class=\"language-text\">[(1,2),(\"one\",2)]</code>这样的List也不行，因为 其中的第一个Tuple是一对数字，而第二个Tuple却成了一个字符串和一个数字。Tuple可以用来储存多个数据，如，我们要表示一个人的名字与年 龄，可以使用这样的Tuple:<code class=\"language-text\">(\"Christopher\", \"Walken\", 55)</code>。从这个例子里也可以看出，Tuple中也可以存储List。</p>\n<p>使用Tuple前应当事先明确一条数据中应该由多少个项。每个不同长度的Tuple都是独立的类型，所以你就不可以写个函数来给它追加元素。而唯一能做的，就是通过函数来给一个List追加序对，三元组或是四元组等内容。</p>\n<p>可以有单元素的List，但Tuple不行。想想看，单元素的Tuple本身就只有一个值，对我们又有啥意义？不靠谱。</p>\n<p>同List相同，只要其中的项是可比较的，Tuple也可以比较大小，只是你不可以像比较不同长度的List那样比较不同长度的Tuple。如下是两个有用的序对操作函数：</p>\n<p><strong>fst</strong>返回一个序对的首项。</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token builtin\">fst</span> <span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">8</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token builtin\">fst</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Wow\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">False</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">\"Wow\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>snd</strong>返回序对的尾项。</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token builtin\">snd</span> <span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">11</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token builtin\">snd</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Wow\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">False</span><span class=\"token punctuation\">)</span>\n<span class=\"token constant\">False</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>这两个函数仅对序对有效，而不能应用于三元组，四元组和五元组之上。稍后，我们将过一遍从Tuple中取数据的所有方式。</p>\n</blockquote>\n<p>有个函数很cool，它就是zip。它可以用来生成一组序对(Pair)的List。它取两个List，然后将它们交叉配对，形成一组序对的List。它很简单，却很实用，尤其是你需要组合或是遍历两个List时。如下是个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token builtin\">zip</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token builtin\">zip</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span> <span class=\"token operator\">..</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"four\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"five\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"three\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"four\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"five\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>它把元素配对并返回一个新的List。第一个元素配第一个，第二个元素配第二个..以此类推。注意，由于序对中可以含有不同的类型，zip函数可能会将不同类型的序对组合在一起。若是两个不同长度的List会怎么样？</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token builtin\">zip</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"im\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"turtle\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"im\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"turtle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>较长的那个会在中间断开，去匹配较短的那个。由于Haskell是惰性的，使用zip同时处理有限和无限的List也是可以的：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token builtin\">zip</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cherry\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mango\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"cherry\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"mango\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>接下来考虑一个同时应用到List和Tuple的问题：如何取得所有三边长度皆为整数且小于等于10，周长为24的直角三角形？首先，把所有三边长度小于等于10的三角形都列出来：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token keyword\">let</span> <span class=\"token hvariable\">triangles</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">,</span><span class=\"token hvariable\">b</span><span class=\"token punctuation\">,</span><span class=\"token hvariable\">c</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token hvariable\">c</span> <span class=\"token operator\">&lt;-</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">b</span> <span class=\"token operator\">&lt;-</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">&lt;-</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>刚才我们是从三个List中取值，并且通过输出函数将其组合为一个三元组。只要在ghci下边调用triangle，你就会得到所有三边都小于等于 10的三角形。我们接下来给它添加一个限制条件，令其必须为直角三角形。同时也考虑上b边要短于斜边，a边要短于b边情况：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token keyword\">let</span> <span class=\"token hvariable\">rightTriangles</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">,</span><span class=\"token hvariable\">b</span><span class=\"token punctuation\">,</span><span class=\"token hvariable\">c</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token hvariable\">c</span> <span class=\"token operator\">&lt;-</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">b</span> <span class=\"token operator\">&lt;-</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token hvariable\">c</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">&lt;-</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token hvariable\">b</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">a</span><span class=\"token operator\">^</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">b</span><span class=\"token operator\">^</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token hvariable\">c</span><span class=\"token operator\">^</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>已经差不多了。最后修改函数，告诉它只要周长为24的三角形。</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token keyword\">let</span> <span class=\"token hvariable\">rightTriangles</span>' <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">,</span><span class=\"token hvariable\">b</span><span class=\"token punctuation\">,</span><span class=\"token hvariable\">c</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token hvariable\">c</span> <span class=\"token operator\">&lt;-</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">b</span> <span class=\"token operator\">&lt;-</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token hvariable\">c</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">&lt;-</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token hvariable\">b</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">a</span><span class=\"token operator\">^</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">b</span><span class=\"token operator\">^</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token hvariable\">c</span><span class=\"token operator\">^</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">a</span><span class=\"token operator\">+</span><span class=\"token hvariable\">b</span><span class=\"token operator\">+</span><span class=\"token hvariable\">c</span> <span class=\"token operator\">==</span> <span class=\"token number\">24</span><span class=\"token punctuation\">]</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token hvariable\">rightTriangles</span>'\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>得到正确结果！这便是函数式编程的一般思路：先取一个初始的集合并将其变形，执行过滤条件，最终取得正确的结果。</p>","excerpt":"ready-begin 各就各位，预备！ [$img/startingout.png] 好的，出发！如果你属于那种从不看说明书的不良人士，我推荐你还是回头看一下简介的最后一节。那里面讲了这个教程中你需要用到的工具及基本用法。我们首先要做的就是进入ghc的交互模式，接着就可以调几个函数小体验一把Haskell了。打开控制台，输入ghci，可以看到如下欢迎信息： 恭喜，你已经进入了ghci…","fields":{"slug":"/blog/2021/08/02/02-starting-out.html","date":"August 01, 2021"},"frontmatter":{"title":"02-ready begin","img":"./img/2016-08-21.jpeg","author":["Sylvenas"],"categories":"Haskell"}}},"pageContext":{"slug":"/blog/2021/08/02/02-starting-out.html"}},"staticQueryHashes":[]}