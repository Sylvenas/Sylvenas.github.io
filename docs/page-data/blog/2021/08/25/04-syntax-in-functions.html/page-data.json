{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/2021/08/25/04-syntax-in-functions.html","result":{"data":{"markdownRemark":{"html":"<h1>函数的语法</h1>\n<h2>模式匹配</h2>\n<p>[$img/pattern.png]</p>\n<p>本章讲的就是haskell那套酷酷的语法结构，先从模式匹配开始。模式匹配通过检查数据的特定结构来检查其是否匹配，并按模式从中取得数据。</p>\n<p>在定义函数时，你可以为不同的模式分别定义函数体，这就让代码更加简洁易读。你可以匹配一切数据类型---数字，字符，List，元组，等等。我们弄个简单函数，让它检查我们传给它的数字是不是7。</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">lucky</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Integral</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>  \n<span class=\"token hvariable\">lucky</span> <span class=\"token number\">7</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"LUCKY NUMBER SEVEN!\"</span>  \n<span class=\"token hvariable\">lucky</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Sorry, you're out of luck, pal!\"</span>   \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>在调用<code class=\"language-text\">lucky</code>时，模式会从上至下进行检查，一旦有匹配，那对应的函数体就被应用了。这个模式中的唯一匹配是参数为7，如果不是7，就转到下一个模式，它匹配一切数值并将其绑定为x。这个函数完全可以使用if实现，不过我们若要个分辨1到5中的数字，而无视其它数的函数该怎么办？要是没有模式匹配的话，那可得好大一棵if-else树了！</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">sayMe</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Integral</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>  \n<span class=\"token hvariable\">sayMe</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"One!\"</span>  \n<span class=\"token hvariable\">sayMe</span> <span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Two!\"</span>  \n<span class=\"token hvariable\">sayMe</span> <span class=\"token number\">3</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Three!\"</span>  \n<span class=\"token hvariable\">sayMe</span> <span class=\"token number\">4</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Four!\"</span>  \n<span class=\"token hvariable\">sayMe</span> <span class=\"token number\">5</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Five!\"</span>  \n<span class=\"token hvariable\">sayMe</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Not between 1 and 5\"</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>注意下，如果我们把最后匹配一切的那个模式挪到最前，它的结果就全都是<code class=\"language-text\">\"Not between 1 and 5\"  </code>了。因为它自己匹配了一切数字，不给后面的模式留机会。</p>\n<p>记得前面实现的那个阶乘函数么？当时是把<code class=\"language-text\">n</code>的阶乘定义成了<code class=\"language-text\">product [1..n]</code>。也可以写出像数学那样的递归实现，先说明0的阶乘是1，再说明每个正整数的阶乘都是这个数与它前驱(predecessor)对应的阶乘的积。如下便是翻译到haskell的样子：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">factorial</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Integral</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">a</span>  \n<span class=\"token hvariable\">factorial</span> <span class=\"token number\">0</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>  \n<span class=\"token hvariable\">factorial</span> <span class=\"token hvariable\">n</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">n</span> <span class=\"token operator\">*</span> <span class=\"token hvariable\">factorial</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>这就是我们定义的第一个递归函数。递归在haskell中十分重要，我们会在后面深入理解。如果拿一个数（如3）调用factorial函数，这就是接下来的计算步骤：先计算<code class=\"language-text\">3*factorial 2</code>，<code class=\"language-text\">factorial 2</code>等于<code class=\"language-text\">2*factorial 1</code>，也就是<code class=\"language-text\">3*(2*(factorial 1))</code>。<code class=\"language-text\">factorial 1</code>等于<code class=\"language-text\">1*factorial 0</code>，好，得<code class=\"language-text\">3*(2*(1*factorial 0))</code>，递归在这里到头了，嗯---我们在万能匹配前面有定义，0的阶乘是1.于是最终的结果等于<code class=\"language-text\">3*(2*(1*1))</code>。若是把第二个模式放在前面，它就会捕获包括0在内的一切数字，这一来我们的计算就永远都不会停止了。这便是为什么说模式的顺序是如此重要：它总是优先匹配最符合的那个，最后才是那个万能的。</p>\n<p>模式匹配也会失败。假如这个函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">charName</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Char</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>  \n<span class=\"token hvariable\">charName</span> <span class=\"token char string\">'a'</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Albert\"</span>  \n<span class=\"token hvariable\">charName</span> <span class=\"token char string\">'b'</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Broseph\"</span>  \n<span class=\"token hvariable\">charName</span> <span class=\"token char string\">'c'</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Cecil\"</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>拿个它没有考虑到的字符去调用它，你就会看到这个：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token hvariable\">charName</span> <span class=\"token char string\">'a'</span>  \n<span class=\"token string\">\"Albert\"</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token hvariable\">charName</span> <span class=\"token char string\">'b'</span>  \n<span class=\"token string\">\"Broseph\"</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token hvariable\">charName</span> <span class=\"token char string\">'h'</span>  \n\"<span class=\"token operator\">***</span> <span class=\"token constant\">Exception</span><span class=\"token operator\">:</span> <span class=\"token hvariable\">tut</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">hs</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token number\">53</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token number\">55</span><span class=\"token punctuation\">,</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">Non</span><span class=\"token operator\">-</span><span class=\"token hvariable\">exhaustive</span> <span class=\"token hvariable\">patterns</span> <span class=\"token keyword\">in</span> <span class=\"token hvariable\">function</span> <span class=\"token hvariable\">charName</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>它告诉我们说，这个模式不够全面。因此，在定义模式时，一定要留一个万能匹配的模式，这样我们的程序就不会为了不可预料的输入而崩溃了。</p>\n<p>对Tuple同样可以使用模式匹配。写个函数，将二维空间中的向量相加该如何？将它们的x项和y项分别相加就是了。如果不了解模式匹配，我们很可能会写出这样的代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">addVectors</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Num</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span>  \n<span class=\"token hvariable\">addVectors</span> <span class=\"token hvariable\">a</span> <span class=\"token hvariable\">b</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">fst</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">fst</span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">snd</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">snd</span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>嗯，可以运行。但有更好的方法，上模式匹配：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">addVectors</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Num</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span>  \n<span class=\"token hvariable\">addVectors</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">x1</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">y1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">x2</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">y2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">x1</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">x2</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">y1</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">y2</span><span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>there we go！好多了！注意，它已经是个万能的匹配了。两个addVector的类型都是<code class=\"language-text\">addVectors:: (Num a) => (a,a) -> (a,a) -> (a,a)</code>，我们就能够保证，两个参数都是序对(Pair)了。</p>\n<p>fst和snd可以从序对中取出元素。三元组(Tripple)呢？嗯，没现成的函数，得自己动手：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">first</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">c</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">a</span>  \n<span class=\"token hvariable\">first</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">x</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">_</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">x</span>  \n\n<span class=\"token hvariable\">second</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">c</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">b</span>  \n<span class=\"token hvariable\">second</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">_</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">y</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">y</span>  \n \n<span class=\"token hvariable\">third</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">c</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">c</span>  \n<span class=\"token hvariable\">third</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">_</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">_</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">z</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">z</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里的_就和List Comprehension中一样。表示我们不关心这部分的具体内容。</p>\n<p>说到List Comprehension，我想起来在List Comprehension中也能用模式匹配：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token keyword\">let</span> <span class=\"token hvariable\">xs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">a</span><span class=\"token operator\">+</span><span class=\"token hvariable\">b</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">,</span><span class=\"token hvariable\">b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span> <span class=\"token hvariable\">xs</span><span class=\"token punctuation\">]</span>  \n<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>   \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>一旦模式匹配失败，它就简单挪到下个元素。</p>\n<p>对list本身也可以使用模式匹配。你可以用<code class=\"language-text\">[]</code>或<code class=\"language-text\">:</code>来匹配它。因为<code class=\"language-text\">[1,2,3]</code>本质就是<code class=\"language-text\">1:2:3:[]</code>的语法糖。你也可以使用前一种形式，像<code class=\"language-text\">x:xs</code>这样的模式可以将list的头部绑定为x，尾部绑定为xs。如果这list只有一个元素，那么xs就是一个空list。</p>\n<blockquote>\n<p>x:xs这模式的应用非常广泛，尤其是递归函数。不过它只能匹配长度大于等于1的list。</p>\n</blockquote>\n<p>如果你要把list的前三个元素都绑定到变量中，可以使用类似<code class=\"language-text\">x:y:z:xs</code>这样的形式。它只能匹配长度大于等于3的list。</p>\n<p>我们已经知道了对list做模式匹配的方法，就实现个我们自己的head函数。</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token builtin\">head</span>' <span class=\"token operator\">::</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">a</span>  \n<span class=\"token builtin\">head</span>' <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">error</span> <span class=\"token string\">\"Can't call head on an empty list, dummy!\"</span>  \n<span class=\"token builtin\">head</span>' <span class=\"token punctuation\">(</span><span class=\"token hvariable\">x</span><span class=\"token operator\">:</span><span class=\"token hvariable\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">x</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>看看管不管用：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token builtin\">head</span>' <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>  \n<span class=\"token number\">4</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token builtin\">head</span>' <span class=\"token string\">\"Hello\"</span>  \n<span class=\"token char string\">'H'</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>漂亮！注意下，你若要绑定多个变量（用_也是如此），我们必须用括号将其括起。同时注意下我们用的这个error函数，它可以生成一个运行时错误，用参数中的字符串表示对错误的描述。它会直接导致程序崩溃，因此应谨慎使用。可是对一个空list取head真的不靠谱哇。</p>\n<p>弄个简单函数，让它用非标准的英语给我们展示list的前几项。</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">tell</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Show</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>  \n<span class=\"token hvariable\">tell</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"The list is empty\"</span>  \n<span class=\"token hvariable\">tell</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">x</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"The list has one element: \"</span> <span class=\"token operator\">++</span> <span class=\"token builtin\">show</span> <span class=\"token hvariable\">x</span>  \n<span class=\"token hvariable\">tell</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">x</span><span class=\"token operator\">:</span><span class=\"token hvariable\">y</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"The list has two elements: \"</span> <span class=\"token operator\">++</span> <span class=\"token builtin\">show</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">++</span> <span class=\"token string\">\" and \"</span> <span class=\"token operator\">++</span> <span class=\"token builtin\">show</span> <span class=\"token hvariable\">y</span>  \n<span class=\"token hvariable\">tell</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">x</span><span class=\"token operator\">:</span><span class=\"token hvariable\">y</span><span class=\"token operator\">:</span><span class=\"token hvariable\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"This list is long. The first two elements are: \"</span> <span class=\"token operator\">++</span> <span class=\"token builtin\">show</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">++</span> <span class=\"token string\">\" and \"</span> <span class=\"token operator\">++</span> <span class=\"token builtin\">show</span> <span class=\"token hvariable\">y</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>这个函数顾及了空list，单元素list，双元素list以及较长的list，所以这个函数很安全。<code class=\"language-text\">(x:[])</code>与<code class=\"language-text\">(x:y:[])</code>也可以写作<code class=\"language-text\">[x]</code>和<code class=\"language-text\">[x,y]</code>（有了语法糖，我们不必多加括号）。不过<code class=\"language-text\">(x:y:_)</code>这样的模式就不行了，因为它匹配的list长度不固定。</p>\n<p>我们曾用List Comprehension实现过自己的length函数，现在用模式匹配和递归重新实现它：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token builtin\">length</span>' <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Num</span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">b</span>  \n<span class=\"token builtin\">length</span>' <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  \n<span class=\"token builtin\">length</span>' <span class=\"token punctuation\">(</span><span class=\"token hvariable\">_</span><span class=\"token operator\">:</span><span class=\"token hvariable\">xs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">length</span>' <span class=\"token hvariable\">xs</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>这与先前写的那个factorial函数很相似。先定义好未知输入的结果---空list，这也叫作边界条件。再在第二个模式中将这List分割为头部和尾部。说，List的长度就是其尾部的长度加1。匹配头部用的_，因为我们并不关心它的值。同时也应明确，我们顾及了List所有可能的模式：第一个模式匹配空list，第二个匹配任意的非空list。</p>\n<p>看下拿<code class=\"language-text\">\"ham\"</code>调用<code class=\"language-text\">length'</code>会怎样。首先它会检查它是否为空List。显然不是，于是进入下一模式。它匹配了第二个模式，把它分割为头部和尾部并无视掉头部的值，得长度就是<code class=\"language-text\">1+length' \"am\"</code>。ok。以此类推，<code class=\"language-text\">\"am\"</code>的<code class=\"language-text\">length</code>就是<code class=\"language-text\">1+length' \"m\"</code>。好，现在我们有了<code class=\"language-text\">1+(1+length' \"m\")</code>。<code class=\"language-text\">length' \"m\"</code>即<code class=\"language-text\">1+length \"\"</code>（也就是<code class=\"language-text\">1+length' []</code>）。根据定义，<code class=\"language-text\">length' []</code>等于<code class=\"language-text\">0</code>。最后得<code class=\"language-text\">1+(1+(1+0))</code>。</p>\n<p>再实现<code class=\"language-text\">sum</code>。我们知道空list的和是0，就把它定义为一个模式。我们也知道一个list的和就是头部加上尾部的和的和。写下来就成了：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token builtin\">sum</span>' <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Num</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">a</span>  \n<span class=\"token builtin\">sum</span>' <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  \n<span class=\"token builtin\">sum</span>' <span class=\"token punctuation\">(</span><span class=\"token hvariable\">x</span><span class=\"token operator\">:</span><span class=\"token hvariable\">xs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">sum</span>' <span class=\"token hvariable\">xs</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>还有个东西叫做as模式，就是将一个名字和@置于模式前，可以在按模式分割什么东西时仍保留对其整体的引用。如这个模式<code class=\"language-text\">xs@(x:y:ys)</code>，它会匹配出与<code class=\"language-text\">x:y:ys</code>对应的东西，同时你也可以方便地通过xs得到整个list，而不必在函数体中重复<code class=\"language-text\">x:y:ys</code>。看下这个quick and dirty的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">capital</span> <span class=\"token operator\">::</span> <span class=\"token constant\">String</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>  \n<span class=\"token hvariable\">capital</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Empty string, whoops!\"</span>  \n<span class=\"token hvariable\">capital</span> <span class=\"token builtin\">all</span><span class=\"token operator\">@</span><span class=\"token punctuation\">(</span><span class=\"token hvariable\">x</span><span class=\"token operator\">:</span><span class=\"token hvariable\">xs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"The first letter of \"</span> <span class=\"token operator\">++</span> <span class=\"token builtin\">all</span> <span class=\"token operator\">++</span> <span class=\"token string\">\" is \"</span> <span class=\"token operator\">++</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">x</span><span class=\"token punctuation\">]</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token hvariable\">capital</span> <span class=\"token string\">\"Dracula\"</span>  \n<span class=\"token string\">\"The first letter of Dracula is D\"</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们使用as模式通常就是为了在较大的模式中保留对整体的引用，从而减少重复性的工作。</p>\n<p>还有——你不可以在模式匹配中使用<code class=\"language-text\">++</code>。若有个模式是<code class=\"language-text\">(xs++ys)</code>，那么这个List该从什么地方分开呢？不靠谱吧。而<code class=\"language-text\">(xs++[x,y,z])</code>或只一个<code class=\"language-text\">(xs++[x])</code>或许还能说的过去，不过出于list的本质，这样写也是不可以的。</p>\n<h2>注意，门卫!</h2>\n<p>模式用来检查一个值是否合适并从中取值，而门卫（guard）则用来检查一个值的某项属性是否为真。咋一听有点像是if语句，实际上也正是如此。不过处理多个条件分支时门卫的可读性要高些，并且与模式匹配契合的很好。</p>\n<p>[$img/guards.png]</p>\n<p>在讲解它的语法前，我们先看一个用到门卫的函数。它会依据你的BMI值（body mass index，身体质量指数）来不同程度地侮辱你。BMI值即为体重除以身高的平方。如果小于18.5，就是太瘦；如果在18.5到25之间，就是正常；25到30之间，超重；如果超过30，肥胖。这就是那个函数（我们目前暂不为您计算bmi，它只是直接取一个bmi值）。</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">bmiTell</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">RealFloat</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>  \n<span class=\"token hvariable\">bmiTell</span> <span class=\"token hvariable\">bmi</span>  \n    <span class=\"token operator\">|</span> <span class=\"token hvariable\">bmi</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">18.5</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"You're underweight, you emo, you!\"</span>  \n    <span class=\"token operator\">|</span> <span class=\"token hvariable\">bmi</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">25.0</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"You're supposedly normal. Pffft, I bet you're ugly!\"</span>  \n    <span class=\"token operator\">|</span> <span class=\"token hvariable\">bmi</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">30.0</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"You're fat! Lose some weight, fatty!\"</span>  \n    <span class=\"token operator\">|</span> <span class=\"token builtin\">otherwise</span>   <span class=\"token operator\">=</span> <span class=\"token string\">\"You're a whale, congratulations!\"</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>门卫由跟在函数名及参数后面的竖线标志，通常他们都是靠右一个缩进排成一列。一个门卫就是一个布尔表达式，如果为真，就使用其对应的函数体。如果为假，就送去见下一个门卫，如之继续。如果我们用24.3调用这个函数，它就会先检查它是否小于等于18.5，显然不是，于是见下一个门卫。24.3小于25.0，因此通过了第二个门卫的检查，就返回第二个字符串。</p>\n<p>在这里则是相当的简洁，不过不难想象这在命令式语言中又会是怎样的一棵if-else树。由于if-else的大树比较杂乱，若是出现问题会很难发现，门卫对此则十分清楚。</p>\n<p>最后的那个门卫往往都是<code class=\"language-text\">otherwise</code>，它的定义就是简单一个<code class=\"language-text\">otherwise = True</code>，捕获一切。这与模式很相像，只是模式检查的是匹配，而它们检查的是布尔表达式 。如果一个函数的所有门卫都没有通过（而且没有提供otherwise作万能匹配），就转入下一模式。这便是门卫与模式契合的地方。如果始终没有找到合适的门卫或模式，就会发生一个错误。</p>\n<p>当然，门卫可以在含有任意数量参数的函数中使用。省得用户在使用这函数之前每次都自己计算bmi。我们修改下这个函数，让它取身高体重为我们计算。</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">bmiTell</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">RealFloat</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>  \n<span class=\"token hvariable\">bmiTell</span> <span class=\"token hvariable\">weight</span> <span class=\"token hvariable\">height</span>  \n    <span class=\"token operator\">|</span> <span class=\"token hvariable\">weight</span> <span class=\"token operator\">/</span> <span class=\"token hvariable\">height</span> <span class=\"token operator\">^</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">18.5</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"You're underweight, you emo, you!\"</span>  \n    <span class=\"token operator\">|</span> <span class=\"token hvariable\">weight</span> <span class=\"token operator\">/</span> <span class=\"token hvariable\">height</span> <span class=\"token operator\">^</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">25.0</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"You're supposedly normal. Pffft, I bet you're ugly!\"</span>  \n    <span class=\"token operator\">|</span> <span class=\"token hvariable\">weight</span> <span class=\"token operator\">/</span> <span class=\"token hvariable\">height</span> <span class=\"token operator\">^</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">30.0</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"You're fat! Lose some weight, fatty!\"</span>  \n    <span class=\"token operator\">|</span> <span class=\"token builtin\">otherwise</span>                 <span class=\"token operator\">=</span> <span class=\"token string\">\"You're a whale, congratulations!\"</span>    \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>看看我胖不胖......</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token hvariable\">bmiTell</span> <span class=\"token number\">85</span> <span class=\"token number\">1.90</span>  \n<span class=\"token string\">\"You're supposedly normal. Pffft, I bet you're ugly!\"</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Yay!我不胖！不过haskell依然说我很猥琐...什么道理...</p>\n<p>注意下，函数名和参数的后面并没有=。许多新人容易搞出语法错误，就是因为在后面加上了=。</p>\n<p>另一个简单的例子：实现个自己的<code class=\"language-text\">max</code>函数。应该还记得，它是取两个可比较的值，返回较大的那个。</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token builtin\">max</span>' <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Ord</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">a</span>  \n<span class=\"token builtin\">max</span>' <span class=\"token hvariable\">a</span> <span class=\"token hvariable\">b</span>   \n    <span class=\"token operator\">|</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">></span> <span class=\"token hvariable\">b</span>     <span class=\"token operator\">=</span> <span class=\"token hvariable\">a</span>  \n    <span class=\"token operator\">|</span> <span class=\"token builtin\">otherwise</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">b</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>门卫也可以堆一行里面。这样的可读性会差些，因而是不被鼓励的。即使是较短的函数也是如此，仅仅出于演示，我们可以这样重写max'：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token builtin\">max</span>' <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Ord</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">a</span>  \n<span class=\"token builtin\">max</span>' <span class=\"token hvariable\">a</span> <span class=\"token hvariable\">b</span> <span class=\"token operator\">|</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">></span> <span class=\"token hvariable\">b</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">otherwise</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">b</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ugh！一点都不好读！继续进发，用门卫实现我们自己的compare函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">myCompare</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Ord</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Ordering</span>  \n<span class=\"token hvariable\">a</span> <span class=\"token operator\">`myCompare`</span> <span class=\"token hvariable\">b</span>  \n    <span class=\"token operator\">|</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">></span> <span class=\"token hvariable\">b</span>     <span class=\"token operator\">=</span> <span class=\"token constant\">GT</span>  \n    <span class=\"token operator\">|</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">==</span> <span class=\"token hvariable\">b</span>    <span class=\"token operator\">=</span> <span class=\"token constant\">EQ</span>  \n    <span class=\"token operator\">|</span> <span class=\"token builtin\">otherwise</span> <span class=\"token operator\">=</span> <span class=\"token constant\">LT</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token number\">3</span> <span class=\"token operator\">`myCompare`</span> <span class=\"token number\">2</span>  \n<span class=\"token constant\">GT</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>通过反单引号，我们不仅可以以中缀形式调用函数，也可以在定义函数的时候使用它。有时这样会更易读。</p>\n</blockquote>\n<h2>Where?!</h2>\n<p>前一节中我们写了这个bmi计算函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">bmiTell</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">RealFloat</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>  \n<span class=\"token hvariable\">bmiTell</span> <span class=\"token hvariable\">weight</span> <span class=\"token hvariable\">height</span>  \n    <span class=\"token operator\">|</span> <span class=\"token hvariable\">weight</span> <span class=\"token operator\">/</span> <span class=\"token hvariable\">height</span> <span class=\"token operator\">^</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">18.5</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"You're underweight, you emo, you!\"</span>  \n    <span class=\"token operator\">|</span> <span class=\"token hvariable\">weight</span> <span class=\"token operator\">/</span> <span class=\"token hvariable\">height</span> <span class=\"token operator\">^</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">25.0</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"You're supposedly normal. Pffft, I bet you're ugly!\"</span>  \n    <span class=\"token operator\">|</span> <span class=\"token hvariable\">weight</span> <span class=\"token operator\">/</span> <span class=\"token hvariable\">height</span> <span class=\"token operator\">^</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">30.0</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"You're fat! Lose some weight, fatty!\"</span>  \n    <span class=\"token operator\">|</span> <span class=\"token builtin\">otherwise</span>                   <span class=\"token operator\">=</span> <span class=\"token string\">\"You're a whale, congratulations!\"</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>注意，我们重复了3次。我们重复了3次。程序员的字典里不应该有“重复”这个词。既然发现有重复，那么给它一个名字来代替这三个表达式会更好些。嗯，我们可以这样修改：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">bmiTell</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">RealFloat</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>  \n<span class=\"token hvariable\">bmiTell</span> <span class=\"token hvariable\">weight</span> <span class=\"token hvariable\">height</span>  \n    <span class=\"token operator\">|</span> <span class=\"token hvariable\">bmi</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">18.5</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"You're underweight, you emo, you!\"</span>  \n    <span class=\"token operator\">|</span> <span class=\"token hvariable\">bmi</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">25.0</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"You're supposedly normal. Pffft, I bet you're ugly!\"</span>  \n    <span class=\"token operator\">|</span> <span class=\"token hvariable\">bmi</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">30.0</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"You're fat! Lose some weight, fatty!\"</span>  \n    <span class=\"token operator\">|</span> <span class=\"token builtin\">otherwise</span>   <span class=\"token operator\">=</span> <span class=\"token string\">\"You're a whale, congratulations!\"</span>  \n    <span class=\"token keyword\">where</span> <span class=\"token hvariable\">bmi</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">weight</span> <span class=\"token operator\">/</span> <span class=\"token hvariable\">height</span> <span class=\"token operator\">^</span> <span class=\"token number\">2</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们的where关键字跟在门卫后面（最好是与竖线缩进一致），可以定义多个名字和函数。这些名字对每个门卫都是可见的，这一来就避免了重复。如果我们打算换种方式计算bmi，只需进行一次修改就行了。通过命名，我们提升了代码的可读性，并且由于bmi只计算了一次，函数的执行效率也有所提升。我们可以再做下修改：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">bmiTell</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">RealFloat</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>  \n<span class=\"token hvariable\">bmiTell</span> <span class=\"token hvariable\">weight</span> <span class=\"token hvariable\">height</span>  \n    <span class=\"token operator\">|</span> <span class=\"token hvariable\">bmi</span> <span class=\"token operator\">&lt;=</span> <span class=\"token hvariable\">skinny</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"You're underweight, you emo, you!\"</span>  \n    <span class=\"token operator\">|</span> <span class=\"token hvariable\">bmi</span> <span class=\"token operator\">&lt;=</span> <span class=\"token hvariable\">normal</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"You're supposedly normal. Pffft, I bet you're ugly!\"</span>  \n    <span class=\"token operator\">|</span> <span class=\"token hvariable\">bmi</span> <span class=\"token operator\">&lt;=</span> <span class=\"token hvariable\">fat</span>    <span class=\"token operator\">=</span> <span class=\"token string\">\"You're fat! Lose some weight, fatty!\"</span>  \n    <span class=\"token operator\">|</span> <span class=\"token builtin\">otherwise</span>     <span class=\"token operator\">=</span> <span class=\"token string\">\"You're a whale, congratulations!\"</span>  \n    <span class=\"token keyword\">where</span> <span class=\"token hvariable\">bmi</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">weight</span> <span class=\"token operator\">/</span> <span class=\"token hvariable\">height</span> <span class=\"token operator\">^</span> <span class=\"token number\">2</span>  \n          <span class=\"token hvariable\">skinny</span> <span class=\"token operator\">=</span> <span class=\"token number\">18.5</span>  \n          <span class=\"token hvariable\">normal</span> <span class=\"token operator\">=</span> <span class=\"token number\">25.0</span>  \n          <span class=\"token hvariable\">fat</span> <span class=\"token operator\">=</span> <span class=\"token number\">30.0</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>函数在_where_绑定中定义的名字只对本函数可见，因此我们不必担心它会污染其他函数的命名空间。注意，其中的名字都是一列垂直排开，如果不这样规范，haskell就搞不清楚它们在哪个地方了。</p>\n<p>_where_绑定不会在多个模式中共享。如果你在一个函数的多个模式中重复用到同一名字，就应该把它置于全局定义之中。</p>\n<p>_where_绑定也可以使用<em>模式匹配</em>！前面那段代码可以改成：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token operator\">...</span>  \n<span class=\"token keyword\">where</span> <span class=\"token hvariable\">bmi</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">weight</span> <span class=\"token operator\">/</span> <span class=\"token hvariable\">height</span> <span class=\"token operator\">^</span> <span class=\"token number\">2</span>  \n      <span class=\"token punctuation\">(</span><span class=\"token hvariable\">skinny</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">normal</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">fat</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">18.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30.0</span><span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们再搞个简单函数，让它告诉我们姓名的首字母：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">initials</span> <span class=\"token operator\">::</span> <span class=\"token constant\">String</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>  \n<span class=\"token hvariable\">initials</span> <span class=\"token hvariable\">firstname</span> <span class=\"token hvariable\">lastname</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">f</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">++</span> <span class=\"token string\">\". \"</span> <span class=\"token operator\">++</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">l</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">++</span> <span class=\"token string\">\".\"</span>  \n    <span class=\"token keyword\">where</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">f</span><span class=\"token operator\">:</span><span class=\"token hvariable\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">firstname</span>  \n          <span class=\"token punctuation\">(</span><span class=\"token hvariable\">l</span><span class=\"token operator\">:</span><span class=\"token hvariable\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">lastname</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们完全按可以在函数的参数上直接使用模式匹配（这样更短更简洁），在这里只是为了演示在where语句中同样可以使用模式匹配：</p>\n<p>_where_绑定可以定义名字，也可以定义函数。保持健康的编程风格，我们搞个计算一组bmi的函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">calcBmis</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">RealFloat</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">]</span>  \n<span class=\"token hvariable\">calcBmis</span> <span class=\"token hvariable\">xs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">bmi</span> <span class=\"token hvariable\">w</span> <span class=\"token hvariable\">h</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">w</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">h</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span> <span class=\"token hvariable\">xs</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">where</span> <span class=\"token hvariable\">bmi</span> <span class=\"token hvariable\">weight</span> <span class=\"token hvariable\">height</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">weight</span> <span class=\"token operator\">/</span> <span class=\"token hvariable\">height</span> <span class=\"token operator\">^</span> <span class=\"token number\">2</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>这就全了！在这里将<code class=\"language-text\">bmi</code>搞成一个函数，是因为我们不能依据参数直接进行计算，而必须先从传入函数的list中取出每个序对并计算对应的值。</p>\n<p>_where_绑定还可以嵌套。有个已被广泛接受的理念，就是一个函数应该有几个辅助函数。而每个辅助函数也可以通过where拥有各自的辅助函数。</p>\n<h2>Let it be</h2>\n<p>let绑定与where绑定很相似。where绑定是在函数底部定义名字，对包括所有门卫在内的整个函数可见。let绑定则是个表达式，允许你在任何位置定义局部变量，而对不同的门卫不可见。正如haskell中所有赋值结构一样，let绑定也可以使用模式匹配。看下它的实际应用！这是个依据半径和高度求圆柱体表面积的函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">cylinder</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">RealFloat</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">a</span>  \n<span class=\"token hvariable\">cylinder</span> <span class=\"token hvariable\">r</span> <span class=\"token hvariable\">h</span> <span class=\"token operator\">=</span> \n    <span class=\"token keyword\">let</span> <span class=\"token hvariable\">sideArea</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token builtin\">pi</span> <span class=\"token operator\">*</span> <span class=\"token hvariable\">r</span> <span class=\"token operator\">*</span> <span class=\"token hvariable\">h</span>  \n        <span class=\"token hvariable\">topArea</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">pi</span> <span class=\"token operator\">*</span> <span class=\"token hvariable\">r</span> <span class=\"token operator\">^</span><span class=\"token number\">2</span>  \n    <span class=\"token keyword\">in</span>  <span class=\"token hvariable\">sideArea</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token hvariable\">topArea</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>[$img/letitbe.png]</p>\n<p>let的格式为<code class=\"language-text\">let [bindings] in [expressions]</code>。在<em>let</em>中绑定的名字仅对in部分可见。<em>let</em>里面定义的名字也得对齐到一列。不难看出，这用<em>where</em>绑定也可以做到。那么它俩有什么区别呢？看起来无非就是，<em>let</em>把绑定放在语句前面而<em>where</em>放在后面嘛。</p>\n<p>不同之处在于，<em>let</em>绑定本身是个表达式，而<em>where</em>绑定则是个语法结构。还记得前面我们讲if语句时提到它是个表达式，因而可以随处安放？</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">if</span> <span class=\"token number\">5</span> <span class=\"token operator\">></span> <span class=\"token number\">3</span> <span class=\"token keyword\">then</span> <span class=\"token string\">\"Woo\"</span> <span class=\"token keyword\">else</span> <span class=\"token string\">\"Boo\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">if</span> <span class=\"token char string\">'a'</span> <span class=\"token operator\">></span> <span class=\"token char string\">'b'</span> <span class=\"token keyword\">then</span> <span class=\"token string\">\"Foo\"</span> <span class=\"token keyword\">else</span> <span class=\"token string\">\"Bar\"</span><span class=\"token punctuation\">]</span>  \n<span class=\"token punctuation\">[</span><span class=\"token string\">\"Woo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bar\"</span><span class=\"token punctuation\">]</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token number\">10</span> <span class=\"token operator\">></span> <span class=\"token number\">5</span> <span class=\"token keyword\">then</span> <span class=\"token number\">10</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span>  \n<span class=\"token number\">42</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>用<em>let</em>绑定也可以实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">=</span> <span class=\"token number\">9</span> <span class=\"token keyword\">in</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span>  \n<span class=\"token number\">42</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>let</em>也可以定义局部函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">let</span> <span class=\"token hvariable\">square</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">*</span> <span class=\"token hvariable\">x</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">square</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">square</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">square</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>  \n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>若要在一行中绑定多个名字，再将它们排成一列显然是不可以的。不过可以用分号将其分开。</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token hvariable\">b</span> <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span> <span class=\"token hvariable\">c</span> <span class=\"token operator\">=</span> <span class=\"token number\">300</span> <span class=\"token keyword\">in</span> <span class=\"token hvariable\">a</span><span class=\"token operator\">*</span><span class=\"token hvariable\">b</span><span class=\"token operator\">*</span><span class=\"token hvariable\">c</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">let</span> <span class=\"token hvariable\">foo</span><span class=\"token operator\">=</span><span class=\"token string\">\"Hey \"</span><span class=\"token punctuation\">;</span> <span class=\"token hvariable\">bar</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"there!\"</span> <span class=\"token keyword\">in</span> <span class=\"token hvariable\">foo</span> <span class=\"token operator\">++</span> <span class=\"token hvariable\">bar</span><span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">(</span><span class=\"token number\">6000000</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Hey there!\"</span><span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>最后那个绑定后面的分号不是必须的，不过加上也没关系。如我们前面所说，你可以在<em>let</em>绑定中使用模式匹配。这在从Tuple取值之类的操作中很方便。</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">,</span><span class=\"token hvariable\">b</span><span class=\"token punctuation\">,</span><span class=\"token hvariable\">c</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token hvariable\">a</span><span class=\"token operator\">+</span><span class=\"token hvariable\">b</span><span class=\"token operator\">+</span><span class=\"token hvariable\">c</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span>  \n<span class=\"token number\">600</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>你也可以把<em>let</em>绑定放到List Comprehension中。我们重写下那个计算bmi值的函数，用个<em>let</em>替换掉原先的<em>where</em>。</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">calcBmis</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">RealFloat</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">]</span>  \n<span class=\"token hvariable\">calcBmis</span> <span class=\"token hvariable\">xs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">bmi</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">w</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">h</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span> <span class=\"token hvariable\">xs</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">let</span> <span class=\"token hvariable\">bmi</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">w</span> <span class=\"token operator\">/</span> <span class=\"token hvariable\">h</span> <span class=\"token operator\">^</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>List Comprehension中let绑定的样子和限制条件差不多，只不过它做的不是过滤，而是绑定名字。<em>let</em>中绑定的名字在输出函数及限制条件中都可见。这一来我们就可以让我们的函数只返回胖子的bmi值：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">calcBmis</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">RealFloat</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">]</span>  \n<span class=\"token hvariable\">calcBmis</span> <span class=\"token hvariable\">xs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">bmi</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">w</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">h</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span> <span class=\"token hvariable\">xs</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">let</span> <span class=\"token hvariable\">bmi</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">w</span> <span class=\"token operator\">/</span> <span class=\"token hvariable\">h</span> <span class=\"token operator\">^</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">bmi</span> <span class=\"token operator\">>=</span> <span class=\"token number\">25.0</span><span class=\"token punctuation\">]</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>在<code class=\"language-text\">(w, h) &lt;- xs</code>这里无法使用<code class=\"language-text\">bmi</code>这名字，因为它在let绑定的前面。</p>\n<p>在List Comprehension中我们忽略了<em>let</em>绑定的in部分，因为名字的可见性已经预先定义好了。不过，把一个<em>let...in</em>放到限制条件中也是可以的，这样名字只对这个限制条件可见。在GHCi中in部分也可以省略，名字的定义就在整个交互中可见。</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token keyword\">let</span> <span class=\"token hvariable\">zoot</span> <span class=\"token hvariable\">x</span> <span class=\"token hvariable\">y</span> <span class=\"token hvariable\">z</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">*</span> <span class=\"token hvariable\">y</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">z</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token hvariable\">zoot</span> <span class=\"token number\">3</span> <span class=\"token number\">9</span> <span class=\"token number\">2</span>  \n<span class=\"token number\">29</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token keyword\">let</span> <span class=\"token hvariable\">boot</span> <span class=\"token hvariable\">x</span> <span class=\"token hvariable\">y</span> <span class=\"token hvariable\">z</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">*</span> <span class=\"token hvariable\">y</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">z</span> <span class=\"token keyword\">in</span> <span class=\"token hvariable\">boot</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">2</span>  \n<span class=\"token number\">14</span>  \n<span class=\"token hvariable\">ghci</span><span class=\"token operator\">></span> <span class=\"token hvariable\">boot</span>  \n<span class=\"token operator\">&lt;</span> <span class=\"token hvariable\">interactive</span><span class=\"token operator\">>:</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token constant\">Not</span> <span class=\"token keyword\">in</span> <span class=\"token hvariable\">scope</span><span class=\"token operator\">:</span> `<span class=\"token hvariable\">boot</span>'  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>你说既然<em>let</em>已经这么好了，还要<em>where</em>干嘛呢？嗯，<em>let</em>是个表达式，定义域限制的相当小，因此不能在多个门卫中使用。一些朋友更喜欢<em>where</em>，因为它是跟在函数体后面，把主函数体距离类型声明近一些会更易读。</p>\n<h2>case表达式</h2>\n<p>[$img/case.png]</p>\n<p>有命令式编程(<em>C, C++, Java, etc</em>)的经验的同学一定会有所了解，很多命令式语言都提供了<em>case</em>语句。就是取一个变量，按照对变量的判断选择对应的代码块。其中可能会存在一个万能匹配以处理未预料的情况。</p>\n<p>haskell取了这一概念融合其中。如其名，case表达式就是，嗯，一种表达式。跟<em>if..else</em>和<em>let</em>一样的表达式。用它可以对变量的不同情况分别求值，还可以使用模式匹配。Hmm，取一个变量，对它模式匹配，执行对应的代码块。好像在哪儿听过？啊，就是函数定义时参数的模式匹配！好吧，模式匹配本质上不过就是case语句的语法糖而已。这两段代码就是完全等价的：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token builtin\">head</span>' <span class=\"token operator\">::</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">a</span>  \n<span class=\"token builtin\">head</span>' <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">error</span> <span class=\"token string\">\"No head for empty lists!\"</span>  \n<span class=\"token builtin\">head</span>' <span class=\"token punctuation\">(</span><span class=\"token hvariable\">x</span><span class=\"token operator\">:</span><span class=\"token hvariable\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">x</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token builtin\">head</span>' <span class=\"token operator\">::</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">a</span>  \n<span class=\"token builtin\">head</span>' <span class=\"token hvariable\">xs</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">case</span> <span class=\"token hvariable\">xs</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token builtin\">error</span> <span class=\"token string\">\"No head for empty lists!\"</span>  \n                      <span class=\"token punctuation\">(</span><span class=\"token hvariable\">x</span><span class=\"token operator\">:</span><span class=\"token hvariable\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">x</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>看得出，<em>case</em>表达式的语法十分简单：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> <span class=\"token hvariable\">expression</span> <span class=\"token keyword\">of</span> <span class=\"token hvariable\">pattern</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">result</span>  \n                   <span class=\"token hvariable\">pattern</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">result</span>  \n                   <span class=\"token hvariable\">pattern</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">result</span> \n                   <span class=\"token operator\">...</span>              <span class=\"token operator\">...</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>expression</em>匹配合适的模式。如料，第一个模式若匹配，就执行第一个代码块；否则就交给下一个模式。如果到最后依然没有匹配的模式，就会产生一个运行时错误。</p>\n<p>函数参数的模式匹配只能在定义函数时使用，而case表达式可以用在任何地方。例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">describeList</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>  \n<span class=\"token hvariable\">describeList</span> <span class=\"token hvariable\">xs</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"The list is \"</span> <span class=\"token operator\">++</span> <span class=\"token keyword\">case</span> <span class=\"token hvariable\">xs</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"empty.\"</span>  \n                                               <span class=\"token punctuation\">[</span><span class=\"token hvariable\">x</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"a singleton list.\"</span>   \n                                               <span class=\"token hvariable\">xs</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"a longer list.\"</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>这在表达式中作模式匹配很方便，由于模式匹配本质上就是case表达式的语法糖，那么写成这样也是等价的：</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"token hvariable\">describeList</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>  \n<span class=\"token hvariable\">describeList</span> <span class=\"token hvariable\">xs</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"The list is \"</span> <span class=\"token operator\">++</span> <span class=\"token hvariable\">what</span> <span class=\"token hvariable\">xs</span>  \n    <span class=\"token keyword\">where</span> <span class=\"token hvariable\">what</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"empty.\"</span>  \n          <span class=\"token hvariable\">what</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">x</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"a singleton list.\"</span>  \n          <span class=\"token hvariable\">what</span> <span class=\"token hvariable\">xs</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"a longer list.\"</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>","excerpt":"函数的语法 模式匹配 [$img/pattern.png] 本章讲的就是haskell那套酷酷的语法结构，先从模式匹配开始。模式匹配通过检查数据的特定结构来检查其是否匹配，并按模式从中取得数据。 在定义函数时，你可以为不同的模式分别定义函数体，这就让代码更加简洁易读。你可以匹配一切数据类型---数字，字符，List，元组，等等。我们弄个简单函数，让它检查我们传给它的数字是不是7。 在调用时，模式会从上至下进行检查，一旦有匹配，那对应的函数体就被应用了。这个模式中的唯一匹配是参数为7，如果不是…","fields":{"slug":"/blog/2021/08/25/04-syntax-in-functions.html","date":"August 24, 2021"},"frontmatter":{"title":"syntax in functions","img":"./img/2013-09-12.jpg","author":["Sylvenas"],"categories":"Haskell"}}},"pageContext":{"slug":"/blog/2021/08/25/04-syntax-in-functions.html"}},"staticQueryHashes":[]}