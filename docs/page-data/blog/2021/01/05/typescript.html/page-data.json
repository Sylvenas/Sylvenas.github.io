{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/2021/01/05/typescript.html","result":{"data":{"markdownRemark":{"html":"<h2>Interface 与 Type 的区别</h2>\n<h3>相同点</h3>\n<ul>\n<li>都可以描述对象和函数</li>\n<li>都可以扩展(api不同，interface 用 <code class=\"language-text\">extends</code>，type alias 用 <code class=\"language-text\">&amp;</code>)</li>\n</ul>\n<h3>不同点</h3>\n<ul>\n<li>\n<p>声明范围不同</p>\n<ul>\n<li>interface 只能用来声明对象/函数等，无法用来声明 “基本属性”，比如：Number，String</li>\n<li>type alias 可以用来声明所有的类型</li>\n</ul>\n</li>\n<li>\n<p>扩展形式不同</p>\n<ul>\n<li>interface 用 <code class=\"language-text\">extends</code></li>\n<li>type alias 用 <code class=\"language-text\">&amp;</code></li>\n</ul>\n</li>\n<li>\n<p>同名重复定义</p>\n<ul>\n<li>interface 会自动合并</li>\n<li>type alias 会报错</li>\n</ul>\n</li>\n</ul>\n<h3>如何选择</h3>\n<p>建议优先使用 interface，实在满足不了，使用 type alias</p>\n<h2>函数中的 <code class=\"language-text\">this</code></h2>\n<p><code class=\"language-text\">this</code> 可以在 函数的第一个参数指定，编译之后，会自动去掉这个参数</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> hello<span class=\"token operator\">=</span><span class=\"token string\">\"window hello\"</span>\n\n<span class=\"token keyword\">const</span> obj<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n    hello<span class=\"token operator\">:</span><span class=\"token string\">\"obj hello\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">this</span><span class=\"token operator\">:</span> <span class=\"token keyword\">typeof</span> obj<span class=\"token punctuation\">,</span>x<span class=\"token operator\">:</span>string<span class=\"token punctuation\">,</span>y<span class=\"token operator\">:</span>string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hello<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/** \n * 编译结果\n * \n * function fn(x, y) {\n *   console.log(this.hello, x, y);\n * }\n* /</span></code></pre></div>\n<h3>工厂模式的函数</h3>\n<p>构造函数的类型不能直接声明为某个class，有两种解决办法，</p>\n<ul>\n<li>\n<ol>\n<li><code class=\"language-text\">new (...args: any[]): T;</code></li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li><code class=\"language-text\">function createIns&lt;T extends typeof Base>(Animal:T){return new Animal()}</code></li>\n</ol>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"base move\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Base</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dog move\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> createIns<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">typeof</span> Base<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>Animal<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">createIns</span><span class=\"token punctuation\">(</span>Base<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>const 与 readonly 的区别？</h3>\n<p>使用 ES6 的 const 关键字声明的<strong>值类型</strong>\nreadonly 修饰某对象/class的 <strong>属性</strong></p>\n<h3>any/unknow/void/nerver</h3>\n<ul>\n<li>any: 除非第一次从JS 迁移代码到TS，否则尽量不要使用any,因为这类似于在(<code class=\"language-text\">let someVar:any</code>)周围使用<code class=\"language-text\">@ts-ignore</code></li>\n<li>unknow: 典型的用途如<code class=\"language-text\">const jsonParserUnknown = (jsonString: string): unknown => JSON.parse(jsonString);</code>在使用的使用 使用 <code class=\"language-text\">as</code> 推断为具体的类型：<code class=\"language-text\">const myUserAccount = jsonParserUnknown('{ \"name\": \"Samuel\" }') as User;</code>;或者在http请求中 <code class=\"language-text\">(response:unknown)=>{}</code></li>\n<li>void: 函数在没有返回值的时候使用；一个典型的应用场景是 <code class=\"language-text\">callback</code></li>\n<li>nerver: 用来缩小范围，典型的用法是在<code class=\"language-text\">switch</code>中，最终的 default 中使用</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">enum</span> Flower <span class=\"token punctuation\">{</span>\n  Rose<span class=\"token punctuation\">,</span>\n  Rhododendron<span class=\"token punctuation\">,</span>\n  Violet<span class=\"token punctuation\">,</span>\n  Daisy<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">flowerLatinName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">flower<span class=\"token operator\">:</span> Flower</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>flower<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> Flower<span class=\"token punctuation\">.</span>Rose<span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"Rosa rubiginosa\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> Flower<span class=\"token punctuation\">.</span>Rhododendron<span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"Rhododendron ferrugineum\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> Flower<span class=\"token punctuation\">.</span>Violet<span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"Viola reichenbachiana\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> Flower<span class=\"token punctuation\">.</span>Daisy<span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"Bellis perennis\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">const</span> _exhaustiveCheck<span class=\"token operator\">:</span> never <span class=\"token operator\">=</span> flower<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> _exhaustiveCheck<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>抽象类</h2>\n<ul>\n<li>抽象类不能实例化，只能作为其他实体类的基类</li>\n<li>抽象类里的抽象方法，实体类必须实现</li>\n<li>抽象类里的非抽象方法，实体类可以不实现，会自动继承</li>\n</ul>","excerpt":"Interface 与 Type 的区别 相同点 都可以描述对象和函数 都可以扩展(api不同，interface 用 ，type alias 用 ) 不同点 声明范围不同 interface 只能用来声明对象/函数等，无法用来声明 “基本属性”，比如：Number，String type alias 可以用来声明所有的类型 扩展形式不同 interface 用  type alias 用  同名重复定义 interface 会自动合并 type alias…","fields":{"slug":"/blog/2021/01/05/typescript.html","date":"January 04, 2021"},"frontmatter":{"title":"typescript","img":"./img/2015-05-11.jpeg","author":["Sylvenas"],"categories":"codes"}}},"pageContext":{"slug":"/blog/2021/01/05/typescript.html"}},"staticQueryHashes":[]}