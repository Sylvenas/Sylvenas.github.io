{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/2018/08/24/代理-pattern.html","result":{"data":{"markdownRemark":{"html":"<h3>模仿类</h3>\n<p>多年以来，JavaScript中有一种奇怪的行为一直在被无耻地滥用，那就是<code class=\"language-text\">模仿类</code>。我们会仔细分析这种方法。\n这种奇怪的“类似类”的行为利用了函数的一种特殊特性:所有的函数默认都会拥有一个名为<code class=\"language-text\">prototype</code>的公有并且不可枚举的属性，它会指向另一个对象:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span> <span class=\"token comment\">// { }</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>这个对象通常被称为<code class=\"language-text\">Foo的原型</code>，因为我们通过名为<code class=\"language-text\">Foo.prototype</code>的属性引用来访问它。</p>\n<p>调用<code class=\"language-text\">new Foo()</code>时会创建<code class=\"language-text\">a</code>，其中的一步就是给<code class=\"language-text\">a</code>一个内部的<code class=\"language-text\">[[Prototype]]</code>链接，关联到<code class=\"language-text\">Foo.prototype</code>指向的那个对象。\n下面是<code class=\"language-text\">new</code>操作符的具体实现，也就是假如没有<code class=\"language-text\">new</code>操作符的时候，我们该怎么实现<code class=\"language-text\">new</code>呢？</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">newObject</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Constructor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Constructor</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在面向类的语言中，类可以被复制(或者说实例化)多次，就像用模具制作东西一样。之所以会这样是因为实例化(或者继承)一个类就意味着“把类的行为复制到物理对象中”，对于每一个新实例来说都会重复这个过程。\n但是在JavaScript中，并没有类似的复制机制。你不能创建一个类的多个实例，只能创建多个对象，它们<code class=\"language-text\">[[Prototype]]</code>关联的是同一个对象。但是在默认情况下并不会进行复制， 因此这些对象之间并不会完全失去联系，它们是互相关联的。</p>\n<p><code class=\"language-text\">new Foo()</code>会生成一个新对象(我们称之为a)，这个新对象的内部链接<code class=\"language-text\">[[Prototype]]</code>关联的是<code class=\"language-text\">Foo.prototype</code>对象。</p>\n<p>最后我们得到了两个对象，它们之间互相关联，就是这样。</p>\n<p>我们并没有初始化一个类，实际上我们并没有从“类”中复制任何行为到一个对象中，只是让两个对象互相关联。</p>\n<p>继承意味着复制操作，JavaScript(默认)并不会复制对象属性。</p>\n<p>相反，JavaScript会在两个对象之间创建一个关联，这样一个对象就可以通过委托访问另一个对象的属性和函数。</p>\n<p><code class=\"language-text\">Object.create(..)</code> 是一个大英雄，现在是时候来弄明白为 什么了:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function-variable function\">something</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Tell me something good...\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span> foo <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> bar<span class=\"token punctuation\">.</span><span class=\"token function\">something</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Tell me something good...</span></code></pre></div>\n<p><code class=\"language-text\">Object.create(..)</code> 会创建一个新对象(<code class=\"language-text\">bar</code>)并把它关联到我们指定的对象(<code class=\"language-text\">foo</code>)，这样 我们就可以充分发挥<code class=\"language-text\">[[Prototype]]</code>机制的威力(委托)并且避免不必要的麻烦(比如使用<code class=\"language-text\">new</code>的构造函数调用会生成<code class=\"language-text\">.prototype</code> 和<code class=\"language-text\">.constructor</code>引用)。</p>\n<p>换句话说JavaScript中这个原型链机制的本质就是对象之间的关联关系，对象之间从未存在过“继承”这种东西</p>","excerpt":"模仿类 多年以来，JavaScript…","fields":{"slug":"/blog/2018/08/24/代理-pattern.html","date":"August 23, 2018"},"frontmatter":{"title":"代理模式","img":"./img/2018-01-16.jpeg","author":["Sylvenas"],"categories":"design pattern"}}},"pageContext":{"slug":"/blog/2018/08/24/代理-pattern.html"}},"staticQueryHashes":[]}