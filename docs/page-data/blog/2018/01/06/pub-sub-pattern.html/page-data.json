{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/2018/01/06/pub-sub-pattern.html","result":{"data":{"markdownRemark":{"html":"<h3>发布订阅模式的概念</h3>\n<p>发布订阅模式Pub/Sub,它的主要概念为<code class=\"language-text\">定义一对多的关系，当一件事发布时会同时通知所有的订阅者</code>，在JavaScript和Jquery非常容易看到该模式的使用，例如Jquery里的<code class=\"language-text\">on</code>,下面的代码就可以想象成，<code class=\"language-text\">$('.someThing')</code>为订阅者，订阅了click,如果click事件发生了。发布者就会执行<code class=\"language-text\">doSomething</code>方法。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.SomeThing'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">//doSomething</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>该模式的优点在于<code class=\"language-text\">解偶合</code>，发布者与订阅者不需要知道对方的存在。<br>\n在使用的时候，当一个对象改变时，需要同时改变其他对象，但却不知道实际有多少个对象时，就可以考虑使用<code class=\"language-text\">Pub/Sub模式</code>。</p>\n<h3>发布订阅模式的实现过程</h3>\n<ul>\n<li>创建一个调度中心，用来调度各种发布者和订阅者。</li>\n<li>创建一个缓存列表，用来存放订阅者以及订阅者接收数据的响应逻辑，并提供对象的取消订阅的方法。</li>\n<li>提供一个供发布者发布数据的接口，可以接受发布的数据。</li>\n</ul>\n<h3>Pub/Sub 简单示例</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> ControlCenter <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n    subscribers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n\r\n    <span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subscribers<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subscribers<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subscribers<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subscribers<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n\r\n    <span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">let</span> listeners <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subscribers<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>listeners<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n\r\n        <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> listeners<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            listeners<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n\r\n    <span class=\"token function\">publish</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> valObj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subscribers<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>valObj<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            valObj<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> type<span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n\r\n        <span class=\"token keyword\">let</span> listeners <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subscribers<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ll <span class=\"token operator\">=</span> listeners<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ll<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            listeners<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>valObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后就可以使用了，首先订阅一个<code class=\"language-text\">test/foo</code>,并且当Task被触发时，会自动执行<code class=\"language-text\">foo函数</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>evt<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\nControlCenter<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test/foo'</span><span class=\"token punctuation\">,</span> foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>然后来触发<code class=\"language-text\">test/foo</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">ControlCenter<span class=\"token punctuation\">.</span><span class=\"token function\">publish</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test/foo'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> msg<span class=\"token operator\">:</span> <span class=\"token string\">'hello,this is a msg'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>最后再取消关注<code class=\"language-text\">test/foo</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">ControlCenter<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test/foo'</span><span class=\"token punctuation\">,</span> foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\nControlCenter<span class=\"token punctuation\">.</span><span class=\"token function\">publish</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test/foo'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> msg<span class=\"token operator\">:</span> <span class=\"token string\">'this should not be seen'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>执行结果为：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">'hello,this is a msg'</span></code></pre></div>\n<h3>发布订阅模式的应用场景</h3>\n<ul>\n<li>DOM事件</li>\n</ul>\n<p>一种典型的发布订阅者模式，一个事件('click')对一个dom节点进行监听；我们操作DOM节点，触发相应的事件，响应函数执。虽然dom节点和响应函数彼此之间，互相完全不了解，却不影响整个流程的完整进行。</p>\n<ul>\n<li>自定义事件</li>\n</ul>\n<p>事件是与DOM交互的最常见的方式，但是事件的概念完全可以应用在非DOM代码中;</p>\n<ul>\n<li>全局的发布订阅模式</li>\n</ul>\n<p>使用一个全局的<code class=\"language-text\">ControlCenter</code>对象做为调度中心，来管理全局的<code class=\"language-text\">发布者</code>和<code class=\"language-text\">订阅者</code>，完全解除了发布者和订阅者之间的耦合关系。</p>\n<ul>\n<li>模块之间的通信</li>\n</ul>\n<p>现在流行的MVVM框架中，两个不相关联的模块之间的通信。典型的例子为<code class=\"language-text\">redux</code>中的最核心代码：<a href=\"https://github.com/reactjs/redux/blob/master/src/createStore.js\"><code class=\"language-text\">createStore</code></a>类中的<code class=\"language-text\">subscriabe</code>和<code class=\"language-text\">dispatch</code>方法为典型的发布订阅模式。</p>\n<h3>Pub/Sub 不适合处理的类型</h3>\n<p><code class=\"language-text\">Pub/Sub</code>不适合用于一次性事件，所谓一次性事件，是指执行一次任务但可能产生多重结果（例如成功事件和失败事件），做不同的处理，<code class=\"language-text\">Ajax</code>请求就是很常见的一次性事件。这种最好使用Promise来处理。</p>","excerpt":"发布订阅模式的概念 发布订阅模式Pub/Sub,它的主要概念为，在JavaScript和Jquery非常容易看到该模式的使用，例如Jquery里的,下面的代码就可以想象成，为订阅者，订阅了click,如果click…","fields":{"slug":"/blog/2018/01/06/pub-sub-pattern.html","date":"January 05, 2018"},"frontmatter":{"title":"发布订阅模式","img":"./img/2018-01-06.jpeg","author":["Sylvenas"],"categories":"design pattern"}}},"pageContext":{"slug":"/blog/2018/01/06/pub-sub-pattern.html"}},"staticQueryHashes":[]}