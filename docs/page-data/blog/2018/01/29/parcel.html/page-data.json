{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/2018/01/29/parcel.html","result":{"data":{"markdownRemark":{"html":"<p>Parcel是web应用打包工具，主要特点是无须任何配置(<code class=\"language-text\">当然是吹牛，对于复杂的应用还是需要一些简单的配置</code>)和速度极快，对于受够了<code class=\"language-text\">webpack</code>那些机器复杂的配置项的同学来说是一种解放！在也不想去看<code class=\"language-text\">webpack</code>的那一堆一堆的<code class=\"language-text\">loader</code>和<code class=\"language-text\">plugin</code>了。</p>\n<p>对于<code class=\"language-text\">Parcel</code>的简单入门就不再做过多的描述，太简单了，到官网一看便知，下面主要说几种我们在开发中经常遇到的场景，以及配合<code class=\"language-text\">Parcel</code>的解决方案。</p>\n<h3>接口代理</h3>\n<p>在前端开发中，现在在开发阶段会自己mock后端接口的数据，当我们开发完成需要和后端连调的时候，就需要做一个接口代理，把我们的请求从mock的数据，转向真正的后端的接口，那就需要一个代理，这个代理如何做呢？\r\n从<code class=\"language-text\">Parcel</code>的零配置，是不太还做到，我们可以换个思路自己做一个服务器，借用<code class=\"language-text\">http-proxy-middleware</code>来转发http请求，创建文件<code class=\"language-text\">dev.js</code>代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> proxy <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http-proxy-middleware\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">const</span> Bundler <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"parcel-bundler\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">let</span> bundler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bundler</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">let</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\r\n  <span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token function\">proxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n    target<span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:3000\"</span><span class=\"token punctuation\">,</span>\r\n    changeOrigin<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>bundler<span class=\"token punctuation\">.</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">1234</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">package.json</code>文件<code class=\"language-text\">scripts</code>中添加</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token string\">\"start\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"node dev.js\"</span>,</code></pre></div>\n<p>以后启动项目就可以<code class=\"language-text\">npm start</code>来启动了，会自动帮我们启动一个开发服务器和接口代理。</p>\n<h3>代码路径简写</h3>\n<p>相信大家看到<code class=\"language-text\">../../../../../img/a.jpeg</code>这样的代码都是非常让人讨厌的，这路径谁也不想看，那么我们能不能用一个虚拟路径<code class=\"language-text\">img</code>来替<code class=\"language-text\">../../../../../img</code>呢，答案是肯定的，因为在我们把代码编译打包的时候，实际上是<code class=\"language-text\">babel</code>在做这个工作，那么我们用<code class=\"language-text\">babel-plugin-module-resolver</code>来帮我们做路径替换，我们首先要安装<code class=\"language-text\">babel-plugin-module-resolver</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> babel-plugin-module-resolver --dev</code></pre></div>\n<p>然后添加配置<code class=\"language-text\">.babelrc</code></p>\n<div class=\"gatsby-highlight\" data-language=\"babelrc\"><pre class=\"language-babelrc\"><code class=\"language-babelrc\">{\r\n  &quot;plugins&quot;: [\r\n    [\r\n      &quot;module-resolver&quot;,\r\n      {\r\n        &quot;root&quot;: [&quot;./src&quot;],\r\n        &quot;alias&quot;: {\r\n          &quot;img&quot;: &quot;./src/imgs&quot;\r\n        }\r\n      }\r\n    ]\r\n  ]\r\n}</code></pre></div>\n<p>这样以后就可以用<code class=\"language-text\">img</code>来替换<code class=\"language-text\">../../../../../img/a.jpeg</code>这样的路径了。</p>\n<h3>React代码切割</h3>\n<p>代码拆分这一段本不该写在这里的，但是遇到的人太多，类似的需求场景也很多，所以还是简单的写一下，我们可以借助<code class=\"language-text\">react-loadable</code>库来实现，首先安装，代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> react-loadable</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Loadable <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-loadable\"</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">import</span> Loading <span class=\"token keyword\">from</span> <span class=\"token string\">\"../components/loading/loading\"</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> AsyncHome <span class=\"token operator\">=</span> <span class=\"token function\">Loadable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n  <span class=\"token function-variable function\">loader</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../components/home/home\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n  loading<span class=\"token operator\">:</span> Loading<span class=\"token punctuation\">,</span>\r\n  delay<span class=\"token operator\">:</span> <span class=\"token number\">300</span> <span class=\"token comment\">// 0.3 seconds</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在使用中如果遇到了其他的常见需求场景，会继续补充。</p>","excerpt":"Parcel是web应用打包工具，主要特点是无须任何配置()和速度极快，对于受够了那些机器复杂的配置项的同学来说是一种解放！在也不想去看的那一堆一堆的和了。 对于的简单入门就不再做过多的描述，太简单了，到官网一看便知，下面主要说几种我们在开发中经常遇到的场景，以及配合的解决方案。 接口代理 在前端开发中，现在在开发阶段会自己mock后端接口的数据，当我们开发完成需要和后端连调的时候，就需要做一个接口代理，把我们的请求从mock…","fields":{"slug":"/blog/2018/01/29/parcel.html","date":"2018-01-28T16:00:00.000Z"},"frontmatter":{"title":"Parcel简介","img":"./img/2018-01-29.jpeg","author":["Sylvenas"],"categories":"bundlers"}}},"pageContext":{"slug":"/blog/2018/01/29/parcel.html"}},"staticQueryHashes":[]}