{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/2018/03/25/webapck-hrm.html","result":{"data":{"markdownRemark":{"html":"<h2>webpack hot module replacement</h2>\n<p>webpack HRM 作为提升开发效率的神器，在修改了部分代码的情况下，可以做到不reload整个页面实现修改模块的指定刷新，非常的“神器\",下面逐渐分析一下HRM的实现原理。</p>\n<p>首先我们先明确几个开发阶段的问题，并作出简答，后续会逐步实现/解决这几个问题</p>\n<ul>\n<li>\n<p>1.浏览器请求的代码 (<code class=\"language-text\">http://localhost:3000/static/js/main.js</code>) 是从哪里来的？<br>\n必定存在一个静态资源服务器可以为我们提供这些 js,css 等文件，我们称之为 server side</p>\n</li>\n<li>\n<p>2.可是我们在本地磁盘并没有见到这些打包过后的 js，css 啊，他们在哪里？\nwebpack 通过 <a href=\"https://www.npmjs.com/package/memfs\">memfs</a> 库把打包之后的文件，写入了内存中，然后我们的静态资源服务器，同样借助 memfs 从内存中读取文件，并返回给浏览器</p>\n</li>\n<li>\n<p>3.当我们修改了代码之后，怎么做到实时编译的呢？\nwebpack 提供了 watch 机制，使用 <a href=\"https://www.npmjs.com/package/chokidar\">chokidar</a> 库监听本地文件变化，然后重新打包</p>\n</li>\n<li>\n<p>4.browser 怎么知道代码已经被重新编译了呢？\n所以client 和 server side 之间必定存在一种通讯机制，轮询？no，no，no! websocket 走起！在 webpack rebuild done 之后发消息通知 browser 有新的代码了，然后 brower 主动拉取新的代码</p>\n</li>\n<li>\n<p>5.browser 也要建立 socket 通信，还要能拉取代码？可是我们自己写的代码里面怎么可能有这种逻辑？\n所以我们在启动 server 的时候，必定往打包的代码里面夹带了私货，也就是修改了 webapckConfig.entry，加入了建立 socket 链接，拉取新代码，并执行等相关逻辑的代码，我们称之为 client side</p>\n</li>\n<li>\n<p>6.browser 怎么知道拉取那个代码？怎么知道那些模块变更了，都拉取？那岂不是和直接刷新浏览器一样了，幸运的是<code class=\"language-text\">webpack.HotModuleReplacementPlugin</code>,会帮助我们计算好每次更新了那些模块(xxxxxxxx(hash).hot-update.json)，以及更新的代码(module.xxxxxxxx(hash).hot-update.js)，我们只要在 browser 主动拉取即可</p>\n</li>\n<li>\n<p>6.browser 拉取新的“已修改部分”代码之后，执行该部分代码，不久可以实现了HRM了么！</p>\n</li>\n</ul>\n<h3>server side</h3>\n<h4>实现静态资源服务</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Koa <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Koa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/** static file middleware **/</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>staticFileMiddleware<span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">dev server started at port: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>现在问题来了staticFileMiddleware，该如何实现呢？我们可以借助 <a href=\"https://www.npmjs.com/package/koa-static\">koa-static</a> 等等工具直接帮我们映射到 disk 的某个文件夹吗？ 答案不行。</p>\n<p>问题2，已经回答了 webpack 打包之后并没有把文件写入到磁盘中，而是保存在内存中，所以，我们要从内存中获取文件，然后返回给browser</p>\n<h4>从内存中获取js，css等文件</h4>\n<p>首先我们获取文件请求的路径，比如说 browser 请求<code class=\"language-text\">http://localhost:3000/static/js/main.js</code> 文件，那么 koa <code class=\"language-text\">ctx.url</code> 则为\"/static/js/main.js\"，然后我们加上 <code class=\"language-text\">webpackConfig.output.path</code> 不就是完整的文件路径了么。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">staticFileMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> filename <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>webpackConfig<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可是有了文件路径，怎么从内存中读取文件呢？毕竟我们还没有写入啊，所以这个问题先搁置一下，先解决“write to memory”的问题，然后我们再递归回来解决“read from memory”的问题</p>\n<h4>把打包后的js,css 写入 memory</h4>\n<p>根据webapck 文档 <a href=\"https://webpack.docschina.org/blog/2020-10-10-webpack-5-release/#filesystems\">outputFileSystem</a>，得知我们可以修改 <code class=\"language-text\">compiler.outputFileSystem</code> 为memory，而不是disk，这个我们可以借助 <a href=\"https://www.npmjs.com/package/memfs\">memfs</a> 来实现</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createFsFromVolume<span class=\"token punctuation\">,</span> Volume <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'memfs'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">reWriteFileToMemory</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">compiler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> vol <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Volume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> outputFileSystem <span class=\"token operator\">=</span> <span class=\"token function\">createFsFromVolume</span><span class=\"token punctuation\">(</span>vol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  outputFileSystem<span class=\"token punctuation\">.</span>join <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  compiler<span class=\"token punctuation\">.</span>outputFileSystem <span class=\"token operator\">=</span> outputFileSystem<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>compiler 是什么？compiler 是把 webpackConfig 传入 webapck 之后创建的一个对象，该对象包含 webpack 所有核心功能， <code class=\"language-text\">const compiler = webpack(webpackConfig)</code></p>\n</blockquote>\n<p>既然解决了写入的问题，是时候递归回去解决读取的问题了，根据 memfs 的文档，使用<code class=\"language-text\">statSync</code>，<code class=\"language-text\">readFileSync</code> 来读取文件,然后返回给 browser。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">staticFileMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> filename <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>webpackConfig<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">let</span> fsStats <span class=\"token operator\">=</span> compiler<span class=\"token punctuation\">.</span>outputFileSystem<span class=\"token punctuation\">.</span><span class=\"token function\">statSync</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 判断是否存在这个文件,并获取文件内容和文件类型</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fsStats<span class=\"token punctuation\">.</span><span class=\"token function\">isFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> content <span class=\"token operator\">=</span> compiler<span class=\"token punctuation\">.</span>outputFileSystem<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> contentType <span class=\"token operator\">=</span> mime<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span>\n    ctx<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> contentType\n    ctx<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> content\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token string\">\"NotFound\"</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>监听本地文件变化，重新打包</h4>\n<p>这部分应该是最简单的，借助 webapck 的 <a href=\"https://webpack.docschina.org/configuration/watch/\">watch</a> 机制，可以轻松实现 webapck 的监听，webpack 内部借助 <a href=\"https://www.npmjs.com/package/chokidar\">chokidar</a>,来实现的监听，具体怎么做的，可以阅读一下webpack watch 部分的源码</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">watchLocalFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  compiler<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'又一次编译任务成功完成了'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>现在我们只是监听了文件变化，并重新打包，可是怎么知道打包是否完成了呢？webapck 的消息机制同样提供了打包结束的事件，可以让我们监听：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">listenWebpackHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  compiler<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack-dev-server'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">stats</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    lastHash <span class=\"token operator\">=</span> stats<span class=\"token punctuation\">.</span>hash\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>现在我们可以获取到最新一次打包的 hash 值了，下一步就是通知 browser 有新的打包结果了，你快来拉取呀，怎么通知呢？很明显\nwebsocket 是一个绝佳的方案。</p>\n<h3>websocket</h3>\n<p>我们在 server side 创建 socket的服务端，然后该服务端可以实现消息的推送基本功能，这个过程我们借助 <a href=\"https://www.npmjs.com/package/socket.io\">socket.io</a> 实现</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> socketIo <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"socket.io\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> socketList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createSocketServer</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> io <span class=\"token operator\">=</span> <span class=\"token function\">socketIo</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onConnection</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">socket</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    socketList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">)</span>\n    socket<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hash'</span><span class=\"token punctuation\">,</span> lastHash<span class=\"token punctuation\">)</span>\n    socket<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ok'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  io<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connection'</span><span class=\"token punctuation\">,</span> onConnection<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里根据[文档]我们,必须把 koa server 转换为最原始的 http server(虽然也没什么本质的区别)，然后创建 socket server，并注意我们把所有的 socket 链接存在放一个数组中，这样做的原因是因为用户可能打开了多个 browser tab, 后面我们在发送消息的时候要全部发送，不然，仅仅会其中的某一个tab，收到更新的通知。</p>\n<h4>编译完成，则推送消息通知 browser</h4>\n<p>在 监听本地文件变化，重新打包，这一小节我们已经能够收到打包成功的消息了，获取取最新一次打包的 hash 值，现在就是推送消息给 browser， 让他拉取新的代码</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">listenWebpackHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  compiler<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack-dev-server'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">stats</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    lastHash <span class=\"token operator\">=</span> stats<span class=\"token punctuation\">.</span>hash\n    <span class=\"token comment\">// 每当新一个编译完成后都会向客户端发送消息</span>\n    socketList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">socket</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      socket<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hash'</span><span class=\"token punctuation\">,</span> stats<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 先向客户端发送最新的hash值</span>\n      socket<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ok'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 再向客户端发送一个ok</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>browser 接收 编译完成的消息</h4>\n<p>这个过程，同样借助 socket.io client完成相关的连接和消息接收</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> SocketClient <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"socket.io-client\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> io <span class=\"token operator\">=</span> SocketClient<span class=\"token punctuation\">.</span>io\n<span class=\"token keyword\">let</span> hotCurrentHash <span class=\"token comment\">// lastHash 上一次 hash值 </span>\n<span class=\"token keyword\">let</span> currentHash <span class=\"token comment\">// 这一次的hash值</span>\n\n<span class=\"token keyword\">const</span> socket <span class=\"token operator\">=</span> <span class=\"token function\">io</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3000'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> transports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"websocket\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nsocket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connect'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'客户端连接成功'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nsocket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hash'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">hash</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  currentHash <span class=\"token operator\">=</span> hash\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nsocket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ok'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">reloadApp</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>client side</h3>\n<h4>获取那些模块发生了变更</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">reloadApp</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">hot</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 如果hot为true 走热更新的逻辑</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token comment\">// 如果是第一次链接，或者本次和上一次打包的hash 一致，则无需拉取，因为没有任何变动</span>\n    <span class=\"token comment\">// 对应的行为是用户没有修改代码，仅仅是 cmd+s 了一下</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hotCurrentHash <span class=\"token operator\">||</span> hotCurrentHash <span class=\"token operator\">==</span> currentHash<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n      <span class=\"token keyword\">return</span> hotCurrentHash <span class=\"token operator\">=</span> currentHash\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">hotCheck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 如果不支持热更新，则直接重新加载</span>\n    window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span><span class=\"token function\">reload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">hotCheck</code> 函数作用就是拉取 <code class=\"language-text\">xxxxxxxx(hash).hot-update.json</code> 获取那些模块发生了变化</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">hotCheck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">hotDownloadManifest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">update</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> chunkIds <span class=\"token operator\">=</span> update<span class=\"token punctuation\">.</span>c\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">hotDownloadManifest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//hot-update.json文件里存放着从上一次编译到这一次编译 取到差异</span>\n    <span class=\"token keyword\">let</span> requestPath <span class=\"token operator\">=</span> <span class=\"token string\">'/main.'</span> <span class=\"token operator\">+</span> hotCurrentHash <span class=\"token operator\">+</span> <span class=\"token string\">\".hot-update.json\"</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> requestPath<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> update <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>update<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>这里请注意 requestPath 的路径拼写规则，为什么用的上次编译的 hash，作为路径的一部分呢？我想这样设计的原因可能在于，当前的</p>\n</blockquote>\n<p>\".hot-update.json\" 是相对于上次的编译的增量，他们之间是 “累加”的关系。</p>\n<h4>获取变更模块新的js代码</h4>\n<p>现在我们已经知道了，哪些模块发生了变化，只要根据模块id和hash,拉取最新的<code class=\"language-text\">xxxxxxxx(hash).hot-update.js</code>文件即可,拉取完成之后，并以script的方式插入到 document 中</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">hotCheck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">hotDownloadManifest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">update</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> chunkIds <span class=\"token operator\">=</span> update<span class=\"token punctuation\">.</span>c\n    chunkIds<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chunkId</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">hotDownloadUpdateChunk</span><span class=\"token punctuation\">(</span>chunkId<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">hotDownloadUpdateChunk</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chunkId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> script <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// /main.xxxx.hot-update.js</span>\n  script<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">+</span> chunkId <span class=\"token operator\">+</span> <span class=\"token string\">\".\"</span> <span class=\"token operator\">+</span> hotCurrentHash <span class=\"token operator\">+</span> <span class=\"token string\">\".hot-update.js\"</span>\n  document<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>在webpack dev server 的源代码中这个代码的插入实际上是使用了jsonp，拉取代码之后直接执行，优势是不侵入我们的页面代码，我们选择显式的插入script的方式，这样可以让读者们更好的理解和调试代码，不过这并没有什么本质上的区别</p>\n</blockquote>\n<h4>执行 moduleid.xxxxxxxx.hot-update.js</h4>\n<p>分析一下拉取的 <code class=\"language-text\">moduleid.xxxxxxxx.hot-update.js</code>的代码案例：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">self<span class=\"token punctuation\">[</span><span class=\"token string\">\"webpackHotUpdatewebpack_hmr\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"code_asyncTask_js\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token comment\">/***/</span> <span class=\"token string\">\"./code/asyncTask.js\"</span><span class=\"token operator\">:</span>\n<span class=\"token comment\">/*!***************************!*\\\n  !*** ./code/asyncTask.js ***!\n  \\***************************/</span>\n<span class=\"token comment\">/***/</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token keyword\">const</span> txt <span class=\"token operator\">=</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>btn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbtn<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> txt<span class=\"token punctuation\">;</span>\nbody<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>btn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/***/</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//# sourceMappingURL=code_asyncTask_js.934cc6044df3b9c0ab98.hot-update.js.map</span></code></pre></div>\n<p>可以发现，我们需要声明一个全局的<code class=\"language-text\">webpackHotUpdatewebpack_hmr</code>函数，来执行这份代码，不然就出现“self[\"webpackHotUpdatewebpack_hmr\"] is not a function”的 type error 错误，let's do it:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">webpackHotUpdatewebpack_hmr</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">chunkId<span class=\"token punctuation\">,</span> updatedModules</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 循环新拉来的模块</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> moduleId <span class=\"token keyword\">in</span> updatedModules<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 从模块缓存中取到老的模块定义</span>\n    <span class=\"token keyword\">let</span> oldModule <span class=\"token operator\">=</span> __webpack_require__<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">[</span>moduleId<span class=\"token punctuation\">]</span>\n    <span class=\"token comment\">// parents哪些模块引用这个模块 children这个模块引用了哪些模块</span>\n    <span class=\"token comment\">// parents=['./src/index.js']</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>\n      parents<span class=\"token punctuation\">,</span>\n      children\n    <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> oldModule\n    <span class=\"token comment\">// 更新缓存为最新代码 缓存进行更新</span>\n    <span class=\"token keyword\">let</span> module <span class=\"token operator\">=</span> __webpack_require__<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">[</span>moduleId<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      i<span class=\"token operator\">:</span> moduleId<span class=\"token punctuation\">,</span>\n      l<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      exports<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      parents<span class=\"token punctuation\">,</span>\n      children<span class=\"token punctuation\">,</span>\n      hot<span class=\"token operator\">:</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">hotCreateModule</span><span class=\"token punctuation\">(</span>moduleId<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    window<span class=\"token punctuation\">.</span>module<span class=\"token operator\">=</span>module\n\n    updatedModules<span class=\"token punctuation\">[</span>moduleId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">,</span> __webpack_require__<span class=\"token punctuation\">)</span>\n    module<span class=\"token punctuation\">.</span>l <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 状态变为加载就是给module.exports 赋值了</span>\n    parents<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parent</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> parentModule <span class=\"token operator\">=</span> __webpack_require__<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parentModule <span class=\"token operator\">&amp;&amp;</span> parentModule<span class=\"token punctuation\">.</span>hot <span class=\"token operator\">&amp;&amp;</span> parentModule<span class=\"token punctuation\">.</span>hot<span class=\"token punctuation\">.</span>_acceptedDependencies<span class=\"token punctuation\">[</span>moduleId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        parentModule<span class=\"token punctuation\">.</span>hot<span class=\"token punctuation\">.</span>_acceptedDependencies<span class=\"token punctuation\">[</span>moduleId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    hotCurrentHash <span class=\"token operator\">=</span> currentHash\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nwindow<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">hotCreateModule</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> hot <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    _acceptedDependencies<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 销毁老的元素</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">accept</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">deps<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> deps<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// hot._acceptedDependencies={'./title': render}</span>\n        hot<span class=\"token punctuation\">.</span>_acceptedDependencies<span class=\"token punctuation\">[</span>deps<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> callback\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> hot\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这部分代码就是遍历并执行变更的模块，但是请注意 <code class=\"language-text\">window.module=module</code> 的代码，这部分的目的是把 module 暴露出去，可以让用户决定部分模块热更新，还是全部热更新</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>hot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  module<span class=\"token punctuation\">.</span>hot<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./task.js'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Accepting the updated task module!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// only ./task.js changed, wo will do something</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>到目前位置，我们已经实现了从server side 到 client side 的主流程，等等还有一个步骤没有做，client 部分代码难道要用户手动引入吗？不，脏活累活自然都是我们干！</p>\n<h3>inject the client side code</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> webpackConfig <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../../webpack.config'</span><span class=\"token punctuation\">)</span>\n\nwebpackConfig<span class=\"token punctuation\">.</span>entry <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>require<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../client\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> webpackConfig<span class=\"token punctuation\">.</span>entry<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> compiler <span class=\"token operator\">=</span> <span class=\"token function\">webpack</span><span class=\"token punctuation\">(</span>webpackConfig<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>总结</h3>\n<p>看到这里，是不是发现原来所谓的热更新也没什么复杂的，我们也都能做到，然后难的是这个 idea ，在互联网应用层我们缺少的并不是技术，而是思路，缺少的是思考问题与解决问题的主动性</p>\n<p>全部代码：<a href=\"\">webpack-HRM</a></p>","excerpt":"webpack hot module replacement webpack HRM 作为提升开发效率的神器，在修改了部分代码的情况下，可以做到不reload整个页面实现修改模块的指定刷新，非常的“神器\",下面逐渐分析一下HRM的实现原理。 首先我们先明确几个开发阶段的问题，并作出简答，后续会逐步实现/解决这几个问题 1.浏览器请求的代码 () 是从哪里来的？ 必定存在一个静态资源服务器可以为我们提供这些 js,css 等文件，我们称之为 server side…","fields":{"slug":"/blog/2018/03/25/webapck-hrm.html","date":"March 24, 2018"},"frontmatter":{"title":"webpack HRM","img":"./img/2015-05-11.jpeg","author":["Sylvenas"],"categories":"bundlers"}}},"pageContext":{"slug":"/blog/2018/03/25/webapck-hrm.html"}},"staticQueryHashes":[]}