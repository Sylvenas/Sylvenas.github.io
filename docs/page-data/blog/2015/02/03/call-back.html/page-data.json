{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/2015/02/03/call-back.html","result":{"data":{"markdownRemark":{"html":"<p>在JavaScript代码中，回调是编写和处理JavaScript程序异步逻辑的最常用的方式，甚至可以说回调是JavaScript中最基础的异步模式，回调函数作为异步的主力军，并且他们不辱使命的完成了自己的任务。</p>\n<p>但是回调函数也不是没有缺点。</p>\n<h3>嵌套回调</h3>\n<p>考虑代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://some.url.com'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response <span class=\"token operator\">===</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">doOtherthing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>我们很经常见到这样的代码，这里我们三个函数嵌套在一起构成链，其中每个函数代表异步序列(任务)中的一个步骤。</p>\n<p>这种代码常常被称为回调地狱(callback hell),有时候也被称为毁灭金字塔(pyramid of doom,得名于嵌套锁紧的横向三角形)。</p>\n<p>但实际上<strong>回调地狱与嵌套和锁紧几乎没有什么关系</strong>，它引起的问题要比这些严重的多。</p>\n<h3>链式回调</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//监听按钮点击事件</span>\nbtn<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">debounceFun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//去抖动</span>\n<span class=\"token keyword\">const</span> debounceFun <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//ajax 请求</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ajax</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://easy-mock.com/mock/5b0525349ae34e7a89352191/example/mock'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ajax返回成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    myData <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>data\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ajax返回失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我相信很多人都会通过这种链式回调的方式处理异步回调，因为可读性比嵌套回调要搞，但是维护的成本可能要高很多\n上面的栗子，三个异步函数之间只有执行顺序上的关联，并没有数据上的关联，但是实际开发中的情况要比这个复杂,</p>\n<h3>回调函数参数校验</h3>\n<p>看个简单的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> girlName <span class=\"token operator\">=</span> <span class=\"token string\">\"裘千尺\"</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">hr</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callBack</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    girlName <span class=\"token operator\">=</span> <span class=\"token string\">\"黄蓉\"</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我是黄蓉'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">callBack</span><span class=\"token punctuation\">(</span>girlName<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">gj</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">love</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>girlName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">你好，我是郭靖，认识一下吧，我喜欢</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>love<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">hr</span><span class=\"token punctuation\">(</span>gj<span class=\"token punctuation\">)</span></code></pre></div>\n<p>gj作为hr的回调函数，并且hr将自己的一个变量传递给gj，gj在hr的回调中执行，\n仔细看这种写法并不严谨，\n如果gj并不只是一个function类型会怎么样？\n如果love的实参并不存在会怎么样？\n况且这只是一个简单的栗子\n所以回调函数中，参数的校验是很有必要的，回调函数链拉的越长，校验的条件就会越多，代码量就会越多，随之而来的问题就是可读性和可维护性就会降低。</p>\n<h3>安全性</h3>\n<p>但我们引用了第三方的插件或库的时候，有时候难免要出现异步回调的情况，一个栗子：\nxx支付，当用户发起支付后，我们将自己的一个回调函数，传递给xx支付，xx支付比较耗时，执行完之后，理论上它会去执行我们传递给他的回调函数，是的理论上是这样的，我们把回调的执行权交给了第三方，隐患随之而来\n第三方支付，多次调用我们的回调函数怎么办？\n第三方支付，不调用我们的回调函数怎么办？\n当我们把回调函数的执行权交给别人时，我们也要考虑各种场景可能会发生的问题</p>","excerpt":"在JavaScript代码中，回调是编写和处理JavaScript程序异步逻辑的最常用的方式，甚至可以说回调是JavaScript中最基础的异步模式，回调函数作为异步的主力军，并且他们不辱使命的完成了自己的任务。 但是回调函数也不是没有缺点。 嵌套回调 考虑代码： 我们很经常见到这样的代码，这里我们三个函数嵌套在一起构成链，其中每个函数代表异步序列(任务)中的一个步骤。 这种代码常常被称为回调地狱(callback hell),有时候也被称为毁灭金字塔(pyramid of doom…","fields":{"slug":"/blog/2015/02/03/call-back.html","date":"February 02, 2015"},"frontmatter":{"title":"Call Back","img":"./img/2015-02-03.jpeg","author":["Sylvenas"],"categories":"Async"}}},"pageContext":{"slug":"/blog/2015/02/03/call-back.html"}},"staticQueryHashes":[]}