webpackJsonp([0x744f70bf3e61],{466:function(n,s){n.exports={data:{markdownRemark:{html:'<h3 id="pull-versus-push"><a href="#pull-versus-push" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>pull versus push</h3>\n<p><em>拉取</em> 和 <em>推送</em> 是数据生产者和数据消费者之间进行通信的两种不同的机制。  </p>\n<p><strong>What is pull?</strong>在拉取体系中，总是由数据的消费者决定何时何地从生产者那里获取数据。生产者对数据何时何地传递给消费者毫不知情，只是在被动的生产数据（数据是由消费者主动拉取的，数据生产者因为消费者的拉取数据而被动的生产数据）。     </p>\n<p>每一个<code class="gatsby-code-text">JavaScript</code>函数都是一个拉取系统，函数是数据的生产者，函数的调用者调用函数之后，函数会返回调用者一个值，也就是相当于，函数的调用者，从函数拉取的一个数据。</p>\n<p>ES2015新增的<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*">generator functions and iterators</a>,是另外一种拉取系统。方法的调用者调用<code class="gatsby-code-text">iterator.next()</code>可以从<code class="gatsby-code-text">iterators</code>（数据生产者）拉取多个值。</p>\n<p><strong>What is push?</strong>在推送系统中，数据的生产者决定什么时候给消费者推送数据，而消费者完全不知道什么时候会接收到数据，消费者是被动的接收数据。</p>\n<p><code class="gatsby-code-text">Promise</code>是现在JavaScript中最典型的推送系统，作为数据生产者的<code class="gatsby-code-text">Promise</code>通过<code class="gatsby-code-text">resolve()</code>方法向数据的消费者推送数据；与函数正好相反，<code class="gatsby-code-text">Promise</code>决定着什么时候向消费者推送数据，而函数只能等待消费者来拉取数据。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>生产者</th>\n<th>消费者</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Pull</strong></td>\n<td><strong>被动:</strong>\n 在被请求的时候生产数据</td>\n<td><strong>主动:</strong>\n 决定何时请求数据</td>\n</tr>\n<tr>\n<td><strong>Push</strong></td>\n<td><strong>主动:</strong>\n 决定何时推送数据给消费者</td>\n<td><strong>被动:</strong>\n 接收到数据以后处理</td>\n</tr>\n</tbody>\n</table>\n<p>Rxjs为JavaScript引入了一个新的推送系统 — <strong>Observable</strong>,<code class="gatsby-code-text">Observable</code>是数据的生产者，把生产的数据推送给<code class="gatsby-code-text">Observer</code>(数据的消费者)。</p>\n<ul>\n<li><strong>Function</strong> 调用函数后，函数会进行同步计算并返回一个单一值</li>\n<li><strong>generator</strong> 每次调用生成器之后，会同步计算并返回一个值，可以多次连续调用</li>\n<li><strong>Promise</strong> 调用之后异步计算并推送一个值（也有可能不推送）</li>\n<li><strong>Observable</strong> 可以使用同步的方法计算结果，也可以通过异步的方法计算结果，并返回结果（可以是一个也可以是多个）</li>\n</ul>\n<h3 id="observable是函数概念的扩展"><a href="#observable%E6%98%AF%E5%87%BD%E6%95%B0%E6%A6%82%E5%BF%B5%E7%9A%84%E6%89%A9%E5%B1%95" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Observable是函数概念的扩展</h3>\n<p><code class="gatsby-code-text">Observable</code>既不像<code class="gatsby-code-text">EventEmitter</code>,也不像<code class="gatsby-code-text">Promise</code>。Observable中的Subject进行多路推送时与EventEmitter行为上有些类似，但是实际上Observable与EventEmitter并不相同。</p>\n<blockquote>\n<p>Observable更像是一个不需要参数的函数，但是它拓展了函数的概念使得它可以返回多个值。</p>\n</blockquote>\n<p>看看下面的例子</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="gatsby-highlight-code-line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Hello\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span>    <span class="token keyword">return</span> <span class="token number">42</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> x <span class="token operator">=</span> foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// same as foo()</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="gatsby-highlight-code-line"><span class="token keyword">var</span> y <span class="token operator">=</span> foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// same as foo()</span>\n</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>打印结果如下：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-none"><code class="gatsby-code-none">"Hello"\n42\n"Hello"\n42</code></pre>\n      </div>\n<p>我们可以使用Observable重写上面的逻辑：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">var</span> foo <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Hello\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nfoo<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfoo<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>输出的结果是一样的：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-none"><code class="gatsby-code-none">"Hello"\n42\n"Hello"\n42</code></pre>\n      </div>\n<p>Observable和函数都是在运行时进行求值运算的。如果不运行函数，<code class="gatsby-code-text">console.log(&#39;Hello&#39;)</code>就不会运行；如果不<code class="gatsby-code-text">subscribe</code>（订阅）Observable,<code class="gatsby-code-text">console.log(&#39;Hello&#39;)</code>也不会执行；函数的调用和对Observable的订阅都是互相独立的，函数的两次调用，会产生两个独立的作用域，对Observable的两次subscribe也会产生两个独立的作用域。</p>\n<blockquote>\n<p>Subscribing to an Observable is analogous to calling a Function.（订阅一个Observable和调用一个函数，这两个行为很类似）</p>\n</blockquote>\n<p>一些人认为Observable是异步的，但是这个观点是错误的，如果你像下面这样调用函数：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'before\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'after\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>输出的结果为：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-none"><code class="gatsby-code-none">"before"\n"Hello"\n42\n"after"</code></pre>\n      </div>\n<p>使用Observable实现同样的逻辑</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'before\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfoo<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'after\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>输出结果为：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-none"><code class="gatsby-code-none">"before"\n"Hello"\n42\n"after"</code></pre>\n      </div>\n<p><strong>订阅Observable这个行为完全是同步的，和调用方法一样</strong></p>\n<blockquote>\n<p>Observable生产数据的却是既可以同步的，也可以是异步的</p>\n</blockquote>\n<p>那么Observable和函数的关键区别在什么地方呢？<strong>Observable(可观察对象)可以进行多次<code class="gatsby-code-text">return</code>操作，也就是说可以返回多个值</strong>，很明显函数，不能这样做。</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Hello\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token number">42</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// dead code. will never happen</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>函数只能return一个值，但是Observable可以这样做：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">var</span> foo <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Hello\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "return" another value</span>\n  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "return" yet another</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'before\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfoo<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'after\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>上面的代码会同步的输出：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-none"><code class="gatsby-code-none">"before"\n"Hello"\n42\n100\n200\n"after"</code></pre>\n      </div>\n<p>但是同样的你也可以，异步的<code class="gatsby-code-text">return</code>数据：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">var</span> foo <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Hello\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// happens asynchronously</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'before\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfoo<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'after\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>输出结果为：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-none"><code class="gatsby-code-none">"before"\n"Hello"\n42\n100\n200\n"after"\n300</code></pre>\n      </div>\n<p>结论：</p>\n<ul>\n<li><code class="gatsby-code-text">func.call()</code> 意味着 ”<em>同步的返回给我一个值</em>”</li>\n<li><code class="gatsby-code-text">observable.subscribe()</code> 意味着 ”<em>不管是同步还是异步的，给我一个或者多个值</em>”</li>\n</ul>\n<h3 id="observable详述"><a href="#observable%E8%AF%A6%E8%BF%B0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Observable详述</h3>\n<p>Rxjs提供了一个工厂方法<code class="gatsby-code-text">Rx.Observable.create()</code>来<code class="gatsby-code-text">实例化</code>一个可观察对象（Observable）；Observable被Observe(观察者)<code class="gatsby-code-text">订阅</code>；在<code class="gatsby-code-text">执行</code>时可以调用观察者的<code class="gatsby-code-text">next</code>/<code class="gatsby-code-text">error</code>/<code class="gatsby-code-text">complete</code>方法；并且执行的过程可以被<code class="gatsby-code-text">终止</code>。</p>\n<p>Observable的核心内容为</p>\n<ul>\n<li><strong>Createing</strong> Observable</li>\n<li><strong>Subscribing</strong> Observable</li>\n<li><strong>Executing</strong> Observable</li>\n<li><strong>Disposing</strong> Observable</li>\n</ul>\n<h4 id="creating-observable"><a href="#creating-observable" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Creating Observable</h4>\n<p><code class="gatsby-code-text">Rx.Observable.create</code>是<code class="gatsby-code-text">Observable</code>构造函数的别名，接收一个参数：<code class="gatsby-code-text">subscribe</code>函数。\n下面的例子会创建一个Observable,每一秒钟向其订阅者发送一个<code class="gatsby-code-text">hi</code>字符串。</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">var</span> observable <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">\'hi\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<blockquote>\n<p>除了可以使用create函数创建Observable,我们还可以使用<a href="http://reactivex.io/rxjs/manual/overview.html#creation-operators">创建操作符</a>，如：of,from,interval等来创建Observable。</p>\n</blockquote>\n<p>上面的例子中，<code class="gatsby-code-text">subscribe</code>函数是定义Observable最核心的部分，接下来我们来了解订阅的含义。</p>\n<h4 id="subscribing-to-observables"><a href="#subscribing-to-observables" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Subscribing to Observables</h4>\n<p>上面例子中的可观察对象observable，可以以如下方式<code class="gatsby-code-text">订阅</code>。</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx">observable<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>x <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p><code class="gatsby-code-text">observable.subscribe</code>和<code class="gatsby-code-text">Observable.create(function subscribe(observer){...}</code>中的subscribe同名并非巧合。虽然在Rxjs中它们并不是同一个对象，但是在工程中，我们可以在概念上视两者为等价物。</p>\n<p>多个不同的Observer在订阅同一个Observable的时候，它们的subscribe都是不同的，当我们我们传入observer作为参数调用<code class="gatsby-code-text">observable.subscribe()</code>函数的时候，<code class="gatsby-code-text">Observable.create(function subscribe(observer)){...}</code>中<code class="gatsby-code-text">subscribe</code>函数的参数就是我们传入的observer，每一次<code class="gatsby-code-text">observable.sunscribe()</code>被调用的时候，都是互相独立，互不影响的。</p>\n<blockquote>\n<p>当订阅一个Observable的时候，和调用函数类似，我们需要提供一个回调函数来接收data</p>\n</blockquote>\n<p>订阅机制与处理函数的<code class="gatsby-code-text">addEventListener</code>/<code class="gatsby-code-text">removeEventListener</code>API不同。虽然我们把Observe传入了<code class="gatsby-code-text">Observable.subscribe()</code>中，但是观察者并不需要在Observable中进行注册，Observable也不需要维护订阅者列表。</p>\n<h4 id="executing-observables"><a href="#executing-observables" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Executing Observables</h4>\n<p>Observable只有被订阅的时候才会执行，执行的逻辑在<code class="gatsby-code-text">Observable.create(function subscribe(observer){....})</code>内，执行之后会同步或者异步的返回一个或者多个值。</p>\n<p>Observable在执行的过程中，可以发送三种不同类型的通知：</p>\n<ul>\n<li>“Next”通知：给next传入一个数字、字符串、对象等等</li>\n<li>“Error”通知：传递一个JavaScript Error 或者 异常</li>\n<li>“Complete”通知：不传递值</li>\n</ul>\n<p>“Next”通知是最常用和最重要的通知，其中包含着Observable传递给Observer的数据；在Observable的执行阶段，错误和完成通知，只能发送这两个中的一个，即要么执行完成，要出报错了。</p>\n<p>在Observable的执行过程中，0或者多个”Next”通知会被推送。在发生了错误或者完成通知推送之后，Observable不会再推送任何通知给Observer。</p>\n<p>下面代码展示了Observable 在执行过程中推送3个“Next” 通知然后结束：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">var</span> observable <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  observer<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Observable 严格遵守 Observable 契约，后面值为4的“Next” 通知永远不会被推送：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">var</span> observable <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  observer<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Is not delivered because it would violate the contract</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>使用<code class="gatsby-code-text">try/catch</code>块包裹 <code class="gatsby-code-text">subscribe</code> 代码是一个很赞的想法，如果捕获了异常，可以推送错误通知：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">var</span> observable <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    observer<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    observer<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// delivers an error if it caught one</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h4 id="disposing-observable-executions"><a href="#disposing-observable-executions" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Disposing Observable Executions</h4>\n<hr>\n<p>Observable的执行可能是无限的，作为观察者可能需要<strong>主动终止连接的契约</strong>,我们需要特定的API去终止执行过程。因为特定的观察者都有特定的执行过程，一旦观察者获得想要的数据之后就需要终止执行过程以避免带来计算时对内存的浪费。</p>\n<p>在调用<code class="gatsby-code-text">observable.subscribe</code>方法时，会反悔一个<code class="gatsby-code-text">Subscription</code>对象</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">var</span> subscription <span class="token operator">=</span> observable<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>x <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Subscription对象表示执行过程，通过极其简单的API,你可以终止执行过程。详情请阅读<code class="gatsby-code-text">Subscription</code><a href="http://reactivex.io/rxjs/manual/overview.html#subscription">相关文档</a>,你可以通过调用<code class="gatsby-code-text">subscription.unsubscribe()</code>来结束连接契约。</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">var</span> observable <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> subscription <span class="token operator">=</span> observable<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>x <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Later:</span>\nsubscription<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<blockquote>\n<p>在Observable被订阅之后，代表执行过程的Subscription对象将被返回，调用该对象的unsubscribe()方法，可以终止连接。</p>\n</blockquote>\n<p>每一个Observable都需要在<code class="gatsby-code-text">create()</code>的过程中定义终止的逻辑。在<code class="gatsby-code-text">function subscribe()</code>中返回自定义的<code class="gatsby-code-text">unsubscribe</code>就可以实现：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">var</span> observable <span class="token operator">=</span> Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Keep track of the interval resource</span>\n  <span class="token keyword">var</span> intervalID <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">\'hi\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Provide a way of canceling and disposing the interval resource</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">clearInterval</span><span class="token punctuation">(</span>intervalID<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>类似于<code class="gatsby-code-text">observable.subscribe</code> 和 <code class="gatsby-code-text">Observable.create(function subscribe() {...})</code>的关系，我们在<code class="gatsby-code-text">subscribe</code>中返回的 <code class="gatsby-code-text">unsubscribe</code> 也与<code class="gatsby-code-text">subscription.unsubscribe</code>在概念上等价。事实上，如果我们除去Rx的包装，纯粹的JavaScript代码简单清晰：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">function</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> intervalID <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">\'hi\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">clearInterval</span><span class="token punctuation">(</span>intervalID<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> unsubscribe <span class="token operator">=</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">{</span>next<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Later:</span>\n<span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// dispose the resources</span></code></pre>\n      </div>\n<p>我们定义Rxjs中的Observable、Observer、Subscription这些概念的目的是为了在Observable的约束范围内，安全、兼容的调用操作符。</p>',
frontmatter:{title:"Rxjs Observable",img:"./img/2017-10-26.jpeg",author:["Sylvenas"],excerpt:null,catalogue:null},fields:{date:"October 25, 2017",path:"blog/rxjs/2017-10-26-Rxjs-Observable.md",slug:"/blog/2017/10/26/Rxjs-Observable.html"}},allMarkdownRemark:{edges:[{node:{frontmatter:{title:"How JavaScript Work: 内存管理/垃圾收集/内存泄漏"},fields:{slug:"/blog/2019/02/05/menory-management.html"}}},{node:{frontmatter:{title:"前端资源加载优先级"},fields:{slug:"/blog/2019/01/12/load-priority.html"}}},{node:{frontmatter:{title:"FP18：Semigroup"},fields:{slug:"/blog/2018/12/13/FP18-Semigroup.html"}}},{node:{frontmatter:{title:"FP17：Transform Naturally"},fields:{slug:"/blog/2018/12/11/FP17-Transform-Naturally.html"}}},{node:{frontmatter:{title:"How JavaScript Work: 引擎、运行时、调用栈概述"},fields:{slug:"/blog/2018/11/12/overview-of-the-engine-the-runtime-the-call-stack.html"}}},{node:{frontmatter:{title:"FP16：Applicative Functor"},fields:{slug:"/blog/2018/11/07/FB16-Applicative-Functor.html"}}},{node:{frontmatter:{title:"FP15：Monad-2"},fields:{slug:"/blog/2018/09/11/FB15-Monad-2.html"}}},{node:{frontmatter:{title:"FP14：Monad-1"},fields:{slug:"/blog/2018/09/02/FP14-Monad-1.html"}}},{node:{frontmatter:{title:"'类'模式"},fields:{slug:"/blog/2018/08/24/class-pattern.html"}}},{node:{frontmatter:{title:"代理模式"},fields:{slug:"/blog/2018/08/24/代理-pattern.html"}}}]}},pathContext:{slug:"/blog/2017/10/26/Rxjs-Observable.html"}}}});