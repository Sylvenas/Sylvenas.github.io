webpackJsonp([0xb7961df6bdb4],{562:function(n,s){n.exports={data:{markdownRemark:{html:'<h2 id="套接字和流"><a href="#%E5%A5%97%E6%8E%A5%E5%AD%97%E5%92%8C%E6%B5%81" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>套接字和流</h2>\n<p>套接字指的是一个通讯终端，而网络套接字指的是在不同的计算机上运行的两个应用程序之间进行通讯所使用的终端。在套接字之间流通的数据就是我们所熟知的流。流中的数据可以以二进制的形式在Buffer中传输，也可以作为Unicode字符串来传递。两种数据类型都被称为<code class="gatsby-code-text">封包(数据被切割为长度相似的块)</code>来传输。有一种特殊的数据封包，即<code class="gatsby-code-text">尾包</code>(FIN)。被作为数据传输结束的信号发送给套接字。</p>\n<p>举个很常见的案例来模拟一下上面的流程，我们经常会看到好莱坞战争片，地面军队被围困之后，使用对讲机呼叫支援！对讲机就是通讯终端，也是就是我们所说的<code class="gatsby-code-text">套接字</code>。</p>\n<p>在电影场景中士兵好不容易从各种悬崖边/大楼边缘拿到对讲机之后，开始对着对讲机按键一通按之后(同时便随着滋滋滋的声音)，终于和远方的指挥所联系上了，而这个过程转换到计算机世界就是<code class="gatsby-code-text">两个终端建立连接的过程</code>。</p>\n<p>地面士兵开始给指挥所讲诉自己的地貌特征和地理坐标之后，最后说一句“END!”,表示自己说完了，不再继续说话，转而等待回复，这个也就是发送数据的<code class="gatsby-code-text">尾包</code>。</p>\n<img src="https://p1.music.126.net/DMjF1KyNVHaEdcyGXU1myw==/109951164836778372.png" alt="FIN" width="200">\n<p>然后指挥收到消息之后，一般会回复一句“Copy That!”。下一个场景一般是各种悍马开始打火，猛禽开始起飞…</p>\n<img src="https://p1.music.126.net/arYY6eoikVHsj1tKItCJgA==/109951164836765872.png" alt="Copy That" width="300">\n<p>上面的这个流程在电影院我们经历了好多次，这个场景转换到计算机世界实际上就是半双工通信的流程。为什么叫半双工呢，因为在同一时间只能有一方在讲话，另一方在收听，然后收听方接收消息之后，回复消息方。</p>\n<p>既然有半双工通讯，那么也一定存在全双工通讯，典型的全双工通讯的案例就是<code class="gatsby-code-text">情侣打电话吵架</code>,两个人分别在沟通的时候，经常会发生一起说话的场景，就是Boy向Girl发送数据的同时，Girl也在向Boy发送数据。</p>\n<blockquote>\n<p>单工就更简单了，A可以向B发送数据，B不能向A发送数据，单方向的！</p>\n</blockquote>\n<h2 id="http"><a href="#http" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>http</h2>\n<h3 id="http-server"><a href="#http-server" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>http server</h3>\n<p>很多Node.js的核心API都旨在创建某些服务来监听特定类型的通信。其中典型的有http模块用来创建Web服务器，进而监听http请求的,下面是一个典型的监听HTTP POST请求，接收POST请求中Body中信息，并添加一个serverTag字段之后回传给客户端的案例：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'http\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> querystring <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'querystring\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3232</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nserver<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">\'request\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">\'POST\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> body <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n\n    request<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">\'data\'</span><span class="token punctuation">,</span> data <span class="token operator">=></span> <span class="token punctuation">{</span>\n      body <span class="token operator">+=</span> data<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    request<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">\'end\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> post <span class="token operator">=</span> querystring<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      post <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token operator">...</span>post<span class="token punctuation">,</span>\n        serverTag<span class="token punctuation">:</span> <span class="token string">\'server append the data\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">\'Content-Type\'</span><span class="token punctuation">:</span> <span class="token string">\'text/plain\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'server listening on port 3232\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>下面是使用PostMan做测试的截图：\n<img src="https://p1.music.126.net/KU5iCkzcpl5qEpljnwNzuA==/109951164836697540.png" alt="Node.js POST"></p>\n<h3 id="http-client"><a href="#http-client" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>http client</h3>\n<p>Node.js可不仅仅能提供创建服务端的能力，同样提供了创建客户端发送数据的能力，下面我们自己编写一个http client来代替Postman来发送数据：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'http\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> querystring <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'querystring\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> postData <span class="token operator">=</span> querystring<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> <span class="token string">\'James\'</span><span class="token punctuation">,</span>\n  age<span class="token punctuation">:</span> <span class="token number">34</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>\n  hostname<span class="token punctuation">:</span> <span class="token string">\'localhost\'</span><span class="token punctuation">,</span>\n  port<span class="token punctuation">:</span> <span class="token number">3232</span><span class="token punctuation">,</span>\n  method<span class="token punctuation">:</span> <span class="token string">\'POST\'</span><span class="token punctuation">,</span>\n  header<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token string">\'Content-Type\'</span><span class="token punctuation">:</span> <span class="token string">\'application/x-www-form-urlencoded\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'Content-Length\'</span><span class="token punctuation">:</span> postData<span class="token punctuation">.</span>length<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> req <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'status\'</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'headers\'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  res<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">\'utf8\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> body <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n  res<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">\'data\'</span><span class="token punctuation">,</span> data <span class="token operator">=></span> <span class="token punctuation">{</span>\n    body <span class="token operator">+=</span> data<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  res<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">\'end\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'No more data in response\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nreq<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>postData<span class="token punctuation">)</span><span class="token punctuation">;</span>\nreq<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p><img src="https://p1.music.126.net/cAv5O92etN1s-zO03VWiLQ==/109951164836709512.png" alt="http client"></p>\n<h2 id="tcp"><a href="#tcp" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>TCP</h2>\n<p>TCP为大多数互联网应用提供了通讯平台，比如Web服务器和邮箱。它提供了一种客户端和服务端套接字之间传输数据的可靠通道。TCP为应用层(i.e.,http)的存在提供了基础的架构。</p>\n<p>Node.js也提供了创建TCP服务器和客户端的API，也就是<code class="gatsby-code-text">net</code>模块。创建TCP服务器的代码和创建http服务器的代码非常类似，创建TCP服务器的时候，我们不会向创建服务的函数传递包含request和response对象的requestListener函数，TCP回调函数只有一个参数，就是用来接收和传递数据的套接字对象，看代码：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> net <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'net\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3232</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> server <span class="token operator">=</span> net<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>conn <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'connected\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  conn<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">\'data\'</span><span class="token punctuation">,</span> data <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data <span class="token operator">+</span> <span class="token string">\' from\'</span> <span class="token operator">+</span> conn<span class="token punctuation">.</span>remoteAddress <span class="token operator">+</span> <span class="token string">\' \'</span> <span class="token operator">+</span> conn<span class="token punctuation">.</span>remotePort<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    conn<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  conn<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">\'close\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'client closed connection\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nserver<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>conn对象可以监听接收数据和断开连接，我们使用OSX的<code class="gatsby-code-text">netcat</code>工具来测试一下连接,读取当前文件夹下的app.json文件的内容并发送给TCP服务端，TCP服务端接收到数据之后，打印出来，并把数据回传给客户端</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-sh"><code class="gatsby-code-sh">nc localhost 3232 &lt; app.json</code></pre>\n      </div>\n<p><img src="https://p1.music.126.net/XnWsp9lxX7A-PRMoBc1pcA==/109951164837432441.png" alt="tcp server"></p>\n<blockquote>\n<p>前面多了::fff的原因是IP V4地址被解析为了IP V6</p>\n</blockquote>\n<p><img src="https://p1.music.126.net/jdpxhz6t1kzF_d3bFWBzgQ==/109951164837436843.png" alt="tcp client"></p>\n<h3 id="tcp客户端"><a href="#tcp%E5%AE%A2%E6%88%B7%E7%AB%AF" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>TCP客户端</h3>\n<p>Node.js同样提供了创建tcp客户端的API，我们简单了解一下：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> net <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'net\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">net<span class="token punctuation">.</span>Socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nclient<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">\'utf8\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 连接到服务端，并发送数据</span>\nclient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">\'3232\'</span><span class="token punctuation">,</span> <span class="token string">\'localhost\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'connected to server\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  client<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">\'Hi, I am client\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 客户端接收数据</span>\nclient<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">\'data\'</span><span class="token punctuation">,</span> data <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 服务端关闭</span>\nclient<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">\'close\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'connection is closed\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>客户端终端打印的日志为：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-sh"><code class="gatsby-code-sh">node client\n\nconnected to server\nHi, I am client</code></pre>\n      </div>\n<p>客户端和服务端的连接会一直保持，直到某一端的进程被关闭；关闭一端，另一端都会收到一个close的事件。\n服务端可以同时处理多个客户端的连接，因为所有相关的函数都是异步的。</p>\n<blockquote>\n<p>TCP服务不仅可以通过监听一个端口号来创建服务，还可以直接绑定一个UNIX套接字的方式来创建服务,这个用的比较少，可以看看<a href="https://nodejs.org/dist/latest-v12.x/docs/api/net.html#net_server_listen_path_backlog_callback">文档</a></p>\n</blockquote>\n<blockquote>\n<p>TCP连接建立的三次握手和断开的四次挥手的详细细节可以参考<a href="/blog/2017/05/17/http.html#tcpip%E5%8D%8F%E8%AE%AE%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B">另一篇文章</a></p>\n</blockquote>\n<h2 id="udp"><a href="#udp" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>UDP</h2>\n<p>TCP需要在两个终端之间建立专门的连接。UDP则是一个无连接的协议，也就意味着两个终端之间并不保证有连接存在。出于这个原因，UDP比TCP的可靠性和安全性都要差一点。然后UDP又比TCP速度快，所以更适用于对实时性要求比较高的场景(直播)，以及那些使用TCP连接可能会对信号质量造成负面影响的场景。</p>\n<p>毫无疑问，Node.js同样支持UDP套接字服务端和客户端的创建，UDP相关的模块是<code class="gatsby-code-text">dgram</code>,</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> dgram <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'dgram\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> server <span class="token operator">=</span> dgram<span class="token punctuation">.</span><span class="token function">createSocket</span><span class="token punctuation">(</span><span class="token string">\'udp4\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nserver<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">\'message\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>msg<span class="token punctuation">,</span> rinfo<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg <span class="token operator">+</span> <span class="token string">\' from \'</span> <span class="token operator">+</span> rinfo<span class="token punctuation">.</span>address <span class="token operator">+</span> <span class="token string">\':\'</span> <span class="token operator">+</span> rinfo<span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => Hello World from 127.0.0.1:50392</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nserver<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">3232</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>要创建UDP套接字要需要给createSocket方法传入套接字类型:udp4 or udp6。还可以传入一个回调函数用来监听事件。和TCP发送消息不同，使用UDP发送消息必须要使用Buffer,而不能使用字符串,但是我们在使用的时候可以直接传入string,send方法会把数据转换为Buffer的</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> dgram <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'dgram\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> client <span class="token operator">=</span> dgram<span class="token punctuation">.</span><span class="token function">createSocket</span><span class="token punctuation">(</span><span class="token string">\'udp4\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token string">\'Hello World\'</span><span class="token punctuation">;</span>\n\nclient<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token number">3232</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'successful\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => successful</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h2 id="tlsssl"><a href="#tlsssl" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>TLS/SSL</h2>\n<p>Web应用程序的安全性不仅是用来确保用户不会访问应用程序的服务端。安全性说起来很复杂，甚至很吓人。幸运的是，对于Node应用程序来说，我们所需要做的几个安全性组建已经被创建好了，我们只需要在合适的时间和合适的地方引用即可。SSL和它的升级版(TSL)会确保客户端和服务端发生的通讯是安全的，防篡改的，TSL/SSL为https提供了底层加密。</p>\n<p>TSL/SSL连接需要客户端和服务端之间进行一次握手。握手期间(通常是浏览器)会告诉服务端它所支持的安全性函数类型。然后服务端会挑选一个函数，并且发送一个SSL证书，该证书包含一个公钥。客户端确认收到证书后，会使用公钥生成一个随机数，然后发送给服务端端。最后服务端使用私钥对随机数揭秘，并使用解密的结果来对通信加密。</p>\n<p>为了让这个过程运行起来，需要同时生成公钥，私钥，和证书。对于生产环境，证书将由受信任的机构(如域名注册商)签名；但在开发环境中，你可以使用自签名证书，这样做会让用户在浏览器中访问应用程序时出现一个明显的警告信息，但由于是开发站点，不会被外部访问，所以问题不大。</p>\n<blockquote>\n<p>Lets Encrypt提供免费托管证书的服务，避免了商业授权的费用。</p>\n</blockquote>\n<h3 id="创建私钥"><a href="#%E5%88%9B%E5%BB%BA%E7%A7%81%E9%92%A5" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>创建私钥</h3>\n<p>用于生成公钥，私钥，和证书的工具是SSL,OS X自带了该工具，下面先看生成私钥的终端命令：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-sh"><code class="gatsby-code-sh">openssl genrsa -des3 -out site.key 2048</code></pre>\n      </div>\n<p>这个命令会在当前文件夹下生成一个私钥文件(site.key)，该私钥使用三重DES加密，以PEM格式保存，可以使用ASCII解密。在生成私钥的过程中你会被要求输入一个密码。这个密码先记住，后面在创建证书签名请求文件(CSR:certificate-signing-request)的时候会被用到。</p>\n<h3 id="创建证书签名请求文件"><a href="#%E5%88%9B%E5%BB%BA%E8%AF%81%E4%B9%A6%E7%AD%BE%E5%90%8D%E8%AF%B7%E6%B1%82%E6%96%87%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>创建证书签名请求文件</h3>\n<p>创建证书签名请求文件(这一步不是为了生成证书)的命令为：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-sh"><code class="gatsby-code-sh">openssl req -new -key site.key -out site.crs</code></pre>\n      </div>\n<p>生成证书签名请求文件的时候，会被要求输入密码，而该密码就是和生成私钥的是同一个密码，同时还会被要求回答一系列问题，包括国家缩写(比如ZH)，州/省的名称，城市名称，公司名称，机构名称，电子邮箱地址。其中有一项是最重要的就是“通用名称”(common name)，这个名称指的是网站的主机名，也就是访问网站所需要的域名，我们可以暂时填写一个测试的域名(比如：sylvenas.xyz)。</p>\n<p>该命令会在当前文件夹下生成一个证书签名请求文件：site.csr</p>\n<h3 id="创建证书"><a href="#%E5%88%9B%E5%BB%BA%E8%AF%81%E4%B9%A6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>创建证书</h3>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-sh"><code class="gatsby-code-sh">openssl x509 -req -day 365 -in site.csr -signkey site.key -out final.crt</code></pre>\n      </div>\n<p>该命令会在当前文件夹下创建一个final.crt文件，也就是证书；现在我们拥有的创建https服务器的所有必备文件，下一步就是用Node.js创建https服务器了</p>\n<h2 id="创建https服务器"><a href="#%E5%88%9B%E5%BB%BAhttps%E6%9C%8D%E5%8A%A1%E5%99%A8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>创建https服务器</h2>\n<p>类似于http模块，Node.js通常提供了创建https服务器的API：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> https <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'https\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> preivateKey <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">\'./site.key\'</span><span class="token punctuation">,</span> <span class="token string">\'utf8\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> certificate <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">\'./final.crt\'</span><span class="token punctuation">,</span> <span class="token string">\'utf8\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>\n  key<span class="token punctuation">:</span> preivateKey<span class="token punctuation">,</span> <span class="token comment">//私钥</span>\n  cert<span class="token punctuation">:</span> certificate<span class="token punctuation">,</span> <span class="token comment">//证书</span>\n  passphrase<span class="token punctuation">:</span> <span class="token string">\'forthelichking\'</span><span class="token punctuation">,</span> <span class="token comment">// 密码</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nhttps<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">\'Hello Secure World\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">443</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>出了要配置options之外，其他的内容几乎和创建http服务器一样的。</p>\n<p>这个时候我们在浏览器打开<code class="gatsby-code-text">https://sylvenas.xyz/</code>(记得把hosts中的sylvenas.xyz指向为localhost),赫然发现，我们的网站打不开了：</p>\n<p><img src="https://p1.music.126.net/lJx-pkQT-zeYwBNTgbXjvA==/109951164839902756.png" alt="https 警告"></p>\n<p>这是为何呢？很简单因为我们的证书不是第三方受信任的机构提供的，而是我们自己提供的，这个时候，就需要我们把刚刚创建的证书导入<code class="gatsby-code-text">钥匙串</code>,然后添加信任。</p>\n<p><img src="https://p1.music.126.net/fcMNBYh5lCqmsXLYsCZPvA==/109951164839914784.png" alt="添加证书并信任"></p>\n<p>然后刷新浏览器，就可以看到我们的网站可以打开了，但是Chrome依然给出了红色的安全警告：</p>\n<p><img src="https://p1.music.126.net/6v4UevWKoIXH8mOkTl1pbw==/109951164839932026.png" alt="安全警告"></p>\n<blockquote>\n<p>再次强调，使用可信的证书颁发结构颁发的可信证书，就可以消除警告</p>\n</blockquote>\n<h2 id="总结"><a href="#%E6%80%BB%E7%BB%93" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>总结</h2>\n<p>到此为止，我们总结了使用Node.js创建HTTP，TCP，UDP，HTTPS服务器的整体梳理，希望阅读之后能有一个大概的了解。</p>\n<p>很多人经常犯糊涂的一件事就是没有弄清楚TCP协议和UDP协议与TCP/IP协议的联系和区别，TCP/IP协议是一个协议簇，里面包含很多协议，包括TCP协议和UDP协议等等，之所以命名为TCP/IP协议，就是因为TCP、IP协议是两个很重要很常用的的协议，就用他两命名了。TCP/IP协议集包括应用层,传输层，网络层，网络访问层，这部分知识可以参考<a href="/blog/2017/05/17/http.html#%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80">这篇文章</a>。</p>',
frontmatter:{title:"Node.js与网络",img:"./img/2015-03-25.jpg",author:["Sylvenas"],excerpt:null,catalogue:null},fields:{date:"June 10, 2019",path:"blog/node/2019-06-11-node-http.md",slug:"/blog/2019/06/11/node-http.html"}},allMarkdownRemark:{edges:[{node:{frontmatter:{title:"React Hooks 原理及实现"},fields:{slug:"/blog/2021/03/30/react-hooks.html"}}},{node:{frontmatter:{title:"被讨厌的勇气"},fields:{slug:"/blog/2020/05/14/被讨厌的勇气.html"}}},{node:{frontmatter:{title:"自然变换 - Natural Transformation"},fields:{slug:"/blog/2020/05/02/自然变换.html"}}},{node:{frontmatter:{title:"遍历与队列 - Traversable"},fields:{slug:"/blog/2020/04/25/遍历与队列.html"}}},{node:{frontmatter:{title:"加法是自然之道 - Monoid"},fields:{slug:"/blog/2020/03/02/加法是自然之道.html"}}},{node:{frontmatter:{title:"俄罗斯套娃娃 - Monad"},fields:{slug:"/blog/2020/02/12/俄罗斯套娃娃.html"}}},{node:{frontmatter:{title:"纪念刘和珍君"},fields:{slug:"/blog/2020/02/07/记念刘和珍君.html"}}},{node:{frontmatter:{title:"应用函子 - Applicative"},fields:{slug:"/blog/2020/02/05/应用函子.html"}}},{node:{frontmatter:{title:"动物庄园"},fields:{slug:"/blog/2020/02/01/动物庄园.html"}}},{node:{frontmatter:{title:"薛定谔的 Maybe - IO"},fields:{slug:"/blog/2020/01/30/薛定谔的Maybe.html"}}}]}},pathContext:{slug:"/blog/2019/06/11/node-http.html"}}}});