webpackJsonp([73951558102577],{554:function(n,s){n.exports={data:{markdownRemark:{html:'<h3 id="积木游戏"><a href="#%E7%A7%AF%E6%9C%A8%E6%B8%B8%E6%88%8F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>积木游戏</h3>\n<blockquote>\n<p>说出来你可能不信，我只花了十分钟的时间就教会三岁的小孩什么是半群,ahhhhh.jpg</p>\n</blockquote>\n<p>周末在家陪小侄女玩了一个小时的积木，在不断叠加积木的过程中，突然想到用搭积木的案例来描述什么是<code class="gatsby-code-text">半群</code>异常的清晰,看下面三个积木：</p>\n<p><img src="" alt="红黄蓝积木"></p>\n<p>看到这三个积木，(<del>是不是有一种把他们叠在一起的冲动</del>)，按照常规操作，有一部分人可能会总左向右开始叠加，也就是先把最左边的红色积木和中间的黄色积木，搭在一起；然后把最后一个蓝色叠加上，那么最后的结果是：</p>\n<p><img src="" alt="积木拼接结果"></p>\n<p>然后可能有另一部分人从右向左叠加，那么就是先拼接黄色和蓝色；然后最后加上红色的积木；最后得到的结果，毫无疑问和第一种是一样的，<del>你这不是废话吗!!</del></p>\n<p>组合方法如果满足这种不论先拼接哪一块，最后按顺序组合在一起，得到的结果就是一样的，这被称为<strong>associative</strong>(可结合的)，积木的游戏很明显是满足这个法则的；而这个过程，我只演示了一遍，三岁的小侄女，就明白了这个道理；我觉的我们20多岁的人，可能不需要任何解释吧；</p>\n<p>而满足结合律的数据类型，则可以称之为半群(Semigroup)，是不是想起来了，很常用的<code class="gatsby-code-text">Array.prototype.concat</code>就是一个完全类似的东西，下面我们给半群一个精确的定义和解释。</p>\n<h3 id="半群"><a href="#%E5%8D%8A%E7%BE%A4" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>半群</h3>\n<p>一个半群(Semigroup)是带有组合方法(i.e.,<code class="gatsby-code-text">Array</code>的<code class="gatsby-code-text">concat</code>)的数据类型，假设我们的组合符号是<code class="gatsby-code-text">+</code>,那么组合方法满足结合律:</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx">a <span class="token operator">+</span> <span class="token punctuation">(</span>b <span class="token operator">+</span> c<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">+</span> c</code></pre>\n      </div>\n<p>在举个小学数学的知识来验证一下：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n\na <span class="token operator">+</span> <span class="token punctuation">(</span>b <span class="token operator">+</span> c<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">+</span> c   <span class="token comment">// => true</span>\n\n<span class="token keyword">const</span> e <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> g <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\ne <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>f <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token punctuation">(</span>e <span class="token operator">&amp;&amp;</span> f<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> g   <span class="token comment">// => true</span></code></pre>\n      </div>\n<p>Ok!让我们切换到JavaScript的世界：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token string">\'a\'</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">\'b\'</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">\'c\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">\'a\'</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">\'b\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">\'c\'</span><span class="token punctuation">)</span> <span class="token comment">// => true</span>\n\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// [1,2,3,4,5,6,7,8,9]</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">// [1,2,3,4,5,6,7,8,9]</span></code></pre>\n      </div>\n<p>由于JavaScript中<code class="gatsby-code-text">String</code>,<code class="gatsby-code-text">Array</code>类型，原型链上本身具有<code class="gatsby-code-text">cancat</code>方法，所以我们可以不断的<code class="gatsby-code-text">.concat .concat</code>;但是我们<code class="gatsby-code-text">Number</code>类型却没有，所以没法实现类似<code class="gatsby-code-text">1.concat(2).concat(3)</code>的代码；</p>\n<p>回想一下第一章中的Box理念，如果我们把数字<code class="gatsby-code-text">1</code>，包裹进Box中，则我们可以调用<code class="gatsby-code-text">Box(1)</code>上面的<code class="gatsby-code-text">map</code>方法，我们可以仿照Box再创建一个容器<code class="gatsby-code-text">Sum</code>,来包裹数字,让<code class="gatsby-code-text">Sum(1)</code>拥有<code class="gatsby-code-text">concat</code>方法，看看Sum的实现：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> <span class="token function-variable function">Sum</span> <span class="token operator">=</span> x <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    x<span class="token punctuation">,</span>\n    concat<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">:</span> y <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">Sum</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span>inspect<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token string">`Sum(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>下面我们可以做个验证：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// => Sum(6)</span>\n<span class="token function">Sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// => Sum(6)</span></code></pre>\n      </div>\n<p>研究明白了加法的知识，不妨继续扩展一下小学数学知识：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx">a <span class="token operator">*</span> <span class="token punctuation">(</span>b <span class="token operator">*</span> c<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> b<span class="token punctuation">)</span> <span class="token operator">*</span>  c                   <span class="token comment">// \b乘法</span>\n<span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>       <span class="token comment">// 最大值</span>\n<span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>       <span class="token comment">// 最小值</span></code></pre>\n      </div>\n<p>相信根据<code class="gatsby-code-text">Sum</code>的案例，大家可以很轻松的写出很多类似的案例：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token comment">// 对任意的 bool 类型求 并(&amp;&amp;) 的结果</span>\n<span class="token keyword">const</span> <span class="token function-variable function">All</span> <span class="token operator">=</span> x <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    x<span class="token punctuation">,</span>\n    concat<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">:</span> y <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">All</span><span class="token punctuation">(</span>x <span class="token operator">&amp;&amp;</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span>inspect<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token string">`All(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 对任意的自然数求 max(最大值) 的结果</span>\n<span class="token keyword">const</span> <span class="token function-variable function">Max</span> <span class="token operator">=</span> x <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    x<span class="token punctuation">,</span>\n    concat<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">:</span> y <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">Max</span><span class="token punctuation">(</span>x <span class="token operator">></span> y <span class="token operator">?</span> x <span class="token punctuation">:</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span>inspect<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token string">`Max(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<blockquote>\n<p><strong>Note:</strong>类似于<code class="gatsby-code-text">functor</code>为一个<code class="gatsby-code-text">mappable</code>的数据类型，也可以类比半群就是一个<code class="gatsby-code-text">concatible</code>的数据类型，这样更好理解</p>\n</blockquote>\n<blockquote>\n<p>在 <a href="https://github.com/fantasyland/fantasy-land#semigroup">Fantasy Land Spec</a>中半群的结合方法也确实就叫concat)</p>\n</blockquote>\n<h3 id="加法是自然之道"><a href="#%E5%8A%A0%E6%B3%95%E6%98%AF%E8%87%AA%E7%84%B6%E4%B9%8B%E9%81%93" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>加法是自然之道</h3>\n<p>让我们再次探索一下小学数学知识：我们已经不断的验证了加法满足结合律，那么减法呢？减法满足结合律吗？</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment">// => 2</span>\n<span class="token number">5</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// => 4</span></code></pre>\n      </div>\n<p>这就是小学数学老师教的，做加法的时候，可以随意的添加和删除括号；而减法绝不能这样操作！</p>\n<p><strong>为什么？因为减法不满足结合律！</strong></p>\n<p>我们经常说道法自然，那么自然之道是什么？我认为自然是在做加法，老子道德经说“道生一，一生二，二生三，三生万物”；反映在数学上就是，假如我们创造一个数字<code class="gatsby-code-text">1</code>,然后有一个计算法则<code class="gatsby-code-text">+</code>,则我们可以很轻松很直觉的创造出所有的自然数！</p>\n<p>我们平常写代码的时候，可能刚开始设计的很巧妙，思路很清晰；但是随着业务的迭代(<del>产品经理的频繁变换</del>),代码不可避免会变得很多很多；\n贴一个经常吐槽Java(<del>假装很懂Java</del>)的一句话：Java的问题不是太啰嗦而是OOP使得类的数目很多。我想不管使用什么语言，代码量增多迟早会面对，而是要积极面对。面向对象原则和GOF设计模式已经在告诉我们如何维护拓展这些类代码：宁可增加新的类代码，尽量不要去修改那些经过测试已经成熟稳定的代码；也就是说不要去做修改替换，而是要做增加！这种增加如同树的自然成长，是一种干生枝，枝生叶的繁茂。</p>\n<p>切换到FP的理念中，我们听了太多的<a href="">纯函数</a>,<a href="">不可变数据</a>，<a href="">避免共享状态</a>等等，细想一下不管是函数也好，数据也好，他们有一个共同点就是在原来的基础上添加(<code class="gatsby-code-text">append/concat</code>)而是修改原来的！</p>\n<h3 id="幺元"><a href="#%E5%B9%BA%E5%85%83" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>幺元</h3>\n<p>现在我们来看一个特殊的数字<strong>0</strong>，在加法中<code class="gatsby-code-text">0</code>是一个很特殊的存在，特殊在哪里呢？</p>\n<ul>\n<li>任何自然数和<code class="gatsby-code-text">0</code>相加都等于它本身：<code class="gatsby-code-text">1 + 0 = 1</code></li>\n<li><code class="gatsby-code-text">0</code>可以添加到加法运算中的任意位置，而不影响计算结果：<code class="gatsby-code-text">1 + 2 + 3 = 0 + 1 + 2 + 3 = 1 + 2 + 0 + 3</code></li>\n</ul>\n<p>仔细思考一下，<code class="gatsby-code-text">0</code>存在的意义在哪里呢？实际上0是数学中对于自然世界中<code class="gatsby-code-text">空</code>的抽象。</p>\n<p>在代码的世界中，<code class="gatsby-code-text">空</code>是一个很常见的定义，比如：空字符串<code class="gatsby-code-text">&#39;&#39;</code>,空数组<code class="gatsby-code-text">[]</code>,这些空值通常用来实现初始化的值，而这种’空值’(和任何元素结合都不会影响结果的单位元)在函数式编程中被称为<code class="gatsby-code-text">幺元(Identity Element)或者单位元</code>。用数组的例子来看就是：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span></code></pre>\n      </div>\n<blockquote>\n<p>加号表示组合的意思，等号表示“值”相等。 </p>\n</blockquote>\n<p>结合半群<code class="gatsby-code-text">Sum</code>来看,很明显加法操作的幺元为<code class="gatsby-code-text">Sum(0)</code>：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx">Sum<span class="token punctuation">.</span><span class="token function-variable function">empty</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> res1 <span class="token operator">=</span> Sum<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// => Sum(3)</span>\n<span class="token keyword">const</span> res2 <span class="token operator">=</span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Sum<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// => Sum(3)</span></code></pre>\n      </div>\n<p>同样对于All的幺元则为：<code class="gatsby-code-text">All.empty = () =&gt; All(true)</code>,true和任何boolean值结合都不会影响原来的值。</p>\n<p>除了<code class="gatsby-code-text">Sum(0)</code>,<code class="gatsby-code-text">All(true)</code>,我们可以在代码中找到很多其他的幺元的例子，比如：<code class="gatsby-code-text">&#39;&#39;</code>,<code class="gatsby-code-text">[]</code>,<code class="gatsby-code-text">{}</code>。</p>\n<p>下面我们看一个稍微特殊一点的数字：无穷大(∞)。在加法中，我们不是找到了0作为幺元吗？无穷大看上去是空数字的反面，但是它也是一个单位元，但是如何描述无穷大是数字的空元素呢？答案是使用min操作,看下面伪代码：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-text"><code class="gatsby-code-text">min(∞, x) = x;  \nmin(x, ∞) = x;</code></pre>\n      </div>\n<p>对于求最小值的操作来说，在任何地方插入无穷大都不会影响计算结果，对吧！\n同样的负无穷大就是max操作的幺元；数字1就是乘法运算的幺元。现在看来多个‘空对象’是可以同时存在的，只是在不同操作下对于空的定义不同罢了。</p>\n<h4 id="单元函数"><a href="#%E5%8D%95%E5%85%83%E5%87%BD%E6%95%B0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>单元函数</h4>\n<p>函数式编程的核心在于函数组合，那么对于函数组合这个操作来说，它的幺元是什么呢？答案是一个很简单的单元函数(identity function):<code class="gatsby-code-text">x =&gt;x</code>,通常被简称为id。</p>\n<p>单元函数是一个对函数输入没有做任何操作直接返回的函数(<code class="gatsby-code-text">id(1) === 1</code>,<code class="gatsby-code-text">id(x) === x</code>)，很明显这个函数和任意的函数进行组合，或者插入到函数组合的任意位置，都不影响函数组合的结果。</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> <span class="token function-variable function">compose</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>fns<span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">=></span> fns<span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> f<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">f</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>\n\n<span class="token function">compose</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> h<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">compose</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> h<span class="token punctuation">)</span>\n<span class="token function">compose</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> x<span class="token punctuation">,</span> h<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">compose</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> h<span class="token punctuation">)</span>\n<span class="token function">compose</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> g<span class="token punctuation">,</span> h<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">compose</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> h<span class="token punctuation">)</span></code></pre>\n      </div>\n<p>通过这种组合方式，我们可以看到单元函数是函数组合操作的幺元</p>\n<h3 id="广群，半群，幺半群"><a href="#%E5%B9%BF%E7%BE%A4%EF%BC%8C%E5%8D%8A%E7%BE%A4%EF%BC%8C%E5%B9%BA%E5%8D%8A%E7%BE%A4" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>广群，半群，幺半群</h3>\n<p>上面介绍了半群和幺元的概念，本质上来说是很简单的东西，平常代码中也会经常用到，只是没有特意的强化和准确的定义这个概念;下面继续介绍另一个简单的概念：广群</p>\n<h4 id="广群"><a href="#%E5%B9%BF%E7%BE%A4" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>广群</h4>\n<p>对于某非空集合<code class="gatsby-code-text">S</code>，若存在<code class="gatsby-code-text">S</code>上的二元运算<code class="gatsby-code-text">&quot;*&quot;</code>使得对于任意的<code class="gatsby-code-text">a,b∈S</code>,有<code class="gatsby-code-text">a*b∈S</code>（运算封闭），则称<code class="gatsby-code-text">{S,*}</code>为广群(Group)。</p>\n<p>广群只是定义一个集合，集合中有元素和操作，操作结果也属于这个集合，这样泛泛的集合称为广群。　</p>\n<p>如果广群再加上结合律约束，就会得到半群，因此半群是广群的子集，要求更苛刻些，而半群可以找到一个合适的<code class="gatsby-code-text">幺元</code>（identity element），则可以把该半群称为幺半群，也就是<strong><code class="gatsby-code-text">结合律</code>+<code class="gatsby-code-text">幺元</code>=<code class="gatsby-code-text">幺半群</code></strong>，所以，Monid对应的中文是幺半群。</p>\n<p>所以半群是广群的子集，而幺半群很明显是半群的子集。</p>\n<h3 id="总结"><a href="#%E6%80%BB%E7%BB%93" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>总结</h3>\n<p>这一节介绍的概念比较多，但是在我们完全理解了Functor的基础上，理解半群(<code class="gatsby-code-text">concatible</code>),幺元(<code class="gatsby-code-text">id</code>),幺半群(半群 + 幺元)就是很简单的概念；一个<code class="gatsby-code-text">monoid</code>是一个元素(也可称对象)的集合，<code class="gatsby-code-text">monoid</code>首先是一个集合，但是这个集合有一些约束条件，也就是说，是一个特殊的集合，满足结合律和幺元，这种元和其他元素结合时，并不会改变那些元素。</p>\n<p>下面的一章则会进入我们函数式编程进阶的核心内容了：<code class="gatsby-code-text">Monad</code>。我们使用一句经典名言，来做个引言：</p>\n<blockquote>\n<p>“A monad is just a monoid in the category of endofunctors. What’s the problem?”</p>\n</blockquote>',
frontmatter:{title:"加法是自然之道 - Monoid",img:"./img/2014-12-17.jpg",author:["Sylvenas"],excerpt:null,catalogue:null},fields:{date:"March 01, 2020",path:"blog/monad/2020-03-02-加法是自然之道.md",slug:"/blog/2020/03/02/加法是自然之道.html"}},allMarkdownRemark:{edges:[{node:{frontmatter:{title:"加法是自然之道 - Monoid"},fields:{slug:"/blog/2020/03/02/加法是自然之道.html"}}},{node:{frontmatter:{title:"俄罗斯套娃娃 - Monad"},fields:{slug:"/blog/2020/02/12/俄罗斯套娃娃.html"}}},{node:{frontmatter:{title:"纪念刘和珍君"},fields:{slug:"/blog/2020/02/07/记念刘和珍君.html"}}},{node:{frontmatter:{title:"应用函子 - Applicative"},fields:{slug:"/blog/2020/02/05/应用函子.html"}}},{node:{frontmatter:{title:"动物庄园"},fields:{slug:"/blog/2020/02/01/动物庄园.html"}}},{node:{frontmatter:{title:"薛定谔的 Maybe - IO"},fields:{slug:"/blog/2020/01/30/薛定谔的Maybe.html"}}},{node:{frontmatter:{title:"Abort-Controller"},fields:{slug:"/blog/2020/01/18/abort-controller.html"}}},{node:{frontmatter:{title:"Catch React Error"},fields:{slug:"/blog/2020/01/02/catch-react-error.html"}}},{node:{frontmatter:{title:"Node.js 集群"},fields:{slug:"/blog/2019/11/12/node-cluster.html"}}},{node:{frontmatter:{title:"黑珍珠号的诅咒 - Functor"},fields:{slug:"/blog/2019/09/10/黑珍珠号的诅咒.html"}}}]}},pathContext:{slug:"/blog/2020/03/02/加法是自然之道.html"}}}});