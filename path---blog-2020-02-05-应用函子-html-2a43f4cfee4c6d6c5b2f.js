webpackJsonp([68504083430238],{559:function(n,s){n.exports={data:{markdownRemark:{html:'<h3 id="加法运算"><a href="#%E5%8A%A0%E6%B3%95%E8%BF%90%E7%AE%97" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>加法运算</h3>\n<p>现在让我们回想一下第一章中我们反复介绍的<code class="gatsby-code-text">Functor</code>的核心思想，就是通过<code class="gatsby-code-text">map</code>，把一个函数应用到包裹的值上：<code class="gatsby-code-text">Box(1).map(x =&gt; x+1)</code>,通常我们都是把一个值装进Box中，然后不断的通过<code class="gatsby-code-text">map</code>变换其中的值，别忘了在函数式的思维中，<a href="%E6%83%B0%E6%80%A7%E5%80%BC">函数是一等公民</a>，我们完全可以先把一个函数包装进了Box中，然后在需要的时候在应用这个函数，举个例子说明：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> <span class="token function-variable function">plusOne</span> <span class="token operator">=</span> x <span class="token operator">=></span> x <span class="token operator">+</span> <span class="token number">1</span>\n\n<span class="token function">Box</span><span class="token punctuation">(</span>plusOne<span class="token punctuation">)</span> <span class="token comment">// => Box(x => x+1)</span></code></pre>\n      </div>\n<p>现在我们得到了一个<code class="gatsby-code-text">包裹着函数的Box</code>，可是我们怎么使用这个函数呢？毕竟平常的Functor<code class="gatsby-code-text">map</code>方法都是接收一个函数！</p>\n<p>不如继续回到函数<code class="gatsby-code-text">plusOne</code>上，我们需要一个数字，传递给<code class="gatsby-code-text">plusOne</code>，对吧！所以思路继续转换一下，我们怎么传递一个数据进去应用这个<code class="gatsby-code-text">plusOne</code>函数呢，答案非常简单，继续传递一个被包裹的值，然后<code class="gatsby-code-text">map</code>这个包裹着的函数不就可以啦!看代码：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> <span class="token function-variable function">Box</span> <span class="token operator">=</span> x <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    map<span class="token punctuation">:</span> f <span class="token operator">=></span> <span class="token function">Box</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    flod<span class="token punctuation">:</span> f <span class="token operator">=></span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    apply<span class="token punctuation">:</span> o <span class="token operator">=></span> o<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span>inspect<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token string">`Box(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token function">Box</span><span class="token punctuation">(</span>plusOne<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token function">Box</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// => Box(3)</span></code></pre>\n      </div>\n<p>看看Box神奇的新方法，首先被包裹的值是一个<code class="gatsby-code-text">函数x</code>，然后我们继续传递另一个<code class="gatsby-code-text">Box(2)</code>进去，不就可以使用<code class="gatsby-code-text">Box(2)</code>上的<code class="gatsby-code-text">map</code>方法调用<code class="gatsby-code-text">plusOne</code>函数了吗！</p>\n<blockquote>\n<p>这和<code class="gatsby-code-text">柯里化</code>,<code class="gatsby-code-text">偏应用</code>的思路非常类似，先传递部分参数(函数完全可以当成普通的参数传递)，然后继续传递部分参数，最后进行求值操作。</p>\n</blockquote>\n<p>现在重新审视一下我们<code class="gatsby-code-text">Box(plusOne)</code>,<code class="gatsby-code-text">Box(1)</code>,那么这个问题实际上可以归结为：把一个 <code class="gatsby-code-text">functor</code> 应用到另一个上<code class="gatsby-code-text">functor</code>上，而这也就是<code class="gatsby-code-text">Applicative Functor</code>(应用函子)最擅长的操作了,看一下示意图来描述应用函子的操作流程</p>\n<p><img src="https://p1.music.126.net/kfldU46LvUhUaY_QjP6LHw==/109951164712439705.png" alt="applicative functor"></p>\n<p>所以根据上面的讲解和实例我们可以得出一个结论：先把一个值<code class="gatsby-code-text">x</code>装进<code class="gatsby-code-text">Box</code>，然后<code class="gatsby-code-text">map</code>一个函数<code class="gatsby-code-text">f</code>(普通的Functor)和把函数<code class="gatsby-code-text">f</code>装进<code class="gatsby-code-text">Box</code>，然后<code class="gatsby-code-text">ap</code>一个已经已经装进<code class="gatsby-code-text">Box</code>的<code class="gatsby-code-text">x</code>(Applicative Functor)，是完全等价的！</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token constant">F</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">F</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ap</span><span class="token punctuation">(</span><span class="token constant">F</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token function">Box</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>plusOne<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">Box</span><span class="token punctuation">(</span>plusOne<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token function">Box</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// => Box(3)</span></code></pre>\n      </div>\n<blockquote>\n<p>根据<a href="https://github.com/fantasyland/fantasy-land#applicative">规范</a>,apply 方法后面我们会简写为<code class="gatsby-code-text">ap</code>!</p>\n</blockquote>\n<blockquote>\n<p>applicative functor 也是函数式编程中一大堆“故弄玄虚”的概念中唯一的比较“名副其实”的了，想想<code class="gatsby-code-text">Functor(mappable)</code>,<code class="gatsby-code-text">Semigroup(concatible)</code></p>\n</blockquote>\n<h3 id="柯里化与应用函子"><a href="#%E6%9F%AF%E9%87%8C%E5%8C%96%E4%B8%8E%E5%BA%94%E7%94%A8%E5%87%BD%E5%AD%90" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>柯里化与应用函子</h3>\n<p>继续往前走一步，思考一下，如果现在有两个被包裹的值，怎么把一个函数应用上去呢？举个例子：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> x <span class="token operator">=></span> y <span class="token operator">=></span> x <span class="token operator">+</span> y\n\n<span class="token function">add</span><span class="token punctuation">(</span><span class="token function">Box</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Box</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>现在我们没办法直接把<code class="gatsby-code-text">Box(1)</code>和<code class="gatsby-code-text">Box(2)</code>相加，他们都在盒子里;可是我们的需求不就是把<code class="gatsby-code-text">Box(1)</code>,<code class="gatsby-code-text">Box(2)</code>,<code class="gatsby-code-text">add</code> 三者互相应用一下吗？不管怎么说，我们先把<code class="gatsby-code-text">add</code>函数包装进Box中,然后得到了一个应用函子<code class="gatsby-code-text">Box(add)</code>,不就可以继续ap了吗</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token function">Box</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ap</span><span class="token punctuation">(</span><span class="token function">Box</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// => Box(y => 1 +y) (得到一个新的应用函子)</span>\n<span class="token function">Box</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ap</span><span class="token punctuation">(</span><span class="token function">Box</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ap</span><span class="token punctuation">(</span><span class="token function">Box</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// => Box(3) (得到最终的结果)</span></code></pre>\n      </div>\n<p>上面的例子，我们可以得出一个结论，一个柯里化的函数，有几个参数，我们就可以ap几次(这和柯里化函数是一样的，毕竟有几个函数就要调用几次)！</p>\n<p>再次套用一下上面的公式：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token constant">F</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">F</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ap</span><span class="token punctuation">(</span><span class="token constant">F</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token function">Box</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">Box</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ap</span><span class="token punctuation">(</span><span class="token function">Box</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token function">Box</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ap</span><span class="token punctuation">(</span><span class="token function">Box</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">Box</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ap</span><span class="token punctuation">(</span><span class="token function">Box</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ap</span><span class="token punctuation">(</span><span class="token function">Box</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h3 id="应用函子的实际应用"><a href="#%E5%BA%94%E7%94%A8%E5%87%BD%E5%AD%90%E7%9A%84%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>应用函子的实际应用</h3>\n<p>表单校验是我们日常开发中非常常见的一个模块，举个具体的例子，假如我们有一个用户注册的表单，我们需要校验<code class="gatsby-code-text">用户名</code>，<code class="gatsby-code-text">密码</code>，与<code class="gatsby-code-text">邮箱</code>三个字段，常见的代码如下：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> <span class="token function-variable function">checkUserInfo</span> <span class="token operator">=</span> user <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> pw<span class="token punctuation">,</span> phone <span class="token punctuation">}</span> <span class="token operator">=</span> user\n    <span class="token keyword">const</span> errInfo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/^(0|[1-9][0-9]*)$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        errInfo<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">\'用户名不能是数字\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>pw<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        errInfo<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">\'密码长度必须大于6位\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/^1[3|4|5|7|8][0-9]{9}$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        errInfo<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">\'手机号码不正确\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>errInfo<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> errInfo \n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token string">\'success\'</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> <span class="token string">\'12\'</span><span class="token punctuation">,</span>\n    pw<span class="token punctuation">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n    phone<span class="token punctuation">:</span> <span class="token string">\'15381048021\'</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> checkRes <span class="token operator">=</span> <span class="token function">checkUserInfo</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>checkRes<span class="token punctuation">)</span>  <span class="token comment">// => [\'用户名不能是数字\', \'手机号码不正确\']</span></code></pre>\n      </div>\n<p>这个代码自然没有问题，但是，假如我们后续要继续添加需要校验的字段的话，<code class="gatsby-code-text">checkUserInfo</code>函数毫无疑问会越来越大，并且如果我们要修改某一个字段的校验规则的话，整个<code class="gatsby-code-text">checkUserInfo</code>函数可能会收到影响，毫无疑问<code class="gatsby-code-text">checkUserInfo</code>的整个单元测试要作出修改，现在按照函数式的思维(函数组合)来拆分一下<code class="gatsby-code-text">checkUserInfo</code>函数：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> <span class="token function-variable function">checkName</span> <span class="token operator">=</span> name <span class="token operator">=></span> <span class="token punctuation">{</span>\n   <span class="token keyword">return</span> <span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span>$<span class="token operator">/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">checkPW</span> <span class="token operator">=</span> pw <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> pw<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">6</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">checkPhone</span> <span class="token operator">=</span> phone <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">/</span><span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token operator">|</span><span class="token number">4</span><span class="token operator">|</span><span class="token number">5</span><span class="token operator">|</span><span class="token number">7</span><span class="token operator">|</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">}</span>$<span class="token operator">/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>现在我们拆分成对三个字段分别校验的函数<code class="gatsby-code-text">checkName</code>,<code class="gatsby-code-text">checkPW</code>,<code class="gatsby-code-text">checkPhone</code>,每个函数返回的结果要么是<code class="gatsby-code-text">true</code>，要么是<code class="gatsby-code-text">false</code>，这个和我们第一章介绍的<code class="gatsby-code-text">Either</code>(Left or Right)何其相似,只不过我们现在面临的情况是要么校验通过，要么检验不通过，所以我们完全可以仿照<code class="gatsby-code-text">Either Functor</code> 写<code class="gatsby-code-text">Validation Functor</code>，它也拥有两个分支：<code class="gatsby-code-text">Success / Failure</code>：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> <span class="token function-variable function">Success</span> <span class="token operator">=</span> x <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    x<span class="token punctuation">,</span>\n    map<span class="token punctuation">:</span> f <span class="token operator">=></span> <span class="token function">Success</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    fold<span class="token punctuation">:</span> <span class="token punctuation">(</span>f<span class="token punctuation">,</span> g<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    ap<span class="token punctuation">:</span> o <span class="token operator">=></span> o<span class="token punctuation">.</span>isFailure <span class="token operator">?</span> o <span class="token punctuation">:</span> o<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    isSuccess<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    isFailure<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span>inspect<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token string">`Success(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Failure</span> <span class="token operator">=</span> x <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    x<span class="token punctuation">,</span>\n    map<span class="token punctuation">:</span> f <span class="token operator">=></span> <span class="token function">Failure</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    ap<span class="token punctuation">:</span> o <span class="token operator">=></span> o<span class="token punctuation">.</span>isFailure <span class="token operator">?</span> <span class="token function">Failure</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">Failure</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    fold<span class="token punctuation">:</span> <span class="token punctuation">(</span>f<span class="token punctuation">,</span> g<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    isSuccess<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    isFailure<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span>inspect<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token string">`Failure(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>相对比与<code class="gatsby-code-text">Either</code>，新增了<code class="gatsby-code-text">x</code>属性和<code class="gatsby-code-text">ap</code>方法，其他的属性完全类似，就不做解释了；新增<code class="gatsby-code-text">x</code>属性的原因在于需要记录表单校验的错误信息，这个很好理解；</p>\n<p>我们仔细看一下新增的<code class="gatsby-code-text">ap</code>方法，先看<code class="gatsby-code-text">Sucsess</code>分支的ap：<code class="gatsby-code-text">o =&gt; o.isFailure ? o : o.map(x)</code>,毫无疑问<code class="gatsby-code-text">ap</code>方法接收另一个<code class="gatsby-code-text">functor</code>，如果另一个<code class="gatsby-code-text">functor</code>是<code class="gatsby-code-text">Failure</code>的实例，则不需要<code class="gatsby-code-text">Success</code>处理直接返回，如果不是<code class="gatsby-code-text">Failure</code>，则和平常<code class="gatsby-code-text">applicative functor</code>一样，对<code class="gatsby-code-text">o</code>作为主体进行<code class="gatsby-code-text">map</code>;</p>\n<p>再看<code class="gatsby-code-text">Failure</code>分支上的ap：<code class="gatsby-code-text">o =&gt; o.isFailure ? Failure(x.concat(o.x)) : Failure(x)</code>,如果是<code class="gatsby-code-text">Failure</code>的实例，则进行一个类似于<code class="gatsby-code-text">semigroup</code>的<code class="gatsby-code-text">concat</code>操作，实际上就是为了累加错误信息，而如果不是<code class="gatsby-code-text">Failure</code>的实例则直接返回原本已经记录的错误信息。</p>\n<p>做好了前期的准备工作，我们就可以大刀阔斧的修改<code class="gatsby-code-text">checkUserInfo</code>函数了：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> <span class="token function-variable function">success</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">\'success\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">checkUserInfo</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> pw<span class="token punctuation">,</span> phone <span class="token punctuation">}</span> <span class="token operator">=</span> user\n    <span class="token comment">// 3 是因为我们需要 `ap` 3 次。</span>\n    <span class="token keyword">let</span> returnSuccess <span class="token operator">=</span> <span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">curryN</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> success<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token function">Success</span><span class="token punctuation">(</span>returnSuccess<span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">ap</span><span class="token punctuation">(</span><span class="token function">checkName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">ap</span><span class="token punctuation">(</span><span class="token function">checkPW</span><span class="token punctuation">(</span>pw<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">ap</span><span class="token punctuation">(</span><span class="token function">checkPhone</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> checkRes <span class="token operator">=</span> <span class="token function">checkUserInfo</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>checkRes<span class="token punctuation">)</span> <span class="token comment">// => Failure(用户名不能是数字,手机号码不正确)</span></code></pre>\n      </div>\n<p>上面代码中对<code class="gatsby-code-text">success</code>函数执行<code class="gatsby-code-text">curryN(3, success)</code>的操作，就是为了后面可以<a href="/blog/2020/02/05/%E5%BA%94%E7%94%A8%E5%87%BD%E5%AD%90.html#%E6%9F%AF%E9%87%8C%E5%8C%96%E4%B8%8E%E5%BA%94%E7%94%A8%E5%87%BD%E5%AD%90">连续的ap三次</a>。</p>\n<blockquote>\n<p>此处需要指出的是<code class="gatsby-code-text">applicative functor</code>更擅长的是处理并行问题的能力，<code class="gatsby-code-text">checkName</code>，<code class="gatsby-code-text">checkPW</code>，<code class="gatsby-code-text">checkPhone</code>函数都是同步函数，假如说这三个函数都是异步的，那么实际上这三个请求‘几乎会同时’发送出去，别着急，后面的章节我们会讨论异步的世界，现在只要把理论和概念理解清楚就OK！</p>\n</blockquote>\n<h3 id="applicative的定理"><a href="#applicative%E7%9A%84%E5%AE%9A%E7%90%86" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>applicative的定理</h3>\n<h4 id="同一律（identity）"><a href="#%E5%90%8C%E4%B8%80%E5%BE%8B%EF%BC%88identity%EF%BC%89" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>同一律（identity）</h4>\n<p>完全类似于functor的同一律完全类似，先把<code class="gatsby-code-text">id</code>函数包装进Applicative Functor中，然后<code class="gatsby-code-text">apply</code>一个<code class="gatsby-code-text">Box(1)</code>和<code class="gatsby-code-text">Box(1).map(id)</code>的结果是一样。</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> <span class="token function-variable function">id</span> <span class="token operator">=</span> x <span class="token operator">=></span> x\n\n<span class="token constant">A</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ap</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">A</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">A</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n\n<span class="token comment">// i.e.</span>\n<span class="token function">Box</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ap</span><span class="token punctuation">(</span><span class="token function">Box</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">Box</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">Box</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h4 id="同态（homomorphism）"><a href="#%E5%90%8C%E6%80%81%EF%BC%88homomorphism%EF%BC%89" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>同态（homomorphism）</h4>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token constant">A</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ap</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">A</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// i.e.</span>\n<span class="token function">Box</span><span class="token punctuation">(</span>plusOne<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ap</span><span class="token punctuation">(</span><span class="token function">Box</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">Box</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>plusOne<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">Box</span><span class="token punctuation">(</span><span class="token function">plusOne</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">Box</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h4 id="互换（interchange）"><a href="#%E4%BA%92%E6%8D%A2%EF%BC%88interchange%EF%BC%89" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>互换（interchange）</h4>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token constant">A</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ap</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">A</span><span class="token punctuation">(</span>f <span class="token operator">=></span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ap</span><span class="token punctuation">(</span><span class="token function">Box</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// i.e.</span>\n<span class="token function">Box</span><span class="token punctuation">(</span>plusOne<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ap</span><span class="token punctuation">(</span><span class="token function">Box</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">Box</span><span class="token punctuation">(</span>f <span class="token operator">=></span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ap</span><span class="token punctuation">(</span><span class="token function">Box</span><span class="token punctuation">(</span>plusOne<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">Box</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h4 id="applicative和functor的区别和联系"><a href="#applicative%E5%92%8Cfunctor%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>applicative和functor的区别和联系</h4>\n<p>根据applicative的同一律和同态，两条特性，我们可以得出一个结论，假如一个盒子(Box),实现了<code class="gatsby-code-text">ap</code>方法，那么我们一定可以利用<code class="gatsby-code-text">ap</code>方法推导出一个<code class="gatsby-code-text">map</code>方法，如果拥有了<code class="gatsby-code-text">map</code>方法，那它就是一个<code class="gatsby-code-text">functor</code>,所以我们也可以认为<code class="gatsby-code-text">applicative</code>是<code class="gatsby-code-text">functor</code>的拓展，比<code class="gatsby-code-text">functor</code>更强大。</p>\n<p>那么强大在何处呢? <code class="gatsby-code-text">functor</code>只能映射一个接收单个参数的函数(i.e., <code class="gatsby-code-text">x=&gt;y</code>),如果我们想把接收多个参数的函数(i.e., <code class="gatsby-code-text">x =&gt; y =&gt; z</code>)应用到多个值上，则是applicative的舞台了，\n想想<code class="gatsby-code-text">checkUserInfo</code>的例子。</p>\n<p>上面是实际应用中的对比，从抽象的数学层面来对比：</p>\n<ul>\n<li>functor: 应用一个函数到包裹的值:<code class="gatsby-code-text">Box(1).map(x =&gt; x+1)</code>.</li>\n<li>applicative: 应用一个包裹的函数到包裹的值:<code class="gatsby-code-text">Box(x =&gt; x+1).ap(Box(1))</code>.</li>\n</ul>\n<p><img src="https://p1.music.126.net/qnIolKU9yLB9tH7onLbj7w==/109951164719087429.png" alt="applicative vs functor"></p>\n<p>参考资料与引用文章：<br>\n[1]: <a href="https://medium.com/axiomzenteam/functor-applicative-and-why-8a08f1048d3d">functor-applicative-and-why?</a><br>\n[2]: <a href="https://stackoverflow.com/questions/46752031/what-is-my-applicative-functor-not-working-with-ramdas-ap">applicative and list</a><br>\n[3]: <a href="http://jiyinyiyong.github.io/monads-in-pictures/">Monad in Pictures</a><br>\n[4]:《JavaScript函数式编程》   </p>',
frontmatter:{title:"应用函子 - Applicative",img:"./img/2015-06-07.jpeg",author:["Sylvenas"],excerpt:null,catalogue:null},fields:{date:"February 04, 2020",path:"blog/monad/2020-02-05-应用函子.md",slug:"/blog/2020/02/05/应用函子.html"}},allMarkdownRemark:{edges:[{node:{frontmatter:{title:"被讨厌的勇气"},fields:{slug:"/blog/2020/05/14/被讨厌的勇气.html"}}},{node:{frontmatter:{title:"自然变换 - Natural Transformation"},fields:{slug:"/blog/2020/05/02/自然变换.html"}}},{node:{frontmatter:{title:"遍历与队列 - Traversable"},fields:{slug:"/blog/2020/04/25/遍历与队列.html"}}},{node:{frontmatter:{title:"加法是自然之道 - Monoid"},fields:{slug:"/blog/2020/03/02/加法是自然之道.html"}}},{node:{frontmatter:{title:"俄罗斯套娃娃 - Monad"},fields:{slug:"/blog/2020/02/12/俄罗斯套娃娃.html"}}},{node:{frontmatter:{title:"纪念刘和珍君"},fields:{slug:"/blog/2020/02/07/记念刘和珍君.html"}}},{node:{frontmatter:{title:"应用函子 - Applicative"},fields:{slug:"/blog/2020/02/05/应用函子.html"}}},{node:{frontmatter:{title:"动物庄园"},fields:{slug:"/blog/2020/02/01/动物庄园.html"}}},{node:{frontmatter:{title:"薛定谔的 Maybe - IO"},fields:{slug:"/blog/2020/01/30/薛定谔的Maybe.html"}}},{node:{frontmatter:{title:"Abort-Controller"},fields:{slug:"/blog/2020/01/18/abort-controller.html"}}}]}},pathContext:{slug:"/blog/2020/02/05/应用函子.html"}}}});