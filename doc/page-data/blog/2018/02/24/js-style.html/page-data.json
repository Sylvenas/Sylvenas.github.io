{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/2018/02/24/js-style.html","result":{"data":{"markdownRemark":{"html":"<h3>前端代码规范</h3>\n<h4>代码格式化</h4>\n<ul>\n<li>Prettier</li>\n</ul>\n<p><a href=\"https://github.com/prettier/prettier\">Prettier</a> 支持多种语言，它的一大特点就是能够支持命令行、API 等多种形式调用，可以让团队保持代码风格一致。包括 React 在内的很多项目已经开始使用了。</p>\n<p>Prettier支持列表如下：</p>\n<ul>\n<li>JavaScript,TypeScript,EcmaScript</li>\n<li>JSX</li>\n<li>CSS,SASS,LESS</li>\n<li>JSON</li>\n<li>GraphQL</li>\n</ul>\n<p>查看完整的<a href=\"https://www.slideshare.net/ReactLondon2017/javascript-code-formatting-with-prettier-by-christopher-chedeau\">格式化文档示例</a></p>\n<p>Prettier使用方法：</p>\n<ul>\n<li>1.编辑器中安装插件\n现在主流的编辑器都有相应的插件了</li>\n<li>2.在git提交代码的时候自动格式化\n利用git的hooks机制，在commit时自动调用Pretter。这样子可以避免无法安装编辑器插件、安装了但是未提交代码前利用其格式化代码等各种情况的发生。\n具体操作时，还需要 <a href=\"https://www.npmjs.com/package/husky\">Huksy</a>、<a href=\"https://www.npmjs.com/package/lint-staged\">lint-staged</a>这两个工具。</li>\n</ul>\n<p>EditorConfig：\n<a href=\"https://github.com/editorconfig/\">EditorConfig</a>不是什么软件，而是一个名称为.editorconfig的自定义文件。该文件用来定义项目的编码规范，编辑器的行为会与.editorconfig 文件中定义的一致，并且其优先级比编辑器自身的设置要高</p>\n<ul>\n<li>在项目根创建一个名为<code class=\"language-text\">.editorconfig</code> 的文件。该文件的内容定义该项目的编码规范。EditorConfig 支持的编码规范在后文会有详细的介绍。</li>\n<li>安装与编辑器对应的 EditorConfig 插件。</li>\n</ul>\n<p>其工作原理是：当你在编码时，EditorConfig 插件会去查找当前编辑文件的所在文件夹或其上级文件夹中是否有 .editorconfig 文件。如果有，则编辑器的行为会与 .editorconfig 文件中定义的一致，并且其优先级高于编辑器自身的设置。</p>\n<h4>ESLint</h4>\n<p>JavaScript 是一个动态的弱类型语言，在开发中比较容易出错。因为没有编译程序，为了寻找 JavaScript 代码错误通常需要在执行过程中不断调试。像 ESLint 这样的可以让程序员在编码的过程中发现问题而不是在执行的过程中。</p>\n<p><a href=\"http://eslint.cn/\">ESLint</a> 的初衷是为了让程序员可以创建自己的检测规则。ESLint 的所有规则都被设计成可插入的。ESLint 的默认规则与其他的插件并没有什么区别，规则本身和测试可以依赖于同样的模式。为了便于人们使用，ESLint 内置了一些规则，当然，你可以在使用过程中自定义规则。</p>\n<p>运行 <code class=\"language-text\">eslint --init</code> 之后,<code class=\"language-text\">.eslintrc</code> 文件会在你的文件夹中自动创建。你可以在<code class=\"language-text\">.eslintrc</code> 文件中看到许多像这样的规则：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">modules<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"browser\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"es6\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint:recommended\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"semi\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"always\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"quotes\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"single\"</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">\"env\"</code>表示你的脚本将会运行在什么环境中或者采用何种模块化方案和使用的ES版本。</p>\n<p><code class=\"language-text\">\"extends\": \"eslint:recommended\"</code>,表示启用默认的ESLint中设置的<a href=\"http://eslint.cn/docs/rules\">规则</a>,其中打✅的部分(默认的规则也可以自定义并关闭)。</p>\n<p><code class=\"language-text\">\"semi\"</code>和<code class=\"language-text\">\"quotes\"</code>是ESLint中的具体的<a href=\"http://eslint.cn/docs/rules\">规则</a>,第一个值是错误级别，可以是<code class=\"language-text\">off/0</code>,<code class=\"language-text\">warn/1</code>,<code class=\"language-text\">error/2</code>分别表示关闭该规则，警告(不会影响代码运行),错误并停止代码运行。</p>\n<p><strong>ESLint也可以在webpack中使用</strong></p>\n<ul>\n<li>安装ESLint的依赖</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install  --save-dev eslint eslint-loader</code></pre></div>\n<ul>\n<li>在webpack.config.js添加loader(一定要在babel-loader之后使用eslint-loader,防止eslint检查之后的代码被babel转码之后，不合法),</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        enforce<span class=\"token operator\">:</span> <span class=\"token string\">\"pre\"</span><span class=\"token punctuation\">,</span>\n        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.js$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        exclude<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">node_modules</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        loader<span class=\"token operator\">:</span> <span class=\"token string\">\"eslint-loader\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.js$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        exclude<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">node_modules</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        loader<span class=\"token operator\">:</span> <span class=\"token string\">\"babel-loader\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>在根目录下新建<code class=\"language-text\">.eslintrc</code>文件，并添加各种规则，即可</li>\n</ul>\n<p>ESLint可以在很多种打包工具中使用，具体的文档请查看<a href=\"http://eslint.cn/docs/user-guide/integrations\">官方文档</a></p>\n<h4>前端代码</h4>\n<ul>\n<li><a href=\"https://github.com/sivan/javascript-style-guide/blob/master/es5/README.md\">Airbnb JavaScript Style Guide(cn)</a></li>\n<li><a href=\"https://github.com/airbnb/javascript\">Airbnb(en)</a></li>\n<li><a href=\"https://github.com/google/eslint-config-google\">google(eslint版本)</a></li>\n<li><a href=\"http://alloyteam.github.io/CodeGuide/\">腾讯</a></li>\n</ul>","excerpt":"前端代码规范 代码格式化 Prettier Prettier 支持多种语言，它的一大特点就是能够支持命令行、API 等多种形式调用，可以让团队保持代码风格一致。包括 React 在内的很多项目已经开始使用了。 Prettier支持列表如下： JavaScript,TypeScript,EcmaScript JSX CSS,SASS,LESS JSON GraphQL 查看完整的格式化文档示例 Prettier使用方法： 1.编辑器中安装插件\n现在主流的编辑器都有相应的插件了 2.在git…","fields":{"slug":"/blog/2018/02/24/js-style.html","date":"2018-02-23T16:00:00.000Z"},"frontmatter":{"title":"前端代码规范","img":"./img/2018-02-24.jpeg","author":["Sylvenas"],"categories":"JavaScript"}}},"pageContext":{"slug":"/blog/2018/02/24/js-style.html"}},"staticQueryHashes":[]}