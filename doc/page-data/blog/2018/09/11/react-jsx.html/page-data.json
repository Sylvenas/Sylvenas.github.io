{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/2018/09/11/react-jsx.html","result":{"data":{"markdownRemark":{"html":"<p>当你在查看React的例子时候，可能已经见过JSX了。但React代码也可以用纯JS代码来编写：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> rootElement <span class=\"token operator\">=</span>\n  React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>style<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>color<span class=\"token operator\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'The world is yours'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Say hello to my little friend'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>rootElement<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>有些人不喜欢将整个标记代码编写为函数调用。这可能是为什么Facebook上的人想出了JSX - 一个<code class=\"language-text\">React.createElement(type, config, …children)的语法糖方法</code>。 这就是为什么我们可以重构上面的例子：</p>\n<blockquote>\n<p>这也就是render不能return两个元素(或组件)的原因，因为一个函数绝不可能有两个返回值</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> RootElement <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>h1 style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>color<span class=\"token operator\">:</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>The world is yours<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Say hello to my little friend<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>RootElement<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在构建过程中Babel会将标记转换为纯JS代码。</p>\n<h3>React.createElement源码分析</h3>\n<p><a href=\"https://github.com/facebook/react/blob/master/packages/react/src/ReactElement.js\">源代码GitHub地址</a></p>\n<p>首先看<code class=\"language-text\">createElement</code>函数,有三个参数，第一个是组件的类型，第二个是配置项(除了ref和key都会被添加到props属性上))，第三个是children</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// type可以是react组件，也可以是span之类的标签字符串</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">,</span> children</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> propName<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Reserved names are extracted</span>\n  <span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> key <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> ref <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> source <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hasValidRef</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      ref <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hasValidKey</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      key <span class=\"token operator\">=</span> <span class=\"token string\">''</span> <span class=\"token operator\">+</span> config<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    self <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>__self <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> config<span class=\"token punctuation\">.</span>__self<span class=\"token punctuation\">;</span>\n    source <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>__source <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> config<span class=\"token punctuation\">.</span>__source<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Remaining properties are added to a new props object</span>\n    <span class=\"token comment\">// 把config传进去的对象的键值对添加到props中，注意剔除key和ref</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>propName <span class=\"token keyword\">in</span> config<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span> propName<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n        <span class=\"token operator\">!</span><span class=\"token constant\">RESERVED_PROPS</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>propName<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        props<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> config<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Children can be more than one argument, and those are transferred onto</span>\n  <span class=\"token comment\">// the newly allocated props object.</span>\n  <span class=\"token comment\">// children 可能是1个或者多个元素</span>\n  <span class=\"token comment\">// 如果是一个则直接把子元素赋值给children属性</span>\n  <span class=\"token comment\">// 如果是多个元素，则先把元素转换为数组，然后赋值给children属性</span>\n  <span class=\"token comment\">// 所以我们在使用this.props.children属性的时候，可能是一个对象，也可能一个数组，也可能是undefined</span>\n  <span class=\"token comment\">// 绝不能当成一个数组直接使用</span>\n  <span class=\"token keyword\">const</span> childrenLength <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>childrenLength <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    props<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> children<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>childrenLength <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> childArray <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span>childrenLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> childrenLength<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      childArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    props<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> childArray<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Resolve default props</span>\n  <span class=\"token comment\">// 把defaultProps添加到props中，注意检查时候已经包含对应的props了</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">&amp;&amp;</span> type<span class=\"token punctuation\">.</span>defaultProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> defaultProps <span class=\"token operator\">=</span> type<span class=\"token punctuation\">.</span>defaultProps<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>propName <span class=\"token keyword\">in</span> defaultProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        props<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> defaultProps<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">ReactElement</span><span class=\"token punctuation\">(</span>\n    type<span class=\"token punctuation\">,</span>\n    key<span class=\"token punctuation\">,</span>\n    ref<span class=\"token punctuation\">,</span>\n    self<span class=\"token punctuation\">,</span>\n    source<span class=\"token punctuation\">,</span>\n    ReactCurrentOwner<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">,</span>\n    props<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ReactElement</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">,</span> owner<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// This tag allows us to uniquely identify this as a React Element</span>\n    $$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> <span class=\"token constant\">REACT_ELEMENT_TYPE</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// Built-in properties that belong on the element</span>\n    type<span class=\"token operator\">:</span> type<span class=\"token punctuation\">,</span>\n    key<span class=\"token operator\">:</span> key<span class=\"token punctuation\">,</span>\n    ref<span class=\"token operator\">:</span> ref<span class=\"token punctuation\">,</span>\n    props<span class=\"token operator\">:</span> props<span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// Record the component responsible for creating this element.</span>\n    _owner<span class=\"token operator\">:</span> owner<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> element<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>从上面的代码也能看出来实际上，<code class=\"language-text\">React.createElement</code>方法就是返回了一个普通的对象，这个对象上主要有<code class=\"language-text\">type</code>,<code class=\"language-text\">key</code>,<code class=\"language-text\">ref</code>,<code class=\"language-text\">props</code>这几个关键属性。</p>\n<p>其中type为字符串的时候，表示为dom节点(JSX为小写开头)，type为函数那么就是自定义组件(JSX为大写开头)。</p>\n<p>而我们经常使用组件的方法：<code class=\"language-text\">&lt;Button>click me&lt;/Button></code>,实际上就是一个对组件实例化的过程，也就是创建了一个对象用来表述这个组件。</p>\n<p>这也就是React虚拟DOM的本质，即：用JavaScript对象来描述DOM结构和属性。</p>\n<h3>JSX和HTML的区别</h3>\n<ul>\n<li>属性 - JSX不是一种语言，仅仅是<code class=\"language-text\">createElement</code>函数的语法糖，也就是需要转义成JavaScript,由于这一点，有些属性无法使用，需要用className来代替class,htmlFor来代替for,因为class和for是JavaScript关键字</li>\n<li>样式 - 与HTML不同，样式属性期望传入Javascript对象，而不是CSS字符串，而且样式名的写法为驼峰式命名法</li>\n<li>根元素 - JSX将会被转义为JavaScript函数，而一个函数不可能有两个返回值，因此有多个同级元素必须把他们包裹在一个父元素中，如果不想无谓的增加一个div元素，也可以使用<code class=\"language-text\">React.Fragment</code>来包裹起来</li>\n<li>空格 - 看下面的代码：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>foo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  bar\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>bar<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>如果是浏览器直接把上面的代码当成HTML来解析的话，会显示<code class=\"language-text\">foo bar bar</code>,注意其中是有空格的，而如果是在JSX中写这段代码，则会显示<code class=\"language-text\">foobarbar</code>没有将空格计算在内，如果要加入空格，除非在JSX中显式的插入空格：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>foo<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span><span class=\"token string\">' '</span><span class=\"token punctuation\">}</span>\n  bar\n  <span class=\"token punctuation\">{</span><span class=\"token string\">' '</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>bar<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<ul>\n<li>布尔属性值 - 在JSX中如果某个属性没有赋值，则会默认认为该属性值为true,类似于HTML属性中的disabled，这也就意味着如果想把属性值设置为false，则需要显式的声明为false,这个地方通常会让人感到困惑，因为我们通常认为遗漏的属性值应该为false</li>\n<li>展开属性 - 向子元素传递数据时，不要按引用方式传递整个JavaScript对象，而是要使用对象的基本类型值，以方便校验，这种做法很常见，并且引发的bug更少，写出的组件更稳健且不容易出错。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>id <span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>foo<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<h3>solution</h3>\n<p>JSX违背了关注点分离的原则，然后事实情况是自从ajax流行以来，DOM高度依赖从JS中接收到的数据来展示信息，样式也同样存在同样的问题，CSS选择器完全遵循了DOM标记结构来选择元素，几乎不可能在不影响其他文件的前提下修改某个文件，而这就是耦合，大多数情况下所谓的关注点分离实质上是一种技术上的分离，本质上并没有分离，而是一种感觉分离的假象。</p>\n<p>React尝试更进一步，将模板放到其所属位置，即与逻辑在一起，也就是React建议你编写小型代码块的方式来组织应用，而这就是组件化开发。</p>\n<p>此外，React还建议将样式的逻辑也放在组件中，也就是<code class=\"language-text\">CSS in JS</code>，不过这个概念颇具争议，现在并没有大规模的推广开。</p>\n<p>React的最终目标是将创建组件所用到的技术都封装起来，来实现组建内高内聚，组件间低耦合的开发方式。</p>","excerpt":"当你在查看React的例子时候，可能已经见过JSX了。但React代码也可以用纯JS代码来编写： 有些人不喜欢将整个标记代码编写为函数调用。这可能是为什么Facebook上的人想出了JSX - 一个。 这就是为什么我们可以重构上面的例子： 这也就是render不能return两个元素(或组件)的原因，因为一个函数绝不可能有两个返回值 在构建过程中Babel会将标记转换为纯JS代码。 React.createElement源码分析 源代码GitHub…","fields":{"slug":"/blog/2018/09/11/react-jsx.html","date":"2018-09-10T16:00:00.000Z"},"frontmatter":{"title":"react jsx","img":"./img/2016-08-21.jpeg","author":["Sylvenas"],"categories":"React"}}},"pageContext":{"slug":"/blog/2018/09/11/react-jsx.html"}},"staticQueryHashes":[]}