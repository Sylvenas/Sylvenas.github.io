{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/2021/03/30/react-hooks.html","result":{"data":{"markdownRemark":{"html":"<p>React Hooks 主要用来解决两个问题，</p>\n<ul>\n<li>组件之间复用逻辑\n社区中普遍采用的 <a href=\"https://reactjs.org/docs/higher-order-components.html\">High-Order-Components</a>和<a href=\"https://reactjs.org/docs/render-props.html\">render props</a>,然而这两种方案分别会带来 “wrapper hell” 和代码难以理解/维护的问题。</li>\n</ul>\n<p><img src=\"https://d1.music.126.net/dmusic/obj/w5zCg8OAw6HDjzjDgMK_/8151104070/3cc4/6483/97d5/b4a91b516060489f7575f401ec69cd94.gif?download=20201012104934119.gif\" alt=\"wrapper hell\"></p>\n<ul>\n<li>函数式组件如何拥有状态\n函数式组件在 <code class=\"language-text\">Hooks API</code> 出现之前，只能充当“渲染组件”的角色，然而鉴于 <code class=\"language-text\">ES6 Class</code> 本身的问题，以及复杂的 <code class=\"language-text\">Class Component</code> 难以维护的问题，所以 <code class=\"language-text\">FC</code> 组件维护状态是一个迫切的需求。</li>\n</ul>\n<p>本篇文章主要介绍 <code class=\"language-text\">Hook</code> 的实现原理，我们不会从社区中广泛采用的“源码函数调用链路”出发，把整个 <code class=\"language-text\">Hook</code> 的创建/使用的源代码大概过一遍，就算理解了 <code class=\"language-text\">Hook</code> 的实现原理；我并不认同这种方案，主要因为只是读一遍代码，并没有自己实现，那么过不了多久，就完全抛之脑后了。所以本篇文章我们要自己实现一个 <code class=\"language-text\">Hook</code>。</p>\n<blockquote>\n<p>纸上得来终觉浅，绝知此事要躬行。</p>\n</blockquote>\n<h2>函数如何拥有状态</h2>\n<p>看一个简单的函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">computeCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>很明显这是个绝对的 “pure function”，任何时候，任何上下文调用该函数，都会返回固定结果：<code class=\"language-text\">1</code>。但是假设我们想在第一个调用该函数的时候返回 <code class=\"language-text\">1</code>，第二次返回 <code class=\"language-text\">2</code>，第三次返回 <code class=\"language-text\">3</code>，依次类推...</p>\n<p>换句话说，我们想在下一次调用的时候，依赖上一次的计算结果，如果仅仅使用 <code class=\"language-text\">computeCount</code> 函数，很明显这是不可能的，除非使用“外部变量”，</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> outCount<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">computeCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> outCount <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  outCount <span class=\"token operator\">=</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>同样的道理，在 React Function Component 中，如果不借助“外部变量”，我们就不可能实现组件重新渲染的时候，依据上一次 <code class=\"language-text\">state</code> 计算本次渲染的 <code class=\"language-text\">state</code>，所以必定存在着某个“外部变量”，在 React 中，这个外部变量就是 <code class=\"language-text\">fiber node</code>，不过本篇文章，我们不详细介绍 <code class=\"language-text\">state</code> 如何挂载到 <code class=\"language-text\">fiber node</code> 上了，仅仅使用简单的“外部变量”来保存 <code class=\"language-text\">state</code> 相关的信息。</p>\n<blockquote>\n<p>这里不得不提一句，在函数式组件中插入状态(需要记忆函数内的 state)的概念，不是那么“函数式”，违背了 <code class=\"language-text\">pure function</code> 的理念，纯函数不应该依赖上文，也不应该每次调用的结果不一致。</p>\n</blockquote>\n<h2>单向链表存储 hook list</h2>\n<p>另外我们根据 <a href=\"https://reactjs.org/docs/hooks-rules.html\">hooks-rules</a> 文档知道知道 Hook 可以在一个函数内使用多次，换句话说可以拥有多个 hook，并且不能在循环，条件判断中使用，只能在函数在顶层调用，设定规则的原因是 Hook 是使用<a href=\"https://dev.to/aspittel/thank-u-next-an-introduction-to-linked-lists-4pph\">链表数据结构</a>存储的。</p>\n<p>也就是，我们只要在“外部变量”中保存 <code class=\"language-text\">firstHook</code> 即可，第二个 hook 为 <code class=\"language-text\">firstHook.next</code>，第三个为 <code class=\"language-text\">firstHook.next.next</code>，以此类推，所以第一步，可以定义 hook 数据结构为：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">hook</span> <span class=\"token punctuation\">{</span>\n  memoizedState<span class=\"token operator\">:</span> any<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 保存当前 hook 的 state</span>\n  next<span class=\"token operator\">:</span> hook<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// next 指向下一个 hook</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在 React 中使用最多，也是最简单的 hook 就是 <code class=\"language-text\">useState</code>，下面我们已实现 <code class=\"language-text\">useState</code>，同时保持和 React 相同的 API 为目标，来逐步推进：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">TeamsInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>age<span class=\"token punctuation\">,</span> setAge<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'income'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Age: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">; Name: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在这个例子中，使用<strong>打印数据的方式替代 React 的渲染到页面的过程</strong>，毕竟这个不是关注的重点。</p>\n<p><code class=\"language-text\">useState</code> 接收一个值作为初始值，然后返回一个数组，数组第一项是，对应的 <code class=\"language-text\">state</code>，也是后面需要不断计算和更新的 <code class=\"language-text\">state</code>，数组第二项为一个函数 <code class=\"language-text\">setState</code>，用来修改 <code class=\"language-text\">state</code>。</p>\n<p><code class=\"language-text\">setState</code> 第一次调用的时候会创建第一个 <code class=\"language-text\">hook</code>，第二次调用的时候产生第二个 <code class=\"language-text\">hook</code>，并挂载到第一个 <code class=\"language-text\">hook</code> 的 <code class=\"language-text\">next</code> 上，创建 <code class=\"language-text\">hooks</code> 链表，所以我们需要两个变量：</p>\n<ul>\n<li><code class=\"language-text\">firstHook</code>存储创建的第一个 <code class=\"language-text\">hook</code>,</li>\n<li><code class=\"language-text\">lastHook</code>用来标记当前的最后一个 hook，在下一次新增 hook 的时候，可以快速的挂载到当前的 lastHook 的 next 上，这样可以避免了循环 firstHook 获取最后一个 hook，时间复杂度从 O<sup>n</sup> 降低到 O<sup>1</sup>。</li>\n</ul>\n<p>创建 <code class=\"language-text\">hook linked list</code> 的过程实现如下：</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> firstHook<span class=\"token operator\">:</span> hook <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> lastHook<span class=\"token operator\">:</span> hook <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">mountHookLinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> hook <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    memoizedState<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    next<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastHook <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    firstHook <span class=\"token operator\">=</span> lastHook <span class=\"token operator\">=</span> hook<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    lastHook <span class=\"token operator\">=</span> lastHook<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> hook<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token keyword\">return</span> lastHook<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>创建 hook 的过程肯定是放在 <code class=\"language-text\">useState</code> 函数内的,现在 <code class=\"language-text\">useState</code> 函数为：</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialState<span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>any<span class=\"token punctuation\">,</span> Function<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> hook <span class=\"token operator\">=</span> <span class=\"token function\">mountHookLinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  hook<span class=\"token punctuation\">.</span>memoizedState <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">;</span></span>\n  <span class=\"token comment\">// TODO:</span>\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">setState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>hook<span class=\"token punctuation\">.</span>memoizedState<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>使用目前自定义的 useState:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">TeamsInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>age<span class=\"token punctuation\">,</span> setAge<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'income'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Age: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">; Name: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>setAge<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>setAge<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">TeamsInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>firstHook<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">firstHook</code> 的数据结构如下,其中 <code class=\"language-text\">memoizedState</code> 存储着初始值，<code class=\"language-text\">next</code> 属性指向 <code class=\"language-text\">name hook</code>，数据结构如下所示；</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/8155886335/4bed/bd29/7ec7/01e925dbbb77714a3f615e51dfa61091.png\" alt=\"\"></p>\n<p>整个 <code class=\"language-text\">hook</code> 的链路如下：</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/8163787932/1456/1791/9c13/6eb05ae42e59c1daba85c5553fc0e3f2.png\" alt=\"\"></p>\n<h2>循环链表存储 updater queue</h2>\n<p>现在思考一下 <code class=\"language-text\">setState</code> 函数该如何实现，先观察一下 <code class=\"language-text\">React Hooks</code> 中 <code class=\"language-text\">setState</code> 的表现：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">+</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>第一次点击按钮之后，count 重新渲染为 2,计算过程为<code class=\"language-text\">0 + 1 = 1</code>，<code class=\"language-text\">1 * 2 = 2</code>：</p>\n<p>请注意一个非常关键的点，点击按钮调用了两次 <code class=\"language-text\">setCount</code>， 但是只触发了一次更新，可以推断<strong>setCount()函数调用本身并没有触发 count 的计算，count 的计算是发生在 React 再次渲染过程中调用 useState 重新计算得到的值</strong>，也就是说<code class=\"language-text\">setCount</code>仅仅是存储了 count 的计算方法，而不是直接触发了数据计算。</p>\n<blockquote>\n<p>这里不要混淆 class component 的合并 <code class=\"language-text\">this.setState</code>,请注意合并 <code class=\"language-text\">this.setState</code>，也并不是所有情况下都成立的，<code class=\"language-text\">this.setState((x)=> x + 1)</code>的调用方式就不会合并，读者可以自行做个简单的<a href=\"https://codesandbox.io/s/lucid-pike-88kx8?file=/src/App.js\">测试</a>。</p>\n</blockquote>\n<p>因为可以连续调用<code class=\"language-text\">setState</code>，所以需要一个<strong>队列</strong>来保存所有 state 的计算方法，这个队列应该挂载到 hook 对象上，这样就能区分每个 hook 的计算逻辑，因为 <code class=\"language-text\">setState</code> 可能会触发很多次，为了性能考虑该队列采用循环链表的方式存储：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">queue</span> <span class=\"token punctuation\">{</span>\n  last<span class=\"token operator\">:</span> updater<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最后一个updater</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">updater</span> <span class=\"token punctuation\">{</span>\n  action<span class=\"token operator\">:</span> Function <span class=\"token operator\">|</span> any<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 更新函数</span>\n  next<span class=\"token operator\">:</span> updater<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 下一个updater</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">dispatchAction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">queue<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> updater <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> action<span class=\"token punctuation\">,</span> next<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 将updater对象添加到循环链表中</span>\n  <span class=\"token keyword\">const</span> last <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>last<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>last <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 链表为空，将当前更新作为第一个，并保持循环</span>\n    updater<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> updater<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> first <span class=\"token operator\">=</span> last<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>first <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 在最新的updater对象后面插入新的updater对象</span>\n      updater<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> first<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    last<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> updater<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 将表头保持在最新的updater对象上</span>\n  queue<span class=\"token punctuation\">.</span>last <span class=\"token operator\">=</span> updater<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>现在只需要把 <code class=\"language-text\">queue</code> 挂载到 <code class=\"language-text\">hook</code> 上,并通过 <a href=\"https://sylvenas.github.io/blog/2017/11/23/FP6-Curry-and-PartialApplication.html\">bind</a> 方法闭包 <code class=\"language-text\">queue</code> 到 <code class=\"language-text\">dispatcher</code> 函数中,这样在添加计算函数的时候，可以添加到指定的 <code class=\"language-text\">queue</code> 中：</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialState<span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>any<span class=\"token punctuation\">,</span> Function<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> hook <span class=\"token operator\">=</span> <span class=\"token function\">mountHookLinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  hook<span class=\"token punctuation\">.</span>memoizedState <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hook<span class=\"token punctuation\">.</span>queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>    last<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    dispatch<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> dispatcher <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>dispatch <span class=\"token operator\">=</span> <span class=\"token function\">dispatchAction</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>hook<span class=\"token punctuation\">.</span>memoizedState<span class=\"token punctuation\">,</span> dispatcher<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>现在 <code class=\"language-text\">hook</code> 的创建以及 <code class=\"language-text\">updater</code> 队列的添加逻辑已经完成.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">TeamsInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>age<span class=\"token punctuation\">,</span> setAge<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'income'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Age: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">; Name: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>setAge<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>setAge<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">TeamsInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>firstHook<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>所有的数据都挂载到了 <code class=\"language-text\">firstHook</code> 上，所以我们打印了 <code class=\"language-text\">firstHook</code> 的数据结构如下：</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/8156078893/8aa1/8f81/21d3/62dc163e9c7c21b99c3fc9342e0ffe18.png\" alt=\"\"></p>\n<p>现在对着图片进行一次回顾，<code class=\"language-text\">firstHook</code> 的三个属性，<code class=\"language-text\">memoizedState</code>指向初始值 <code class=\"language-text\">18</code>，<code class=\"language-text\">queue</code> 存储了所有的数据计算 <code class=\"language-text\">updater</code> (注意 <code class=\"language-text\">queue</code> 是一个循环链表)，<code class=\"language-text\">next</code> 属性指向第二个 <code class=\"language-text\">hook</code>(name 相关)，第二个 <code class=\"language-text\">hook</code> 的数据结构和 <code class=\"language-text\">firstHook</code> 完类似。</p>\n<p>在添加数据更新队列之后，目前 <code class=\"language-text\">hook</code> 链表如下：</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/8163959419/4d6b/dab9/15e2/c0040ff64e63c55103a8b49e9fbe99f6.png\" alt=\"\"></p>\n<h2>计算最新的值</h2>\n<p>由于 hooks 在每次重新渲染的时候(re-call the function)都是一样的，所以在重新渲染的时候没必要重新创建 hooks 的单向链表，只要根据 queue 的环形链表存储的计算逻辑进行循环计算即可，所以我们需要一个变量 <code class=\"language-text\">mounted</code> 存储是否是首次渲染:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 首次渲染完成</span>\n<span class=\"token keyword\">let</span> mounted<span class=\"token operator\">:</span> boolean <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">TeamsInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\">  mounted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>setAge<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后在第二，三，四...次渲染的时候，都会跳过创建 hook 的过程，直接进入计算逻辑：</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mounted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token function\">updateState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">updateState</code> 函数的主要逻辑就是循环 <code class=\"language-text\">queue</code> 环形链表，根据初始值，计最终的结果，然后赋值给 <code class=\"language-text\">hook.memoizedState</code>，<strong>并且要清空 queue 环形链，这样做的原因是本次渲染已经完成，下一个周期内的计算 state 的逻辑和本次未必相同，所以清空；下一个周期会重新添加 updater 到 queue cycle linked list</strong>。</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>any<span class=\"token punctuation\">,</span> Function<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentUpdateHook <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    currentUpdateHook <span class=\"token operator\">=</span> firstHook<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> queue <span class=\"token operator\">=</span> currentUpdateHook<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> last <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>last<span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">let</span> first <span class=\"token operator\">=</span> last <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> last<span class=\"token punctuation\">.</span>next <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> newState <span class=\"token operator\">=</span> currentUpdateHook<span class=\"token punctuation\">.</span>memoizedState<span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>first <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">let</span> update <span class=\"token operator\">=</span> first<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token comment\">// 执行每一次更新，去更新状态</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">const</span> action <span class=\"token operator\">=</span> update<span class=\"token punctuation\">.</span>action<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token comment\">// 函数则调用</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> action <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        newState <span class=\"token operator\">=</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        newState <span class=\"token operator\">=</span> action<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">      update <span class=\"token operator\">=</span> update<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>update <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> update <span class=\"token operator\">!==</span> first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  currentUpdateHook<span class=\"token punctuation\">.</span>memoizedState <span class=\"token operator\">=</span> newState<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 关键代码，执行一轮调用之后要把更新队列清空，在下一轮的调用中重新添加队列</span>\n<span class=\"gatsby-highlight-code-line\">  queue<span class=\"token punctuation\">.</span>last <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></span>  currentUpdateHook <span class=\"token operator\">=</span> currentUpdateHook<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>dispatch<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 返回最新的状态和修改状态的方法</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>newState<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>到现在为止我们已经完成了 hook 的创建，添加更新方法，re-render 计算最新的 state 的整个链路，hook 分为 mount 阶段和 update 阶段的链路图，如下所示：</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/8164082314/fb2f/7f50/4577/dbe0756881d058dbccef364c3c405dcf.png\" alt=\"\"></p>\n<p>完整代码: <a href=\"https://gist.github.com/Sylvenas/28d23025ff369ab63c95cd8a40122d4c\">GitHub Gist</a></p>\n<h3>hook 链表存放在哪里？</h3>\n<p>从前面创建 hooks 单向链表的过程可以看出来，我们所有的数据的入口都是放在 <code class=\"language-text\">firstHook</code> 上，目前 <code class=\"language-text\">firstHook</code> 是作为一个函数“外部变量”存储在“全局环境”中的。</p>\n<p>在 React 中，这个 <code class=\"language-text\">firstHook</code> 实际上是挂载到该组件对应的 <code class=\"language-text\">fiberNode.memoizedState</code> 属性上的，如图所示：</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/8164187813/c844/e330/629b/07d5a006885d54a9c0e81b8a874b21cd.png\" alt=\"\"></p>\n<p><code class=\"language-text\">fiber node</code> 的数据结构本篇文章不再重复讲解，可以参考 <a href=\"/blog/2019/03/04/react-fiber.html\">React Fiber 中为何以及如何使用链表遍历组件树\n</a></p>\n<h3>next</h3>\n<p>实现<code class=\"language-text\">useEffect</code></p>","excerpt":"React Hooks 主要用来解决两个问题， 组件之间复用逻辑\n社区中普遍采用的 High-Order-Components和render props,然而这两种方案分别会带来 “wrapper hell” 和代码难以理解/维护的问题。 wrapper hell…","fields":{"slug":"/blog/2021/03/30/react-hooks.html","date":"2021-03-29T16:00:00.000Z"},"frontmatter":{"title":"React Hooks 原理及实现","img":"./img/2015-03-25.jpg","author":["Sylvenas"],"categories":"React"}}},"pageContext":{"slug":"/blog/2021/03/30/react-hooks.html"}},"staticQueryHashes":[]}