{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/2019/03/04/react-fiber.html","result":{"data":{"markdownRemark":{"html":"<p><a href=\"https://indepth.dev/the-how-and-why-on-reacts-usage-of-linked-list-in-fiber-to-walk-the-components-tree\">原文链接</a></p>\n<h2>前置知识</h2>\n<p>Fiber 架构有两个主要的渲染阶段:</p>\n<ul>\n<li>reconciliation/render</li>\n<li>commit</li>\n</ul>\n<p>在源码中 reconciliation 阶段也被视为 \"render\" 阶段. 在该阶段, React 会遍历整个组件树, 并且进行如下操作:</p>\n<ul>\n<li>更新 state 和 props</li>\n<li>调用生命周期方法</li>\n<li>检索当前组件的子组件</li>\n<li>比对新老子组件</li>\n<li>计算出需要在 commit 阶段被执行的 DOM 更新</li>\n</ul>\n<p>上述所有操作被称为 <strong>Fiber 内部工作(work inside Fiber)</strong>。 需要完成的工作类型取决于 <code class=\"language-text\">React Element</code> 的类型. 比如, 对于 <code class=\"language-text\">Class Component</code>, React 会进行实例化, 然而不会实例化 <code class=\"language-text\">Functional Component</code>。 如果感兴趣的话, <a href=\"https://github.com/facebook/react/blob/340bfd9393e8173adca5380e6587e1ea1a23cefa/packages/shared/ReactWorkTags.js?source=post_page---------------------------#L29-L28\">在这里</a> 你可以看到 <code class=\"language-text\">Fiber</code> 上所有的工作类型。 Andrew 也在演讲中提到了这些:</p>\n<blockquote>\n<p>当处理 <code class=\"language-text\">UI</code> 的时候, 如果一次性执行太多的 <code class=\"language-text\">React</code> 工作, 那么可能会导致动画掉帧...</p>\n</blockquote>\n<p>那么 '一次性执行' 指的是什么? 如果 React 以<strong>同步的方式</strong>遍历整个组件树, 并且对每个组件进行更新, 那么代码的执行时间有可能会超过 <code class=\"language-text\">16ms</code> 有效时间, 从而造成掉帧卡顿现象。</p>\n<p>那么这个问题可以解决吗?</p>\n<blockquote>\n<p>较新的浏览器以及 React Native 实现了相关 API, 来解决这个问题...</p>\n</blockquote>\n<p>全局函数—— <a href=\"https://developers.google.com/web/updates/2015/08/using-requestidlecallback\">requestIdleCallback</a>, 可以把函数加入到队列中, 等到浏览器空闲的时候再去调用，然而我们最好在这个时间范围内执行完毕，然后交还控制权给浏览器,不然会依然会导致UI阻塞,我们可以看下浏览器每一帧都执行了什么任务(Task), 花费了多少时间。</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/8078327500/0765/0701/0d25/29978cb29a7d1e3d1b17554762f9765b.png\" alt=\"\"></p>\n<p>浏览器在一帧内可能会做执行下列任务，而且它们的执行顺序基本是固定的:</p>\n<ul>\n<li>处理用户输入事件</li>\n<li>Javascript执行</li>\n<li>requestAnimation 调用</li>\n<li>布局 Layout</li>\n<li>绘制 Paint</li>\n</ul>\n<p>上面说理想的一帧时间是 16ms (1000ms / 60)，如果浏览器处理完上述的任务(布局和绘制之后)，还有盈余时间，浏览器就会调用 requestIdleCallback 的回调。例如:</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/8078337702/b5ea/0f2a/4114/a6e95292a28c2b0d100da1a4bf1be6a6.png\" alt=\"\"></p>\n<p>下面的例子告诉你如何使用它:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">requestIdleCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">deadline</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>deadline<span class=\"token punctuation\">.</span><span class=\"token function\">timeRemaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> deadline<span class=\"token punctuation\">.</span>didTimeout<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>如果在 <code class=\"language-text\">console</code> 控制台执行上述代码, Chrome 浏览器会打印 <code class=\"language-text\">49.9, false</code>. 这表明我有 <code class=\"language-text\">49.9ms</code> 去做任何我想做的工作, 并且时间还有富余, 否则 <code class=\"language-text\">deadline.didTimeout</code> 会变为 <code class=\"language-text\">true</code>. 记住, 一旦浏览器执行工作, <code class=\"language-text\">timeRemaining</code> 会立刻改变, 所以应该随时检查它。</p>\n<blockquote>\n<p>requestIdleCallback 在使用上其实是有局限性的, 不能频繁地调用它去实现平滑的 UI 渲染(当浏览器异常繁忙的时候，可能不会有盈余时间，这时候requestIdleCallback回调可能就不会被执行),另外由于只有较新的浏览器实现了该API, 所以 React 团队 不得不实现他们自己的版本。</p>\n</blockquote>\n<p>假如我们将 React 更新组件的代码放到 <code class=\"language-text\">performWork</code> 函数, 使用 <code class=\"language-text\">requestIdleCallback</code> 去调度, 代码会变成下面这样:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">requestIdleCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">deadline</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// while we have time, perform work for a part of the components tree</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>deadline<span class=\"token punctuation\">.</span><span class=\"token function\">timeRemaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> deadline<span class=\"token punctuation\">.</span>didTimeout<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> nextComponent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        nextComponent <span class=\"token operator\">=</span> <span class=\"token function\">performWork</span><span class=\"token punctuation\">(</span>nextComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>上述代码对于单个组件执行相关更新工作, 并且返回了指向下一个组件的引用. 不用再像之前的 <a href=\"https://reactjs.org/docs/codebase-overview.html#stack-reconciler\">reconciliation</a> 算法那样, 同步处理组件树. Andrew 也谈到了这个问题:</p>\n<blockquote>\n<p>为了使用这些 API, 你需要一种可以将渲染工作拆分为单元</p>\n</blockquote>\n<p>为了解决这个问题, React 重新实现了树的遍历算法, <strong>原本的算法采用基于内置堆栈的同步递归策略, 而新的算法则是基于链表和指针的异步策略</strong>。 Andrew 的文章也提到了:</p>\n<blockquote>\n<p>如果只依赖内置的调用栈, 那么 React 会一直工作直到调用栈为空...， 如果可以中断调用栈并且手动操作调用栈的每一帧, 那不是美滋滋么? 这其实就是 React Fiber 的思想. <strong>Fiber 专为 React 组件设计, 它重新实现了调用栈</strong>。 你也可以把每个 Fiber 当作一个帧。</p>\n</blockquote>\n<h2>什么是堆栈?</h2>\n<p>我假设你已经熟悉了调用栈的相关概念. 给代码打个断点, 然后在浏览器调试窗口就可以看到它的调用栈. 下面是 维基百科 对它的解释:</p>\n<blockquote>\n<p>In computer science, a <em>call stack</em> is a stack data structure that stores information about the active subroutines of a computer program… the main reason for having call stack is <em>to keep track of the point</em> to which each active subroutine should return control when it finishes executing… A <em>call stack</em> is composed of <em>stack frames</em>… Each stack frame corresponds to a call to a subroutine which has not yet terminated with a <em>return</em>. For example, if a subroutine named DrawLine is currently running, having been called by a subroutine DrawSquare, the top part of the call stack might be laid out like in the adjacent picture.</p>\n</blockquote>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/8052460125/9d33/235b/893d/05c8ee9e54032622515a04108cc07220.png\" alt=\"\"></p>\n<h3>为什么栈和 React 有关?</h3>\n<p>我在文章的第一部分提到了, React 在 reconciliation/render 阶段遍历组件树并更新组件. 之前的算法采用的是基于内置调用栈进行同步递归遍历组件树的策略. 这篇文章 介绍了 <a href=\"https://reactjs.org/docs/reconciliation.html?source=post_page---------------------------#recursing-on-children\">reconciliation</a> 递归算法:</p>\n<p>在文章的第一部分我们提到, React 在 reconciliation/render 阶段遍历组件树并更新组件. 之前的 reconciler 算法采用的是同步递归内置调用栈的策略. 官方文档 阐述了这个过程并且解释了递归算法。</p>\n<p>默认情况下, 当递归遍历某个 DOM 节点的子节点时, React 只同时遍历两个子节点列表, 在遍历过程中找到它们的差异并生成一个 mutation(突变)。</p>\n<p>你想想, 每次递归都会在栈中添加一个帧. 并且它是同步的. 假设有如下的组件树:</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/8052507630/540d/c408/5847/fd7b72a284a043b53052256c4446c4c5.png\" alt=\"\"></p>\n<p>如下所示的 render 函数会返回一些对象. 你可以把这些对象看作 React 组件的实例:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'a1'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'b1'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'b2'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'b3'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> c1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'c1'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> c2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'c2'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> d1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'d1'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> d2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'d2'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\na1<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>b1<span class=\"token punctuation\">,</span> b2<span class=\"token punctuation\">,</span> b3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nb1<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\nb2<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>c1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nb3<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>c2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nc1<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>d1<span class=\"token punctuation\">,</span> d2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nc2<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\nd1<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\nd2<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>React 需要遍历整个组件树并对每一个组件进行更新操作. 为了简化这个过程, 在更新每个组件的时候, 只会打印当前组件的 name 属性的值以及返回它的子组件. 下面是递归的实现方式。</p>\n<h3>递归遍历</h3>\n<p>通过递归调用 walk 函数来遍历整个树, 代码如下所示:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">walk</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">instance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">doWork</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> children <span class=\"token operator\">=</span> instance<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      children<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>walk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">doWork</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上述代码会输出:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">a1, b1, b2, c1, d1, d2, b3, c2</code></pre></div>\n<p>递归非常适合遍历树型结构. 但是它有一个最大的局限性, 那就是<strong>不能将某个工作拆分为粒度更小的单元</strong>。 我们不能暂停组件的更新工作并且在后续的某个时间段内恢复它. React 会一直通过这种方式来遍历, 直到处理完所有的组件并且调用栈为空(这可能耗时较长)。</p>\n<p>这个问题的根源还在于JSX，JSX同时满足了<strong>组件化与标签化</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n   </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Foo</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Bar</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n   </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Foo</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>但<strong>标签化是天然套嵌的结构，意味着它会最终编译成递归执行的代码</strong>。递归不可避免会产生调用\"栈\"的堆叠，使用栈很方便，因为你无需自己跟踪“盒子堆”，栈替你这样做了,但是也要付出代价：存储详尽的信息可能占用大量的内存。每个函数调用都要占用一定的内存，如果栈很高，就意味着计算机存储了大量函数调用的信息，在这种情况下，你有两种选择：</p>\n<ul>\n<li>重新编写代码，转而使用循环</li>\n<li>使用<strong>尾递归</strong></li>\n</ul>\n<p>由于尾递归调用的使用条件苛刻，所以方案选择只能是转而使用循环， 事实上, React 采用了<strong>单链表树状结构的遍历算法</strong>。 这使得可以<strong>暂停遍历并且抑制调用栈的增长</strong>。</p>\n<h3>链表遍历</h3>\n<p>幸运的是, 我在 Sebastian Markbåge 的 <a href=\"https://github.com/facebook/react/issues/7942?source=post_page---------------------------#issue-182373497\">issue</a> 发现了关于这个算法的 代码片段. 要实现这个算法, 需要一个数据结构, 它有三个字段:</p>\n<ul>\n<li>child - 指向第一个子节点</li>\n<li>sibling - 指向第一个兄弟节点</li>\n<li>return - 指向父节点</li>\n</ul>\n<p>在新的 reconciliation 算法条件下, 由 Fiber 来调用上述字段组成的数据结构. 在底层它代表一个 React Element. 我的下一篇文章会讲述更多的有关于它的知识.</p>\n<blockquote>\n<p>注意，child属性仅仅指向“长子”，而次子是通过“长子”的sibling属性指向的，但是不管长子还是次子，都包含返回父元素的return 引用</p>\n</blockquote>\n<p>如下所示的流程图展示了各个节点间的关系:</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/8052715769/9d42/293c/0e06/8a958ee002dba604ed7cd403c0b2521e.png\" alt=\"\"></p>\n<p>因此我们首先定义节点的数据结构:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">instance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance <span class=\"token operator\">=</span> instance<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>child <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sibling <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>return <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如下所示, 使用 <code class=\"language-text\">link</code> 函数将由 <code class=\"language-text\">render</code> 函数返回的子节点列表连结:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">link</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> elements</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elements <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> elements <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 子元素数组倒叙遍历，依次添加父元素(return) 和 下一个兄弟元素(sibling)</span>\n    <span class=\"token comment\">// 请注意最后一个子元素是没有 sibling 的</span>\n    parent<span class=\"token punctuation\">.</span>child <span class=\"token operator\">=</span> elements<span class=\"token punctuation\">.</span><span class=\"token function\">reduceRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">previous<span class=\"token punctuation\">,</span> current</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        node<span class=\"token punctuation\">.</span>return <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n        node<span class=\"token punctuation\">.</span>sibling <span class=\"token operator\">=</span> previous<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>link 方法从后往前遍历节点列表, 将它们以单链表的形式连接. 函数最终返回一个指针, 指向列表中的第一个节点. 如下代码所示:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'b1'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'b2'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'a1'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> child <span class=\"token operator\">=</span> <span class=\"token function\">link</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// the following two statements are true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'b1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>sibling<span class=\"token punctuation\">.</span>instance <span class=\"token operator\">===</span> children<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>同时, 我们也实现了一个 <code class=\"language-text\">doWork</code>辅助函数, 执行对单个节点的操作. 函数内部打印了组件的名称(component.name). 除此之外, 它检索了子节点列表, 并且将子节点和父节点/兄弟节点连结起来, 代码如下所示:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">doWork</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> children <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">link</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>好的, 现在我们实现了核心的遍历算法. 采用的是深度优先的策略, 代码如下所示:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> root <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// perform work for a node, retrieve &amp; link the children</span>\n        <span class=\"token keyword\">let</span> child <span class=\"token operator\">=</span> <span class=\"token function\">doWork</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// if there's a child, set it as the current active node</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            current <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// if we've returned to the top, exit the function</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">===</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// keep going up until we find the sibling</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>current<span class=\"token punctuation\">.</span>sibling<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n            <span class=\"token comment\">// if we've returned to the top, exit the function</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>current<span class=\"token punctuation\">.</span>return <span class=\"token operator\">||</span> current<span class=\"token punctuation\">.</span>return <span class=\"token operator\">===</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">// set the parent as the current active node</span>\n            current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>return<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// if found, set the sibling as the current active node</span>\n        current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>sibling<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>尽管上面的代码实现不难理解, 你还是要自己 尝试一下. 上述算法的理念是保持对 current node(当前节点) 的引用, 并且在遍历树中的某一条路径的时候重新赋值, 直到遍历到尽头. 之后使用 return 指针返回父级节点，这是一种父级优先，深度优先的遍历算法。</p>\n<p><a href=\"https://gist.github.com/Sylvenas/e8aba3432a5ab2858e93deb1d03c08a6\">这里查看完整代码</a></p>\n<p>如果我们检查上述算法的调用栈, 就会看到:</p>\n<p><img src=\"https://d2.music.126.net/dmusic/obj/w5zCg8OAw6HDjzjDgMK_/8052870423/b407/2bb5/00b0/52d7a95267980b8d55385bfbdefd30c2.gif?download=1_ybVgRoNf-dBxR_OKxn4oKQ.gif\" alt=\"\"></p>\n<p>可以看到, 调用栈并没有随着树的遍历而增长. 但是如果现在给 doWork 方法打个断点, 可以看到如下结果:</p>\n<p><img src=\"https://d2.music.126.net/dmusic/obj/w5zCg8OAw6HDjzjDgMK_/8052902015/2685/fea5/1137/18c4261173d73092d1e44712f912c70a.gif?download=1_ErzqXpJt5KkLKxHCn31hmA.gif\" alt=\"\"></p>\n<p>用组件树的结构来表达，遍历的顺序如下：</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/8053983966/74a2/530c/746a/312ba32b547c6851d583b3642be0d7c1.png\" alt=\"\"></p>\n<p>这看起来很像浏览器的调用栈. 因此通过这个算法, 我们有效地利用我们自己实现的调用栈替代了浏览器默认的调用栈. Andrew 也提到了这一点:</p>\n<blockquote>\n<p>Fiber 是调用栈的重新实现, 专为 React 组件设计. 你可以将一个 fiber 看作一个虚拟的栈帧.</p>\n</blockquote>\n<p>因为我们现在通过保持对节点的引用来管理调用栈, 所以该节点可以看作一个顶级帧:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> root <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">...</span>\n\n            current <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">...</span>\n            \n            current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>return<span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">...</span>\n\n            current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>sibling<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们可以在任何时候中断或恢复遍历. 这正是使用 requestIdleCallback API 的前置条件.</p>\n<h2>What is Fiber ?</h2>\n<p>Fiber 可以从两个角度理解：</p>\n<h3>一种流程控制原语</h3>\n<p>进程/线程是经常遇到的概念，还有一个概念“协程”,在<a href=\"https://ruby-doc.org/core-3.0.0/Fiber.html\">Ruby中的协程</a>就称为“Fiber”,其实很多语言都有类似的机制，例如 Lua 的Coroutine, 还有前端开发者比较熟悉的 ES6 新增的 <code class=\"language-text\">Generator</code>。'协程'只是一种控制流程的让出机制。要理解协程，你得和普通函数一起来看, 以Generator为例:</p>\n<p>普通函数执行的过程中无法被中断和恢复：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> tasks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> task\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>task <span class=\"token operator\">=</span> tasks<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>而 Generator 可以:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> tasks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">function</span> <span class=\"token operator\">*</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> task\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>task <span class=\"token operator\">=</span> tasks<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 🔴 判断是否有高优先级事件需要处理, 有的话让出控制权</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hasHighPriorityEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">yield</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 处理完高优先级事件后，恢复函数调用栈，继续执行...</span>\n    <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>React Fiber 的思想和协程的概念是契合的: React render/reconciliation的过程可以被中断，可以将控制权交回浏览器，让位给高优先级的任务，浏览器空闲后再恢复render/reconciliation。</p>\n<h3>一种数据结构</h3>\n<p>Fiber的另外一种解读是'纤维': 这是一种数据结构或者说执行单元。React要实现遍历 component tree 从“递归”到“循环”的转换，必然需要一种特殊的数据结构，而这种结构就是上文中介绍的<code class=\"language-text\">Node</code>,核心是包含<code class=\"language-text\">child</code>,<code class=\"language-text\">return</code>,<code class=\"language-text\">sibling</code>三个用来表示关系的结构。</p>\n<blockquote>\n<p>Fiber 完整的数据结构可以<a href=\"https://github.com/lit-forest/Blog/issues/1\">查看</a></p>\n</blockquote>\n<h2>总结</h2>\n<p>Fiber是一种模拟函数调用栈的方案，一种可以中断/继续的方案，而为了实现这个方案，react定义了一种包含<code class=\"language-text\">child</code>,<code class=\"language-text\">return</code>,<code class=\"language-text\">sibling</code>的数据结构,同时fiber中包含着虚拟dom的指针(stateNode)，来完成从“递归”到“循环”的替换。</p>","excerpt":"原文链接 前置知识 Fiber 架构有两个主要的渲染阶段: reconciliation/render commit 在源码中 reconciliation 阶段也被视为 \"render\" 阶段. 在该阶段, React 会遍历整个组件树, 并且进行如下操作: 更新 state 和 props 调用生命周期方法 检索当前组件的子组件 比对新老子组件 计算出需要在 commit 阶段被执行的 DOM 更新 上述所有操作被称为 Fiber 内部工作(work inside Fiber…","fields":{"slug":"/blog/2019/03/04/react-fiber.html","date":"2019-03-03T16:00:00.000Z"},"frontmatter":{"title":"[译+改] React Fiber 中为何以及如何使用链表遍历组件树","img":"./img/2015-03-25.jpg","author":["Sylvenas"],"categories":"React"}}},"pageContext":{"slug":"/blog/2019/03/04/react-fiber.html"}},"staticQueryHashes":[]}