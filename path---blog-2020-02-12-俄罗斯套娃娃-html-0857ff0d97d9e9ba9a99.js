webpackJsonp([4012586293193],{554:function(s,n){s.exports={data:{markdownRemark:{html:'<p>前面三章我们分别学习了<code class="gatsby-code-text">Functor</code>和<code class="gatsby-code-text">Applicative</code>的概念和实际应用，并列举了几个具体的例子，来说明了Functor和<code class="gatsby-code-text">Applicative</code>的实际用途，比如：使用<code class="gatsby-code-text">Either</code>来处理空值和更优雅的<code class="gatsby-code-text">try-catch</code>;使用<code class="gatsby-code-text">Validation</code>来做高度灵活高度可拓展的表单校验;同时我们应该已经牢牢掌握了<code class="gatsby-code-text">functor</code>的核心<code class="gatsby-code-text">map</code>，应用一个函数到包裹的值，<code class="gatsby-code-text">applicative</code>的核心<code class="gatsby-code-text">ap</code>，应用一个包裹的函数到一个包裹的值。</p>\n<p>别忘了我们之前遗留的几个问题：</p>\n<ul>\n<li>如何解决嵌套的<code class="gatsby-code-text">try-catch</code></li>\n<li>异步函数的组合</li>\n<li><code class="gatsby-code-text">chain</code>函数又是什么</li>\n</ul>\n<p>我们一个一个的来解决,先从第一个嵌套的<code class="gatsby-code-text">try-catch</code>开始入手：</p>\n<h3 id="arrayprototypeflatmap"><a href="#arrayprototypeflatmap" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Array.prototype.flatMap</h3>\n<p><code class="gatsby-code-text">Javascript Array</code> 的map方法，相信我们每个人都非常的熟悉，并且几乎在每天的编程中都可能会用到，但<code class="gatsby-code-text">Array</code>的原型链上的另一个方法<code class="gatsby-code-text">Array.prototype.flatMap</code>可能很多人没怎么用过，从字面意思上理解就是扁平化的<code class="gatsby-code-text">map</code>，实际作用上也确实是的，我们看一个和<code class="gatsby-code-text">map</code>做对比的使用案例：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>\n\narr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">=></span> <span class="token punctuation">[</span>x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// => [[2], [4], [6], [8]]</span>\n\narr1<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>x <span class="token operator">=></span> <span class="token punctuation">[</span>x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// => [2, 4, 6, 8]</span></code></pre>\n      </div>\n<p><code class="gatsby-code-text">flatMap</code>相对于<code class="gatsby-code-text">map</code>的区别是：</p>\n<ul>\n<li><code class="gatsby-code-text">map</code>是把函数执行的结果，放在一起然后装进一个Box中；</li>\n<li><code class="gatsby-code-text">flatMap</code>的结果是把<strong>函数执行的结果分别去掉一层“包装”</strong>，然后放在一起装进一个Box中</li>\n</ul>\n<p>所以<code class="gatsby-code-text">flatMap</code>相当于是先<code class="gatsby-code-text">map</code>(映射)然后<code class="gatsby-code-text">flat</code>(拍平), 仅仅是多了一个“去包装”的操作！</p>\n<p>下图这个流程完美的展现了<code class="gatsby-code-text">flatMap</code>的工作方式：</p>\n<p><img src="https://p1.music.126.net/heup-JwK7nvaKfasxckrig==/109951164726073715.gif" alt="flatMap"></p>\n<h3 id="嵌套的try-catch"><a href="#%E5%B5%8C%E5%A5%97%E7%9A%84try-catch" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>嵌套的try-catch</h3>\n<p>上面介绍了Array的一种先<code class="gatsby-code-text">map</code>在<code class="gatsby-code-text">flat</code>的方法，Array也是我们<code class="gatsby-code-text">Box</code>理念的一个具体实现案例，那其他的Box呢？<code class="gatsby-code-text">Maybe</code>，<code class="gatsby-code-text">Either</code>又是如何实现的呢？我们先从一个更简单的函数组合的案例出发吧，现在我们需要编写一个获取用户地址的街道名称函数：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> <span class="token function-variable function">address</span> <span class="token operator">=</span> user <span class="token operator">=></span> user<span class="token punctuation">.</span>address\n<span class="token keyword">const</span> <span class="token function-variable function">street</span> <span class="token operator">=</span> address <span class="token operator">=></span> address<span class="token punctuation">.</span>street\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span>street<span class="token punctuation">,</span> address<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>\n    address<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        street<span class="token punctuation">:</span> <span class="token string">\'长安街\'</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">app</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token comment">// => 长安街</span></code></pre>\n      </div>\n<p>函数组合的理论也非常简单，只要上一个函数的返回值类型可以作为下一个函数的入参就可以放心大胆的进行组合了。</p>\n<p>但是别忘了，我们的<code class="gatsby-code-text">user</code>对象上面<code class="gatsby-code-text">address</code>属性可能为<code class="gatsby-code-text">null/undefined</code>,上面的这段代码如果我们不做任何防范，那么<code class="gatsby-code-text">TypeError</code>的错误是不可避免的！这个问题不用担心，我们之前已经完全准备好了用来处理<code class="gatsby-code-text">null/undefined</code>的<code class="gatsby-code-text">Maybe functor</code>。现在我们<code class="gatsby-code-text">Maybe</code>来包装一下上面代码：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> <span class="token function-variable function">address</span> <span class="token operator">=</span> user <span class="token operator">=></span>  <span class="token function">Maybe</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>u <span class="token operator">=></span> u<span class="token punctuation">.</span>address<span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token function-variable function">street</span> <span class="token operator">=</span> address <span class="token operator">=></span> <span class="token function">Maybe</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>a <span class="token operator">=></span> a<span class="token punctuation">.</span>street<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">app</span> <span class="token operator">=</span> user <span class="token operator">=></span>\n    <span class="token function">address</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>                   <span class="token comment">// Maybe(address)</span>\n        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>street<span class="token punctuation">)</span>                <span class="token comment">// Maybe(Maybe(street))</span></code></pre>\n      </div>\n<p>看一下上面的代码，<code class="gatsby-code-text">address(user)</code>函数的返回值是<code class="gatsby-code-text">Maybe(address)</code>,然后我们继续map,把<code class="gatsby-code-text">address</code>传递给了<code class="gatsby-code-text">street</code>函数，别忘了<code class="gatsby-code-text">map</code>方法(<code class="gatsby-code-text">map: f =&gt; Just(f(x))</code>)会把函数计算的结果重新包装进Box中，所以我们最终得到的结果是一个<code class="gatsby-code-text">Maybe(Maybe(street))</code>。</p>\n<p>这个时候如果我们想获取最终的street的结果，不得不在<code class="gatsby-code-text">map</code>之后先用<code class="gatsby-code-text">getOrElse</code>拆包第一层，然后再用<code class="gatsby-code-text">getOrElse</code>拆包第二层，最后得到最终的结果。</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> <span class="token function-variable function">app</span> <span class="token operator">=</span> user <span class="token operator">=></span>\n    <span class="token function">address</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>          <span class="token comment">// Maybe(address)</span>\n        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>street<span class="token punctuation">)</span>       <span class="token comment">// Maybe(Maybe(street))</span>\n        <span class="token punctuation">.</span><span class="token function">getOrElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment">// Maybe(street)</span>\n        <span class="token punctuation">.</span><span class="token function">getOrElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment">// street</span></code></pre>\n      </div>\n<p>这简直是代码版本的俄罗斯套娃娃：</p>\n<p><img src="https://p1.music.126.net/M5xz6W-YU5gxERxRhLscRw==/109951164726066989.gif" alt="russian-dolls"></p>\n<p>毫无疑问，我们有几次包装，就需要几次“拆包”操作，这样做逻辑上自然是没有什么问题。但是这岂不是和前端常见的<a href="">回调地狱</a>问题很类似，这样的代码写下去实在是太难维护和看懂了，我们总不能写一行就要数数有几层包装吧！</p>\n<p>回头想想出现两层包装的原因是出在<code class="gatsby-code-text">map</code>方法上，<code class="gatsby-code-text">map</code>会把函数计算的结果重新包装进Box中，而这一层包装对我们来说有点赘余，我们之后马上进行了拆箱操作，这非常类似于<code class="gatsby-code-text">Array flatmap</code>的理念。</p>\n<p><strong>所以我只需要一个方法(flatMap/chain)帮我们直接执行函数不做其他的任何操作，因为函数的返回值已经是被包装好了</strong></p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> <span class="token function-variable function">Just</span> <span class="token operator">=</span> x <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  chain<span class="token punctuation">:</span> f <span class="token operator">=></span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Nothing</span> <span class="token operator">=</span> x <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  chain<span class="token punctuation">:</span> f <span class="token operator">=></span> <span class="token function">Nothing</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">app</span> <span class="token operator">=</span> user <span class="token operator">=></span>\n    <span class="token function">address</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>                         <span class="token comment">// Maybe(address)</span>\n        <span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span>street<span class="token punctuation">)</span>                    <span class="token comment">// Maybe(street)</span>\n        <span class="token punctuation">.</span><span class="token function">flod</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">\'no street\'</span><span class="token punctuation">,</span>x <span class="token operator">=></span> x<span class="token punctuation">)</span>    <span class="token comment">// street</span></code></pre>\n      </div>\n<p>此时，我们可以明显的对比出来<code class="gatsby-code-text">map</code>和<code class="gatsby-code-text">chain</code>的不同点：<code class="gatsby-code-text">map</code>方法接收一个仅仅变换容器内值的函数，所以需要用Box重新包装；但是<code class="gatsby-code-text">chain</code>接收一个返回Box类型的函数仅此而已。</p>\n<p><code class="gatsby-code-text">map</code>和<code class="gatsby-code-text">chain</code>的相同点却是非常明显的：都是返回一个Box的实例，方便后面继续链式的调用。</p>\n<blockquote>\n<p><code class="gatsby-code-text">chain</code>方法和<code class="gatsby-code-text">flod</code>方式非常相像，这我得承认他们确实很类似，但是他们的使用场景却完全不同！<code class="gatsby-code-text">flod</code>的通途是把一个值从Box中解放出来；<code class="gatsby-code-text">chain</code>的用途是把一个返回Box的函数应用到一个Box上,这样后面可以继续保持链式的调用。</p>\n</blockquote>\n<p>既然我们可以解决了嵌套的<code class="gatsby-code-text">Maybe</code>问题，那么嵌套的try-catch，自然用同样的理论也可以迎刃而解了：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> <span class="token function-variable function">Right</span> <span class="token operator">=</span> x <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  chain<span class="token punctuation">:</span> f <span class="token operator">=></span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Left</span> <span class="token operator">=</span> x <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  chain<span class="token punctuation">:</span> f <span class="token operator">=></span> <span class="token function">Left</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">jsonFormat</span> <span class="token operator">=</span> str <span class="token operator">=></span>\n    <span class="token function">tryCatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">=></span> x<span class="token punctuation">.</span>ext<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">extFormat</span> <span class="token operator">=</span> ext <span class="token operator">=></span>\n    <span class="token function">tryCatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>ext<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">app</span> <span class="token operator">=</span> str <span class="token operator">=></span>\n    <span class="token function">jsonFormat</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span>extFormat<span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">flod</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">\'no ext\'</span><span class="token punctuation">,</span> x <span class="token operator">=></span> x<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">\'{ "ext": "" }\'</span>\n\n<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">app</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token comment">// => \'no ext\'</span></code></pre>\n      </div>\n<h3 id="异步与monad"><a href="#%E5%BC%82%E6%AD%A5%E4%B8%8Emonad" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>异步与Monad</h3>\n<p>到目前为止，我们所讨论的问题都同步的问题，但是在Javascript的世界中90%的代码都是异步，可以说异步才是JavaScript世界的主流，谁能更优雅的解决异步的问题，谁就是JavaScript中的大明星，从刚开始的<code class="gatsby-code-text">callback</code>，到<code class="gatsby-code-text">Promise</code>，再到<code class="gatsby-code-text">async await</code>，那么在函数式编程中异步又该如何解决呢，从最常见的<code class="gatsby-code-text">http</code>请求作为引入的事例吧：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> <span class="token function-variable function">httpGetUser</span> <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">=></span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'James\'</span><span class="token punctuation">,</span> id <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">httpGetMovies</span> <span class="token operator">=</span> <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token operator">=></span>\n    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>id <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token string">\'加勒比海盗\'</span><span class="token punctuation">,</span> <span class="token string">\'霍比特人\'</span><span class="token punctuation">,</span> <span class="token string">\'蜘蛛侠\'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'教父\'</span><span class="token punctuation">,</span> <span class="token string">\'小丑\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">app</span> <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">httpGetUser</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>httpGetMovies<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">,</span> console<span class="token punctuation">.</span>error<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">app</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment">// => [\'加勒比海盗\', \'霍比特人\', \'蜘蛛侠\']</span></code></pre>\n      </div>\n<p><code class="gatsby-code-text">httpGetUser</code>函数返回用户相关的信息，<code class="gatsby-code-text">httpGetMovies</code>函数根据用户<code class="gatsby-code-text">id</code>，返回电影列表类似的需求在我们的业务场景中也是非常常见的,现在我们简单的抽象一下上面的代码：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx">httpGetUser <span class="token punctuation">:</span><span class="token punctuation">:</span> id <span class="token operator">-</span><span class="token operator">></span> <span class="token function">Promise</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>\nhttpGetMovies <span class="token punctuation">:</span><span class="token punctuation">:</span> user <span class="token operator">-</span><span class="token operator">></span> <span class="token function">Promise</span><span class="token punctuation">(</span>movies<span class="token punctuation">)</span>\napp <span class="token punctuation">:</span><span class="token punctuation">:</span> id <span class="token operator">-</span><span class="token operator">></span> \n    <span class="token function">httpGetUser</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>httpGetMovies<span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">,</span> console<span class="token punctuation">.</span>error<span class="token punctuation">)</span></code></pre>\n      </div>\n<p>然后我们对比一下上一节中的获取街道名称的例子:</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx">address <span class="token punctuation">:</span><span class="token punctuation">:</span> user <span class="token operator">-</span><span class="token operator">></span>  <span class="token function">Maybe</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span>\nstreet <span class="token punctuation">:</span><span class="token punctuation">:</span> address <span class="token operator">-</span><span class="token operator">></span> <span class="token function">Maybe</span><span class="token punctuation">(</span>street<span class="token punctuation">)</span>\n\napp <span class="token punctuation">:</span><span class="token punctuation">:</span> user <span class="token operator">-</span><span class="token operator">></span>\n    <span class="token function">address</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>                         <span class="token comment">// Maybe(address)</span>\n        <span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span>street<span class="token punctuation">)</span>                    <span class="token comment">// Maybe(street)</span>\n        <span class="token punctuation">.</span><span class="token function">flod</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">\'no street\'</span><span class="token punctuation">,</span>x <span class="token operator">=></span> x<span class="token punctuation">)</span>    <span class="token comment">// street</span></code></pre>\n      </div>\n<p>❗️️️❗️️️❗️️️ 这两个例子是何其的类似，两个函数的定义和两个<code class="gatsby-code-text">app</code>的调用方式，除了一个是<code class="gatsby-code-text">Maybe</code>一个是<code class="gatsby-code-text">Promise</code>，一个<code class="gatsby-code-text">chain</code>一个是<code class="gatsby-code-text">flod</code>。</p>\n<p>Promise把我们从异步回调地狱中解放出来，而添加<code class="gatsby-code-text">chain</code>方法的<code class="gatsby-code-text">Maybe</code>，可以让我们从嵌套的<code class="gatsby-code-text">Maybe</code>中解脱出来。为何会这么的类似！</p>\n<p>其实这是<code class="gatsby-code-text">Maybe</code>，<code class="gatsby-code-text">Promise</code>都是Monad(单子)的概念的拓展和具体实现！而<code class="gatsby-code-text">monad</code> 这个名字多么的让人难以理解，如果你去google一下<code class="gatsby-code-text">monad</code>，有无数篇在讲解<code class="gatsby-code-text">monad</code>,其中最经典的一个解释为：</p>\n<blockquote>\n<p>“A monad is just a monoid in the category of endofunctors. What’s the problem?”</p>\n</blockquote>\n<p><img src="https://p1.music.126.net/dUKuPfnrnZ0zt2zRfC8AOA==/109951164726072211.png" alt="monad"></p>\n<p>好吧其实上面这句话的出处是<a href="http://james-iry.blogspot.com/2009/05/brief-incomplete-and-mostly-wrong.html">brief-incomplete-and-mostly-wrong</a>,完全是为何吐槽Haskell而说的，理论上没有错，但是却感觉是一句无用的废话。</p>\n<p>而Monad的准确定义是：</p>\n<blockquote>\n<p>All told, a monad in X is just a monoid in the category of endofunctors of X, with product × replaced by composition of endofunctors and unit set by the identity endofunctor.</p>\n</blockquote>\n<p>所以上面这个定义你看懂了吗?(<del>别打我</del>)看不懂，真的没有关系，因为那是为专业的数学学生而准备的，我们只要掌握monad在实际代码中可以理解为<code class="gatsby-code-text">chainable</code>的对象即可</p>\n<h3 id="函数组合与monad"><a href="#%E5%87%BD%E6%95%B0%E7%BB%84%E5%90%88%E4%B8%8Emonad" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>函数组合与monad</h3>\n<p>在常规的函数组合中只要前一个函数的返回值是下一个函数的入参就可以，进行组合：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> <span class="token function-variable function">compose</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>fns<span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">=></span> fns<span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> g<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">g</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>但是</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> <span class="token function-variable function">address</span> <span class="token operator">=</span> user <span class="token operator">=></span>  <span class="token function">Maybe</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>u <span class="token operator">=></span> u<span class="token punctuation">.</span>address<span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token function-variable function">street</span> <span class="token operator">=</span> address <span class="token operator">=></span> <span class="token function">Maybe</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>a <span class="token operator">=></span> a<span class="token punctuation">.</span>street<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span>street<span class="token punctuation">,</span> address<span class="token punctuation">)</span> <span class="token comment">// 可以这样组合吗？ No!</span></code></pre>\n      </div>\n<p>我们没办法直接把<code class="gatsby-code-text">address</code>的返回值直接传递给<code class="gatsby-code-text">street</code>函数，因为<code class="gatsby-code-text">address</code>函数的返回值是一个<code class="gatsby-code-text">Maybe(address)</code>，函数<code class="gatsby-code-text">street</code>的入参是<code class="gatsby-code-text">address</code>，所以我们要使用<code class="gatsby-code-text">chain</code>方法把<code class="gatsby-code-text">address从Maybe(address)</code>中提取出来，然后传递给<code class="gatsby-code-text">street</code>函数，所以<code class="gatsby-code-text">monad</code>版本<code class="gatsby-code-text">compose</code>就应运而生了：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> <span class="token function-variable function">composeM</span> <span class="token operator">=</span> method <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token operator">...</span>fns<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>fns<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> g<span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">=></span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> composeChain <span class="token operator">=</span> <span class="token function">composeM</span><span class="token punctuation">(</span><span class="token string">\'chain\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">composeChain</span><span class="token punctuation">(</span>street<span class="token punctuation">,</span> address<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">app</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrElse</span><span class="token punctuation">(</span><span class="token string">\'no street\'</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>这样的定理也完全适用于Promise的组合：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> composeThen <span class="token operator">=</span> <span class="token function">composeM</span><span class="token punctuation">(</span><span class="token string">\'then\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">composeThen</span><span class="token punctuation">(</span>httpGetMovies<span class="token punctuation">,</span> httpGetUser<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">app</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">,</span> console<span class="token punctuation">.</span>error<span class="token punctuation">)</span> <span class="token comment">// => [\'加勒比海盗\', \'霍比特人\', \'蜘蛛侠\']</span></code></pre>\n      </div>\n<h3 id="monad-定律"><a href="#monad-%E5%AE%9A%E5%BE%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>monad 定律</h3>\n<h4 id="结合律"><a href="#%E7%BB%93%E5%90%88%E5%BE%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>结合律</h4>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx">m<span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span> <span class="token operator">===</span> m<span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span>x <span class="token operator">=></span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>这个定律我们在<code class="gatsby-code-text">composeChain</code>，<code class="gatsby-code-text">composeThen</code>的例子中已经证明过了</p>\n<h4 id="identity"><a href="#identity" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>identity</h4>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token constant">M</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// Left identity</span>\n<span class="token constant">M</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span><span class="token constant">M</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant">M</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">// Right identity</span></code></pre>\n      </div>\n<p>这个实在是太简单的，而现在同时满足结合律和<code class="gatsby-code-text">identity</code>定律的集合又可以被称为<strong>幺半群</strong>，所以这也就解释了</p>\n<blockquote>\n<p>“A monad is just a monoid in the category of endofunctors. What’s the problem?”</p>\n</blockquote>\n<p>但是这真的是个巧合，仅仅是个调侃罢了，幺半群也不是Monad的主要使用方向。</p>\n<h3 id="monad与applicative"><a href="#monad%E4%B8%8Eapplicative" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Monad与Applicative</h3>\n<p>Monad更擅长处理的是一种拥有<code class="gatsby-code-text">Context</code>的场景，我们上面的<code class="gatsby-code-text">httpGetUser</code>与<code class="gatsby-code-text">httpGetMovies</code>的例子中，<code class="gatsby-code-text">httpGetMovies</code>函数必须等到<code class="gatsby-code-text">httpGetUser</code>函数中的异步执行完成才能开始调用，这是一种<strong>纵向(串行)</strong>的链路；</p>\n<p>而<strong>Applicative更擅长的是处理一种横向(并行)的链路</strong>，比如上一章介绍的表单校验的例子，每个字段的校验之间完全没有什么关联关系。</p>\n<h3 id="总结"><a href="#%E6%80%BB%E7%BB%93" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>总结</h3>\n<ul>\n<li><code class="gatsby-code-text">Functor</code>是一种实现<code class="gatsby-code-text">map</code>方法的数据类型</li>\n<li><code class="gatsby-code-text">Applicative</code>是一种实现了<code class="gatsby-code-text">apply</code>方法的数据类型</li>\n<li><code class="gatsby-code-text">Monad</code>是一种实现了<code class="gatsby-code-text">chain</code>或<code class="gatsby-code-text">flatmap</code>方法的数据类型.</li>\n</ul>\n<p>那么<code class="gatsby-code-text">Functor</code>、<code class="gatsby-code-text">Applicative</code>和<code class="gatsby-code-text">Monad</code>三个区别是什么？</p>\n<p><img src="https://p1.music.126.net/bDmdHmGZ635HmpgBPy-tlw==/109951164726068415.png" alt="functor-applicative-monad"></p>\n<ul>\n<li><code class="gatsby-code-text">Functor</code>: 应用一个函数到包裹的值，使用<code class="gatsby-code-text">map</code>.</li>\n<li><code class="gatsby-code-text">Applicative</code>: 应用一个包裹的函数到包裹的值,使用<code class="gatsby-code-text">ap</code></li>\n<li><code class="gatsby-code-text">Monad</code>: 应用一个返回包裹值的函数到一个包裹的值，使用<code class="gatsby-code-text">chain</code>.</li>\n</ul>\n<p>参考资料与引用文章：<br>\n[1]: <a href="https://medium.com/@lettier/your-easy-guide-to-monads-applicatives-functors-862048d61610">your easy guide to monads applicatives functors</a><br>\n[2]: <a href="https://www.jdon.com/idea/functor-monad.html">functor-monad</a><br>\n[3]:《JavaScript函数式编程》<br>\n[4]: <a href="https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/">写给程序员的范畴论</a></p>',
frontmatter:{title:"俄罗斯套娃娃 - Monad",img:"./img/2015-02-10.jpg",author:["Sylvenas"],excerpt:null,catalogue:null},fields:{date:"February 11, 2020",path:"blog/monad/2020-02-12-俄罗斯套娃娃.md",slug:"/blog/2020/02/12/俄罗斯套娃娃.html"}},allMarkdownRemark:{edges:[{node:{frontmatter:{title:"俄罗斯套娃娃 - Monad"},fields:{slug:"/blog/2020/02/12/俄罗斯套娃娃.html"}}},{node:{frontmatter:{title:"纪念刘和珍君"},fields:{slug:"/blog/2020/02/07/记念刘和珍君.html"}}},{node:{frontmatter:{title:"应用函子 - Applicative"},fields:{slug:"/blog/2020/02/05/应用函子.html"}}},{node:{frontmatter:{title:"加法是自然之道 - Monoid"},fields:{slug:"/blog/2020/02/02/加法是自然之道.html"}}},{node:{frontmatter:{title:"动物庄园"},fields:{slug:"/blog/2020/02/01/动物庄园.html"}}},{node:{frontmatter:{title:"薛定谔的 Maybe - IO"},fields:{slug:"/blog/2020/01/30/薛定谔的Maybe.html"}}},{node:{frontmatter:{title:"Abort-Controller"},fields:{slug:"/blog/2020/01/18/abort-controller.html"}}},{node:{frontmatter:{title:"Catch React Error"},fields:{slug:"/blog/2020/01/02/catch-react-error.html"}}},{node:{frontmatter:{title:"Node.js 集群"},fields:{slug:"/blog/2019/11/12/node-cluster.html"}}},{node:{frontmatter:{title:"黑珍珠号的诅咒 - Functor"},fields:{slug:"/blog/2019/09/10/黑珍珠号的诅咒.html"}}}]}},pathContext:{slug:"/blog/2020/02/12/俄罗斯套娃娃.html"}}}});