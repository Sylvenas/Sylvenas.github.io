webpackJsonp([40317619944229],{449:function(n,s){n.exports={data:{markdownRemark:{html:'<h3 id="web-front-download-file-by-url"><a href="#web-front-download-file-by-url" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>web front download file by url</h3>\n<p>最常见的场景为前端点击下载按钮，请求后端接口，后端返回一个uri,然后前端负责下载，方法如下</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token comment">/**\n * 根据文件地址和文件名下载文件\n * @param {String} uri\n * @param {String} name\n */</span>\n<span class="token keyword">function</span> <span class="token function">downloadURI</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">var</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'a\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    link<span class="token punctuation">.</span>download <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    link<span class="token punctuation">.</span>href <span class="token operator">=</span> uri<span class="token punctuation">;</span>\n\n    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    link<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    link <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h3 id="获取元素相对于浏览器的lefttop的位置"><a href="#%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0%E7%9B%B8%E5%AF%B9%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84lefttop%E7%9A%84%E4%BD%8D%E7%BD%AE" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>获取元素相对于浏览器的left&#x26;top的位置</h3>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token comment">/**\n * 获取元素相对于浏览器的left&amp;top位置\n * @param {HTMLElement} node \n * @returns {left:number,top:number}\n */</span>\n<span class="token keyword">function</span> <span class="token function">getOffset</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> box <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">const</span> docElem <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">;</span>\n\t<span class="token keyword">return</span> <span class="token punctuation">{</span>\n\t\tleft<span class="token punctuation">:</span> box<span class="token punctuation">.</span>left <span class="token operator">+</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>pageXOffset <span class="token operator">||</span> docElem<span class="token punctuation">.</span>scrollLeft<span class="token punctuation">)</span> <span class="token operator">-</span>\n\t\t\t<span class="token punctuation">(</span>docElem<span class="token punctuation">.</span>clientLeft <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientLeft <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t\ttop<span class="token punctuation">:</span> box<span class="token punctuation">.</span>top <span class="token operator">+</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>pageYOffset <span class="token operator">||</span> docElem<span class="token punctuation">.</span>scrollTop<span class="token punctuation">)</span> <span class="token operator">-</span>\n\t\t\t<span class="token punctuation">(</span>docElem<span class="token punctuation">.</span>clientTop <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientTop <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h3 id="判断元素是否在可是区域内"><a href="#%E5%88%A4%E6%96%AD%E5%85%83%E7%B4%A0%E6%98%AF%E5%90%A6%E5%9C%A8%E5%8F%AF%E6%98%AF%E5%8C%BA%E5%9F%9F%E5%86%85" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>判断元素是否在可是区域内</h3>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token comment">/**\n * @param {HTMLElement} el \n * @returns {bool}\n*/</span>\n<span class="token keyword">function</span> <span class="token function">isElementInViewport</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> rect <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n        rect<span class="token punctuation">.</span>top <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>\n        rect<span class="token punctuation">.</span>left <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>\n        rect<span class="token punctuation">.</span>bottom <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n        rect<span class="token punctuation">.</span>right <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h3 id="前端异步打开新的网页"><a href="#%E5%89%8D%E7%AB%AF%E5%BC%82%E6%AD%A5%E6%89%93%E5%BC%80%E6%96%B0%E7%9A%84%E7%BD%91%E9%A1%B5" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>前端异步打开新的网页</h3>\n<p>经常遇到需要用户点击按钮，然后请求数据，然后打开新标签页的情况，例如：文件预览，由于浏览器的安全限制，不能在异步(ajax)代码中做页面跳转,例如下面的代码：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">\'...\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">{</span>\n    window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">\'http://www.google.com\'</span><span class="token punctuation">)</span>\n <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>很明显浏览器会拦截新标签页的打开，那么该怎么解决这个问题呢？</p>\n<ul>\n<li>\n<p>异步之前先打开，然后重定向</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> newPage <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token string">\'_blank\'</span><span class="token punctuation">)</span></code></pre>\n      </div>\n</li>\n</ul>\n<p>ajax.get(’…‘).then(res => {\nnewPage.location.href = ’<a href="https://www.google.com">https://www.google.com</a>’\n})</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-text"><code class="gatsby-code-text">* 动态创建a标签,只能在当前页打开\n``` js{4}\naxios.get(&#39;https://unpkg.com/axios/dist/axios.min.js&#39;).then(res =&gt; {\n    var link = document.createElement(&#39;a&#39;);\n\n    // link.setAttribute(&#39;target&#39;,&#39;_blank&#39;)\n    link.href = &#39;http://www.baidu.com&#39;;\n\n    link.click();\n})</code></pre>\n      </div>\n<p>但是注意上面的第四行代码，如果加上<code class="gatsby-code-text">target=&#39;_blank&#39;</code>属性的话，那么也会被浏览器拦截，所以这个方法有一定的缺陷</p>\n<ul>\n<li>\n<p>把异步请求改成同步，这个已经改变问题的主旨了不建议使用</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">const</span> success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\najax<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n<span class="token keyword">async</span><span class="token punctuation">:</span><span class="token boolean">false</span>\n<span class="token comment">// ....</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=></span> <span class="token punctuation">{</span>\nsuccess <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n      </div>\n</li>\n</ul>\n<p>if(success){\nwindow.open(’<a href="http://baidu.com&#x27;">http://baidu.com’</a>)\n}</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-text"><code class="gatsby-code-text"></code></pre>\n      </div>',frontmatter:{title:"常用小工具代码集合",img:"./img/2015-04-21.jpg",author:["sylvenas"],excerpt:"常用小工具代码集合",catalogue:null},fields:{date:"April 20, 2015",path:"blog/utils/2015-04-21-utils.md",slug:"/blog/2015/04/21/utils.html"}},allMarkdownRemark:{edges:[{node:{frontmatter:{title:"Abort-Controller"},fields:{slug:"/blog/2020/01/18/abort-controller.html"}}},{node:{frontmatter:{title:"Catch React Error"},fields:{slug:"/blog/2020/01/02/catch-react-error.html"}}},{node:{frontmatter:{title:"黑珍珠号的诅咒"},fields:{slug:"/blog/2019/09/10/黑珍珠号的诅咒.html"}}},{node:{frontmatter:{title:"移动端适配方案rem & vh、vw"},fields:{slug:"/blog/2019/05/27/mobile-css.html"}}},{node:{frontmatter:{title:"移动端开发基础知识"},fields:{slug:"/blog/2019/05/24/mobile.html"}}},{node:{frontmatter:{title:"How JavaScript Work: 内存管理/垃圾收集/内存泄漏"},fields:{slug:"/blog/2019/02/05/menory-management.html"}}},{node:{frontmatter:{title:"前端资源加载优先级"},fields:{slug:"/blog/2019/01/12/load-priority.html"}}},{node:{frontmatter:{title:"FP18：Semigroup"},fields:{slug:"/blog/2018/12/13/FP18-Semigroup.html"}}},{node:{frontmatter:{title:"FP17：Transform Naturally"},fields:{slug:"/blog/2018/12/11/FP17-Transform-Naturally.html"}}},{node:{frontmatter:{title:"How JavaScript Work: 引擎、运行时、调用栈概述"},fields:{slug:"/blog/2018/11/12/overview-of-the-engine-the-runtime-the-call-stack.html"}}}]}},pathContext:{slug:"/blog/2015/04/21/utils.html"}}}});