webpackJsonp([0xa6322ab29049],{555:function(e,c){e.exports={data:{markdownRemark:{html:'<p>相信大家都知道TCP是一个可靠传输的协议，那它是如何保证可靠的呢？</p>\n<p>为了实现可靠性传输，需要考虑很多事情，例如数据的破坏、丢包、重复以及分片顺序混乱等问题。如不能解决这些问题，也就无从谈起可靠传输。</p>\n<p>那么，TCP是通过序列号、确认应答、重发控制、连接管理以及窗口控制等机制实现可靠性传输的。</p>\n<p>今天，将重点介绍TCP的<strong>重传机制</strong>、<strong>滑动窗口</strong>、<strong>流量控制</strong>、<strong>拥塞控制</strong>。</p>\n<h3 id="重传机制"><a href="#%E9%87%8D%E4%BC%A0%E6%9C%BA%E5%88%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>重传机制</h3>\n<p>TCP实现可靠传输的方式之一，是通过序列号与确认应答。</p>\n<p>在TCP中，当发送端的数据到达接收主机时，接收端主机会返回一个确认应答消息，表示已收到消息。</p>\n<p><img src="https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4588832959/c5bf/8f4a/6fee/14797be1578e50cf0b82d4ca66911f9f.png" alt="正常的数据传输"></p>\n<p>但在错综复杂的网络，并不一定能如上图那么顺利能正常的数据传输，万一数据在传输过程中丢失了呢？</p>\n<p>所以TCP针对数据包丢失的情况，会用重传机制解决。</p>\n<ul>\n<li>超时重传</li>\n<li>快速重传</li>\n<li>SACK</li>\n<li>D-SACK</li>\n</ul>\n<h4 id="超时重传"><a href="#%E8%B6%85%E6%97%B6%E9%87%8D%E4%BC%A0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>超时重传</h4>\n<p>重传机制的其中一个方式，就是在发送数据时，设定一个定时器，当超过指定的时间后，没有收到对方的<code class="gatsby-code-text">ACK</code>确认应答报文，就会重发该数据，也就是我们常说的<strong>超时重传</strong>。</p>\n<p>TCP 会在以下两种情况发生超时重传：</p>\n<ul>\n<li>数据包丢失</li>\n<li>确认应答丢失</li>\n</ul>\n<p><img src="https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4588884163/5699/ec2d/d30c/9759f4d4649df48feef4d6eb795d3b96.png" alt="超时重传的两种情况"></p>\n<h5 id="超时时间应该设置为多少呢？"><a href="#%E8%B6%85%E6%97%B6%E6%97%B6%E9%97%B4%E5%BA%94%E8%AF%A5%E8%AE%BE%E7%BD%AE%E4%B8%BA%E5%A4%9A%E5%B0%91%E5%91%A2%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>超时时间应该设置为多少呢？</h5>\n<p>我们先来了解一下什么是<code class="gatsby-code-text">RTT</code>（Round-Trip Time 往返时延），从下图我们就可以知道：</p>\n<p><img src="https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4588895167/f2b3/54ae/8eec/abbd85cf878e5d29c5c2a333826d1c1d.png" alt="RTT"></p>\n<p><code class="gatsby-code-text">RTT</code>就是<strong>数据从网络一端传送到另一端所需的时间，也就是包的往返时间</strong>。</p>\n<p>超时重传时间是以<code class="gatsby-code-text">RTO</code>（Retransmission Timeout 超时重传时间）表示。假设在重传的情况下，超时时间<code class="gatsby-code-text">RTO</code>「较长或较短」时，会发生什么事情呢？</p>\n<p><img src="https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4588914450/aebf/8a11/c135/a1a11a6dfa94327442e31342c2fa3279.png" alt="超时时间较长与较短"></p>\n<p>上图中有两种超时时间不同的情况：</p>\n<ul>\n<li>当超时时间<code class="gatsby-code-text">RTO</code>较大时，重发就慢，丢了老半天才重发，没有效率，性能差；</li>\n<li>当超时时间<code class="gatsby-code-text">RTO</code>较小时，会导致可能并没有丢就重发，于是重发的就快，会增加网络拥塞，导致更多的超时，更多的超时导致更多的重发。</li>\n</ul>\n<p>精确的测量超时时间<code class="gatsby-code-text">RTO</code>的值是非常重要的，这可让我们的重传机制更高效。</p>\n<p>根据上述的两种情况，我们可以得知，超时重传时间RTO的值应该略大于报文往返RTT的值。</p>\n<p><img src="https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4588936814/997a/3b68/0f43/e140117d11507aa794a6e5d7b8833984.png" alt="RTO 应略大于 RTT"></p>\n<p>至此，可能大家觉得超时重传时间<code class="gatsby-code-text">RTO</code>的值计算，也不是很复杂嘛。</p>\n<p>好像就是在发送端发包时记下<code class="gatsby-code-text">t0</code>，然后接收端再把这个<code class="gatsby-code-text">ack</code>回来时再记一个<code class="gatsby-code-text">t1</code>，于是<code class="gatsby-code-text">RTT = t1 – t0</code>。没那么简单，<strong>这只是一个采样，不能代表普遍情况</strong>。</p>\n<p>实际上「报文往返<code class="gatsby-code-text">RTT</code>的值」是经常变化的，因为我们的网络也是时常变化的。也就因为「报文往返<code class="gatsby-code-text">RTT</code>的值」 是经常波动变化的，所以「超时重传时间<code class="gatsby-code-text">RTO</code>的值」应该是一个动态变化的值。</p>\n<p>我们来看看<code class="gatsby-code-text">Linux</code>是如何计算<code class="gatsby-code-text">RTO</code>的呢？</p>\n<p>估计往返时间，通常需要采样以下两个：</p>\n<ul>\n<li>需要<code class="gatsby-code-text">TCP</code>通过采样<code class="gatsby-code-text">RTT</code>的时间，然后进行加权平均，算出一个平滑<code class="gatsby-code-text">RTT</code>的值，而且这个值还是要不断变化的，因为网络状况不断地变化。</li>\n<li>除了采样<code class="gatsby-code-text">RTT</code>，还要采样<code class="gatsby-code-text">RTT</code>的波动范围，这样就避免如果<code class="gatsby-code-text">RTT</code>有一个大的波动的话，很难被发现的情况。</li>\n</ul>\n<p><a href="https://tools.ietf.org/html/rfc6289">RFC6289</a> 建议使用以下的公式计算<code class="gatsby-code-text">RTO</code>：</p>\n<p><img src="https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4588977559/2c5f/b62f/e344/762ac5081202cb902fa1f7f29bf7b69a.png" alt="RFC6289 建议的RTO计算"></p>\n<p>其中<code class="gatsby-code-text">SRTT</code>是计算平滑的<code class="gatsby-code-text">RTT</code>，<code class="gatsby-code-text">DevRTR</code>是计算平滑的<code class="gatsby-code-text">RTT</code>与最新<code class="gatsby-code-text">RTT</code>的差距。</p>\n<p>在 Linux 下，<code class="gatsby-code-text">α = 0.125</code>，<code class="gatsby-code-text">β = 0.25</code>， <code class="gatsby-code-text">μ = 1</code>，<code class="gatsby-code-text">∂ = 4</code>。别问怎么来的，问就是大量实验中调出来的。</p>\n<p>如果超时重发的数据，再次超时的时候，又需要重传的时候，<code class="gatsby-code-text">TCP</code>的策略是<strong>超时间隔加倍</strong>。</p>\n<p>也就是<strong>每当遇到一次超时重传的时候，都会将下一次超时时间间隔设为先前值的两倍。两次超时，就说明网络环境差，不宜频繁反复发送</strong>。</p>\n<p>超时触发重传存在的问题是，超时周期可能相对较长。那是不是可以有更快的方式呢？</p>\n<p>于是就可以用「快速重传」机制来解决超时重发的时间等待。</p>\n<h4 id="快速重传"><a href="#%E5%BF%AB%E9%80%9F%E9%87%8D%E4%BC%A0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>快速重传</h4>\n<p>TCP 还有另外一种<strong>快速重传（Fast Retransmit）</strong>机制，它<strong>不以时间为驱动，而是以数据驱动重传</strong>。</p>\n<p>快速重传机制，是如何工作的呢？其实很简单，一图胜千言。</p>\n<p><img src="https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4589015108/0bb5/c0ea/4933/e150980b328fb3c1360212b178ca502c.png" alt="快速重传机制"></p>\n<p>在上图，发送方发出了 1，2，3，4，5 份数据：</p>\n<ul>\n<li>第一份<code class="gatsby-code-text">Seq1</code>先送到了，于是就<code class="gatsby-code-text">Ack</code>回 2；</li>\n<li>结果<code class="gatsby-code-text">Seq2</code>因为某些原因没收到，<code class="gatsby-code-text">Seq3</code>到达了，于是还是<code class="gatsby-code-text">Ack</code>回<code class="gatsby-code-text">2</code>；</li>\n<li>后面的<code class="gatsby-code-text">Seq4</code>和<code class="gatsby-code-text">Seq5</code>都到了，但还是<code class="gatsby-code-text">Ack</code>回<code class="gatsby-code-text">2</code>，因为<code class="gatsby-code-text">Seq2</code>还是没有收到；</li>\n<li><strong>发送端收到了三个<code class="gatsby-code-text">Ack = 2</code>的确认，知道了<code class="gatsby-code-text">Seq2</code>还没有收到，就会在定时器过期之前，重传丢失的<code class="gatsby-code-text">Seq2</code></strong>。</li>\n<li>最后，收到了<code class="gatsby-code-text">Seq2</code>，此时因为<code class="gatsby-code-text">Seq3，Seq4，Seq5</code> 都收到了，于是<code class="gatsby-code-text">Ack</code>回<code class="gatsby-code-text">6</code>。</li>\n</ul>\n<p>所以，快速重传的工作方式是当收到三个相同的 ACK 报文时，会在定时器过期之前，重传丢失的报文段。</p>\n<p>快速重传机制只解决了一个问题，就是超时时间的问题，但是它依然面临着另外一个问题。就是<strong>重传的时候，是重传之前的一个，还是重传所有的问题</strong>。</p>\n<p>比如对于上面的例子，是重传 Seq2 呢？还是重传 Seq2、Seq3、Seq4、Seq5 呢？因为发送端并不清楚这连续的三个 Ack 2 是谁传回来的。</p>\n<p>根据 TCP 不同的实现，以上两种情况都是有可能的。可见，这是一把双刃剑。</p>\n<p>为了解决不知道该重传哪些 TCP 报文，于是就有<code class="gatsby-code-text">SACK</code>方法。</p>\n<h4 id="sack-方法"><a href="#sack-%E6%96%B9%E6%B3%95" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>SACK 方法</h4>\n<p>还有一种实现重传机制的方式叫：<code class="gatsby-code-text">SACK</code>（ Selective Acknowledgment 选择性确认）。</p>\n<p>这种方式需要在<code class="gatsby-code-text">TCP</code>头部「选项(option)」字段里加一个<code class="gatsby-code-text">SACK</code>的东西，它可以<strong>将缓存的地图发送给发送方</strong>，这样发送方就可以知道哪些数据收到了，哪些数据没收到，知道了这些信息，就可以<strong>只重传丢失的数据</strong>。</p>\n<p>如下图，发送方收到了三次同样的 ACK 确认报文，于是就会触发快速重发机制，通过 SACK 信息发现只有<code class="gatsby-code-text">200~299</code>这段数据丢失，则重发时，就只选择了这个<code class="gatsby-code-text">TCP</code>段进行重复。</p>\n<p><img src="https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4589116835/42a1/c862/cac8/326da0bd1a23c03a408fc1fad2fbe386.png" alt="选择性确认"></p>\n<h4 id="duplicate-sack"><a href="#duplicate-sack" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Duplicate SACK</h4>\n<p>Duplicate SACK 又称<code class="gatsby-code-text">D-SACK</code>，其主要<strong>使用了 SACK 来告诉「发送方」有哪些数据被重复接收了</strong>。</p>\n<p>下面举例两个栗子，来说明<code class="gatsby-code-text">D-SACK</code>的作用。</p>\n<h5 id="ack-丢包"><a href="#ack-%E4%B8%A2%E5%8C%85" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>ACK 丢包</h5>\n<p><img src="https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4589148186/a039/2023/69f1/9cdd88a1bd8d1573a1d0c88dc55af724.png" alt="ACK 丢包"></p>\n<ul>\n<li>「接收方」发给「发送方」的两个 ACK 确认应答都丢失了，所以发送方超时后，重传第一个数据包（3000 ~ 3499）</li>\n<li><strong>于是「接收方」发现数据是重复收到的，于是回了一个 SACK = 3000~3500</strong>，告诉「发送方」 3000~3500 的数据早已被接收了，因为 ACK 都到了 4000 了，已经意味着 4000 之前的所有数据都已收到，所以这个<code class="gatsby-code-text">SACK</code>就代表着<code class="gatsby-code-text">D-SACK</code>。</li>\n<li>这样「发送方」就知道了，数据没有丢，是「接收方」的<code class="gatsby-code-text">ACK</code>确认报文丢了。</li>\n</ul>\n<h5 id="网络延时"><a href="#%E7%BD%91%E7%BB%9C%E5%BB%B6%E6%97%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>网络延时</h5>\n<p><img src="https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4589258125/db23/6fb0/7d07/d5076cec202cd69934ed4a9244ff65d1.png" alt="网络延时"></p>\n<ul>\n<li>数据包（1000~1499） 被网络延迟了，导致「发送方」没有收到 Ack 1500 的确认报文。</li>\n<li>而后面报文到达的三个相同的 ACK 确认报文，就触发了快速重传机制，但是在重传后，被延迟的数据包（1000~1499）又到了「接收方」；</li>\n<li><strong>所以「接收方」回了一个 SACK=1000~1500，因为 ACK 已经到了 3000，所以这个 SACK 是 D-SACK，表示收到了重复的包</strong>。</li>\n<li>这样发送方就知道快速重传触发的原因不是发出去的包丢了，也不是因为回应的 ACK 包丢了，而是因为网络延迟了。</li>\n</ul>\n<p>可见，D-SACK 有这么几个好处：</p>\n<ul>\n<li>可以让「发送方」知道，是发出去的包丢了，还是接收方回应的 ACK 包丢了;</li>\n<li>可以知道是不是「发送方」的数据包被网络延迟了;</li>\n<li>可以知道网络中是不是把「发送方」的数据包给复制了;</li>\n</ul>\n<h3 id="滑动窗口"><a href="#%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>滑动窗口</h3>\n<h4 id="引入窗口概念的原因"><a href="#%E5%BC%95%E5%85%A5%E7%AA%97%E5%8F%A3%E6%A6%82%E5%BF%B5%E7%9A%84%E5%8E%9F%E5%9B%A0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>引入窗口概念的原因</h4>\n<p>我们都知道 TCP 是每发送一个数据，都要进行一次确认应答。当上一个数据包收到了应答了， 再发送下一个。</p>\n<p>这个模式就有点像我和你面对面聊天，你一句我一句。但这种方式的缺点是效率比较低的。</p>\n<p>如果你说完一句话，我在处理其他事情，没有及时回复你，那你不是要干等着我做完其他事情后，我回复你，你才能说下一句话，很显然这不现实。</p>\n<p><img src="https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4589323017/bde1/b169/beda/7096510ea594451e638b5eae317904f2.png" alt="按数据包进行确认应答"></p>\n<p>所以，这样的传输方式有一个缺点：<strong>数据包的往返时间越长，通信的效率就越低</strong>。</p>\n<p>为解决这个问题，TCP 引入了<strong>窗口</strong>这个概念。即使在往返时间较长的情况下，它也不会降低网络通信的效率。</p>\n<p>那么有了窗口，就可以指定窗口大小，窗口大小就是指<strong>无需等待确认应答，而可以继续发送数据的最大值</strong>。</p>\n<p>窗口的实现实际上是操作系统开辟的一个缓存空间，发送方主机在等到确认应答返回之前，必须在缓冲区中保留已发送的数据。如果按期收到确认应答，此时数据就可以从缓存区清除。</p>\n<p>假设窗口大小为 3 个 TCP 段，那么发送方就可以「连续发送」 3 个 TCP 段，并且中途若有 ACK 丢失，可以通过「下一个确认应答进行确认」。如下图：</p>\n<p><img src="https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4590288355/c8db/3422/85d2/5ace1d032bec386a9007c7832ae34ca7.png" alt="用滑动窗口方式并行处理"></p>\n<p>图中的<code class="gatsby-code-text">ACK 600</code>确认应答报文丢失，也没关系，因为可以通过下一个确认应答进行确认，只要发送方收到了<code class="gatsby-code-text">ACK 700</code>确认应答，就意味着<code class="gatsby-code-text">700</code>之前的所有数据「接收方」都收到了。这个模式就叫累计确认或者累计应答。</p>\n<h4 id="窗口大小由哪一方决定？"><a href="#%E7%AA%97%E5%8F%A3%E5%A4%A7%E5%B0%8F%E7%94%B1%E5%93%AA%E4%B8%80%E6%96%B9%E5%86%B3%E5%AE%9A%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>窗口大小由哪一方决定？</h4>\n<p>TCP 头里有一个字段叫<code class="gatsby-code-text">Window</code>，也就是窗口大小。</p>\n<p><strong>这个字段是接收端告诉发送端自己还有多少缓冲区可以接收数据。于是发送端就可以根据这个接收端的处理能力来发送数据，而不会导致接收端处理不过来。</strong></p>\n<p>所以，通常窗口的大小是由接收方的窗口大小来决定的。</p>\n<p>发送方发送的数据大小不能超过接收方的窗口大小，否则接收方就无法正常接收到数据。</p>\n<h4 id="发送方的滑动窗口"><a href="#%E5%8F%91%E9%80%81%E6%96%B9%E7%9A%84%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>发送方的滑动窗口</h4>\n<p>我们先来看看发送方的窗口，下图就是发送方缓存的数据，根据处理的情况分成四个部分，其中深蓝色方框是发送窗口，紫色方框是可用窗口：</p>\n<p><img src="https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4591070853/e9c8/a088/8b27/6ea17e1e07b31db67f20bf635df6effb.png" alt="发送方的滑动窗口"></p>\n<ul>\n<li>#1是已发送并收到 ACK确认的数据：1~31 字节</li>\n<li>#2是已发送但未收到 ACK确认的数据：32~45 字节</li>\n<li>#3是未发送但总大小在接收方处理范围内（接收方还有空间）：46~51字节</li>\n<li>#4是未发送但总大小超过接收方处理范围（接收方没有空间）：52字节以后</li>\n</ul>\n<p>在下图，当发送方把数据「全部」都一下发送出去后，可用窗口的大小就为 0 了，表明可用窗口耗尽，在没收到 ACK 确认之前是无法继续发送数据了。</p>\n<p><img src="https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4591097013/3aed/8133/704f/f7df58c9a3b4933e64c41abcef50ca1e.png" alt="可用窗口耗尽"></p>\n<p>在下图，当收到之前发送的数据<code class="gatsby-code-text">32~36</code>字节的 ACK 确认应答后，如果发送窗口的大小没有变化，则<strong>滑动窗口往右边移动 5 个字节，因为有 5 个字节的数据被应答确认</strong>，接下来<code class="gatsby-code-text">52~56</code>字节又变成了可用窗口，那么后续也就可以发送<code class="gatsby-code-text">52~56</code>这<code class="gatsby-code-text">5</code>个字节的数据了。</p>\n<p><img src="https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4591107429/d49d/5348/3a3c/9ad75127d8ec3f5b6911796ea7e1638b.png" alt="32 ~ 36 字节已确认"></p>\n<h4 id="程序是如何表示发送方的四个部分的呢？"><a href="#%E7%A8%8B%E5%BA%8F%E6%98%AF%E5%A6%82%E4%BD%95%E8%A1%A8%E7%A4%BA%E5%8F%91%E9%80%81%E6%96%B9%E7%9A%84%E5%9B%9B%E4%B8%AA%E9%83%A8%E5%88%86%E7%9A%84%E5%91%A2%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>程序是如何表示发送方的四个部分的呢？</h4>\n<p>TCP 滑动窗口方案使用三个指针来跟踪在四个传输类别中的每一个类别中的字节。其中两个指针是绝对指针（指特定的序列号），一个是相对指针（需要做偏移）。</p>\n<p><img src="https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4591203967/58eb/1c7d/cecb/baa0cdb70aa167eeafbdb99f0cf7e789.png" alt="SND.WND、SND.UN、SND.NXT"></p>\n<ul>\n<li>\n<p>SND.WND：表示发送窗口的大小（大小是由接收方指定的）；</p>\n</li>\n<li>\n<p>SND.UNA：是一个绝对指针，它指向的是已发送但未收到确认的第一个字节的序列号，也就是 #2 的第一个字节。</p>\n</li>\n<li>\n<p>SND.NXT：也是一个绝对指针，它指向未发送但可发送范围的第一个字节的序列号，也就是 #3 的第一个字节。</p>\n</li>\n<li>\n<p>指向 #4 的第一个字节是个相对指针，它需要 SND.UNA 指针加上 SND.WND 大小的偏移量，就可以指向 #4 的第一个字节了。</p>\n</li>\n</ul>\n<p>那么可用窗口大小的计算就可以是：</p>\n<p><strong>可用窗口大 = SND.WND -（SND.NXT - SND.UNA）</strong></p>\n<h4 id="接收方的滑动窗口"><a href="#%E6%8E%A5%E6%94%B6%E6%96%B9%E7%9A%84%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>接收方的滑动窗口</h4>\n<p>接下来我们看看接收方的窗口，接收窗口相对简单一些，根据处理的情况划分成三个部分：</p>\n<p><img src="https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4591237589/fdd9/ab3d/d5ea/1125ea95238b078dfd241c93175ec4bd.png" alt="接收窗口"></p>\n<ul>\n<li>#1 + #2 是已成功接收并确认的数据（等待应用进程读取）；</li>\n<li>#3 是未收到数据但可以接收的数据；</li>\n<li>#4 未收到数据并不可以接收的数据；</li>\n</ul>\n<p>其中三个接收部分，使用两个指针进行划分:</p>\n<ul>\n<li>RCV.WND：表示接收窗口的大小，它会通告给发送方。</li>\n<li>RCV.NXT：是一个指针，它指向期望从发送方发送来的下一个数据字节的序列号，也就是 #3 的第一个字节。</li>\n<li>指向 #4 的第一个字节是个相对指针，它需要 RCV.NXT 指针加上 RCV.WND 大小的偏移量，就可以指向 #4 的第一个字节了。</li>\n</ul>\n<h4 id="接收窗口和发送窗口的大小是相等的吗？"><a href="#%E6%8E%A5%E6%94%B6%E7%AA%97%E5%8F%A3%E5%92%8C%E5%8F%91%E9%80%81%E7%AA%97%E5%8F%A3%E7%9A%84%E5%A4%A7%E5%B0%8F%E6%98%AF%E7%9B%B8%E7%AD%89%E7%9A%84%E5%90%97%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>接收窗口和发送窗口的大小是相等的吗？</h4>\n<p>并不是完全相等，接收窗口的大小是约等于发送窗口的大小的。</p>\n<p>因为滑动窗口并不是一成不变的。比如，当接收方的应用进程读取数据的速度非常快的话，这样的话接收窗口可以很快的就空缺出来。那么新的接收窗口大小，是通过 TCP 报文中的 Windows 字段来告诉发送方。那么这个传输过程是存在时延的，所以接收窗口和发送窗口是约等于的关系。</p>\n<h3 id="流量控制"><a href="#%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>流量控制</h3>\n<p>发送方不能无脑的发数据给接收方，要考虑接收方处理能力。</p>\n<p>如果一直无脑的发数据给对方，但对方处理不过来，那么就会导致触发重发机制，从而导致网络流量的无端的浪费。</p>\n<p>为了解决这种现象发生，<strong>TCP 提供一种机制可以让「发送方」根据「接收方」的实际接收能力控制发送的数据量，这就是所谓的流量控制</strong>。</p>\n<p>下面举个栗子，为了简单起见，假设以下场景：</p>\n<ul>\n<li>客户端是接收方，服务端是发送方</li>\n<li>假设接收窗口和发送窗口相同，都为 200</li>\n<li>假设两个设备在整个传输过程中都保持相同的窗口大小，不受外界影响</li>\n</ul>\n<p><img src="https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4591405895/11a5/f4a6/045b/111589e422bf38df4464c68b89514ed4.png" alt="流量控制"></p>\n<p>根据上图的流量控制，说明下每个过程：</p>\n<ul>\n<li>1.客户端向服务端发送请求数据报文。这里要说明下，本次例子是把服务端作为发送方，所以没有画出服务端的接收窗口。</li>\n<li>2.服务端收到请求报文后，发送确认报文和 80 字节的数据，于是可用窗口 Usable 减少为 120 字节，同时 SND.NXT 指针也向右偏移 80 字节后，指向 321，这意味着下次发送数据的时候，序列号是 321。</li>\n<li>3.客户端收到 80 字节数据后，于是接收窗口往右移动 80 字节，RCV.NXT 也就指向 321，这意味着客户端期望的下一个报文的序列号是 321，接着发送确认报文给服务端。</li>\n<li>4.服务端再次发送了 120 字节数据，于是可用窗口耗尽为 0，服务端无法再继续发送数据。</li>\n<li>5.客户端收到 120 字节的数据后，于是接收窗口往右移动 120 字节，RCV.NXT 也就指向 441，接着发送确认报文给服务端。</li>\n<li>6.服务端收到对 80 字节数据的确认报文后，SND.UNA 指针往右偏移后指向 321，于是可用窗口 Usable 增大到 80。</li>\n<li>7.服务端收到对 120 字节数据的确认报文后，SND.UNA 指针往右偏移后指向 441，于是可用窗口 Usable 增大到 200。</li>\n<li>8.服务端可以继续发送了，于是发送了 160 字节的数据后，SND.NXT 指向 601，于是可用窗口 Usable 减少到 40。</li>\n<li>9.客户端收到 160 字节后，接收窗口往右移动了 160 字节，RCV.NXT 也就是指向了 601，接着发送确认报文给服务端。</li>\n<li>10.服务端收到对 160 字节数据的确认报文后，发送窗口往右移动了 160 字节，于是 SND.UNA 指针偏移了 160 后指向 601，可用窗口 Usable 也就增大至了 200。</li>\n</ul>\n<h4 id="操作系统缓冲区与滑动窗口的关系"><a href="#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BC%93%E5%86%B2%E5%8C%BA%E4%B8%8E%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E5%85%B3%E7%B3%BB" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>操作系统缓冲区与滑动窗口的关系</h4>\n<p>前面的流量控制例子，我们假定了发送窗口和接收窗口是不变的，但是实际上，发送窗口和接收窗口中所存放的字节数，都是放在操作系统内存缓冲区中的，而操作系统的缓冲区，会被操作系统调整。</p>\n<p>当应用进程没办法及时读取缓冲区的内容时，也会对我们的缓冲区造成影响。</p>\n<h5 id="那操心系统的缓冲区，是如何影响发送窗口和接收窗口的呢？"><a href="#%E9%82%A3%E6%93%8D%E5%BF%83%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BC%93%E5%86%B2%E5%8C%BA%EF%BC%8C%E6%98%AF%E5%A6%82%E4%BD%95%E5%BD%B1%E5%93%8D%E5%8F%91%E9%80%81%E7%AA%97%E5%8F%A3%E5%92%8C%E6%8E%A5%E6%94%B6%E7%AA%97%E5%8F%A3%E7%9A%84%E5%91%A2%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>那操心系统的缓冲区，是如何影响发送窗口和接收窗口的呢？</h5>\n<p><strong>我们先来看看第一个例子</strong></p>\n<p>当应用程序没有及时读取缓存时，发送窗口和接收窗口的变化。\n考虑以下场景：</p>\n<ul>\n<li>客户端作为发送方，服务端作为接收方，发送窗口和接收窗口初始大小为 360；</li>\n<li>服务端非常的繁忙，当收到客户端的数据时，应用层不能及时读取数据。</li>\n</ul>\n<p><img src="https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4591677934/3022/da48/6b3b/f44fc49d6c87dc80770cdde3d870e035.png"></p>\n<p>根据上图的流量控制，说明下每个过程：</p>\n<ul>\n<li>1.客户端发送 140 字节数据后，可用窗口变为 220 （360 - 140）。</li>\n<li>2.服务端收到 140 字节数据，但是服务端非常繁忙，应用进程只读取了 40 个字节，还有 100 字节占用着缓冲区，于是接收窗口收缩到了 260 （360 - 100），最后发送确认信息时，将窗口大小通告给客户端。</li>\n<li>3.客户端收到确认和窗口通告报文后，发送窗口减少为 260。</li>\n<li>4.客户端发送 180 字节数据，此时可用窗口减少到 80。</li>\n<li>5.服务端收到 180 字节数据，但是应用程序没有读取任何数据，这 180 字节直接就留在了缓冲区，于是接收窗口收缩到了 80 （260 - 180），并在发送确认信息时，通过窗口大小给客户端。</li>\n<li>6.客户端收到确认和窗口通告报文后，发送窗口减少为 80。</li>\n<li>7.客户端发送 80 字节数据后，可用窗口耗尽。</li>\n<li>8.服务端收到 80 字节数据，但是应用程序依然没有读取任何数据，这 80 字节留在了缓冲区，于是接收窗口收缩到了 0，并在发送确认信息时，通过窗口大小给客户端。</li>\n<li>9.客户端收到确认和窗口通告报文后，发送窗口减少为 0。</li>\n</ul>\n<p>可见最后窗口都收缩为 0 了，也就是发生了窗口关闭。当发送方可用窗口变为 0 时，发送方实际上会定时发送窗口探测报文，以便知道接收方的窗口是否发生了改变，这个内容后面会说，这里先简单提一下。</p>\n<p><strong>我们先来看看第二个例子</strong></p>\n<p>当服务端系统资源非常紧张的时候，操心系统可能会直接减少了接收缓冲区大小，这时应用程序又无法及时读取缓存数据，那么这时候就有严重的事情发生了，会出现数据包丢失的现象。</p>\n<p><img src="https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4591715978/b845/f6f5/5101/a2ab52ba5f9230679f3ed2f35529ae35.png"></p>\n<p>说明下每个过程：</p>\n<ul>\n<li>1.客户端发送 140 字节的数据，于是可用窗口减少到了 220。</li>\n<li>2.服务端因为现在非常的繁忙，操作系统于是就把接收缓存减少了 120 字节，当收到 140 字节数据后，又因为应用程序没有读取任何数据，所以 140 字节留在了缓冲区中，于是接收窗口大小从 360 收缩成了 100，最后发送确认信息时，通告窗口大小给对方。</li>\n<li>3.此时客户端因为还没有收到服务端的通告窗口报文，所以不知道此时接收窗口收缩成了 100，客户端只会看自己的可用窗口还有 220，所以客户端就发送了 180 字节数据，于是可用窗口减少到 40。</li>\n<li>4.服务端收到了 180 字节数据时，发现数据大小超过了接收窗口的大小，于是就把数据包丢失了。</li>\n<li>5.客户端收到第 2 步时，服务端发送的确认报文和通告窗口报文，尝试减少发送窗口到 100，把窗口的右端向左收缩了 80，此时可用窗口的大小就会出现诡异的负值。</li>\n</ul>\n<p>所以，如果发生了先减少缓存，再收缩窗口，就会出现丢包的现象。</p>\n<p>为了防止这种情况发生，TCP 规定是不允许同时减少缓存又收缩窗口的，而是采用先收缩窗口，过段时间再减少缓存，这样就可以避免了丢包情况。</p>\n<h4 id="窗口关闭"><a href="#%E7%AA%97%E5%8F%A3%E5%85%B3%E9%97%AD" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>窗口关闭</h4>\n<p>在前面我们都看到了，TCP 通过让接收方指明希望从发送方接收的数据大小（窗口大小）来进行流量控制。</p>\n<p><strong>如果窗口大小为 0 时，就会阻止发送方给接收方传递数据，直到窗口变为非 0 为止，这就是窗口关闭</strong>。</p>\n<h5 id="窗口关闭潜在的危险"><a href="#%E7%AA%97%E5%8F%A3%E5%85%B3%E9%97%AD%E6%BD%9C%E5%9C%A8%E7%9A%84%E5%8D%B1%E9%99%A9" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>窗口关闭潜在的危险</h5>\n<p>接收方向发送方通告窗口大小时，是通过 ACK 报文来通告的。</p>\n<p>那么，当发生窗口关闭时，接收方处理完数据后，会向发送方通告一个窗口非 0 的 ACK 报文，如果这个通告窗口的 ACK 报文在网络中丢失了，那麻烦就大了。</p>\n<p><img src="https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4591910247/92b9/c8db/a450/53e81f285fa83df363b3b596ccb0a8a9.png"></p>\n<p>窗口关闭潜在的危险\n这会导致发送方一直等待接收方的非 0 窗口通知，接收方也一直等待发送方的数据，如不采取措施，这种相互等待的过程，会造成了死锁的现象。</p>\n<h5 id="tcp-是如何解决窗口关闭时，潜在的死锁现象呢？"><a href="#tcp-%E6%98%AF%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E7%AA%97%E5%8F%A3%E5%85%B3%E9%97%AD%E6%97%B6%EF%BC%8C%E6%BD%9C%E5%9C%A8%E7%9A%84%E6%AD%BB%E9%94%81%E7%8E%B0%E8%B1%A1%E5%91%A2%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>TCP 是如何解决窗口关闭时，潜在的死锁现象呢？</h5>\n<p>为了解决这个问题，TCP 为每个连接设有一个持续定时器，<strong>只要 TCP 连接一方收到对方的零窗口通知，就启动持续计时器</strong>。</p>\n<p>如果持续计时器超时，就会发送<strong>窗口探测 ( Window probe ) 报文</strong>，而对方在确认这个探测报文时，给出自己现在的接收窗口大小。</p>\n<p><img src="https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4591938978/49ab/353a/342a/bcee1b6e2e5ea25afff3d93bd8809a93.png" alt="窗口探测"></p>\n<ul>\n<li>如果接收窗口仍然为 0，那么收到这个报文的一方就会重新启动持续计时器；</li>\n<li>如果接收窗口不是 0，那么死锁的局面就可以被打破了。</li>\n</ul>\n<p>窗口探测的次数一般为 3 次，每次大约 30-60 秒（不同的实现可能会不一样）。如果 3 次过后接收窗口还是 0 的话，有的 TCP 实现就会发<code class="gatsby-code-text">RST</code>报文来中断连接。</p>\n<h5 id="糊涂窗口综合症"><a href="#%E7%B3%8A%E6%B6%82%E7%AA%97%E5%8F%A3%E7%BB%BC%E5%90%88%E7%97%87" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>糊涂窗口综合症</h5>\n<p>如果接收方太忙了，来不及取走接收窗口里的数据，那么就会导致发送方的发送窗口越来越小。</p>\n<p>到最后，<strong>如果接收方腾出几个字节并告诉发送方现在有几个字节的窗口，而发送方会义无反顾地发送这几个字节，这就是糊涂窗口综合症</strong>。</p>\n<p>要知道，我们的 <code class="gatsby-code-text">TCP + IP</code> 头有 40 个字节，为了传输那几个字节的数据，要达上这么大的开销，这太不经济了。</p>\n<p>就好像一个可以承载 50 人的大巴车，每次来了一两个人，就直接发车。除非家里有矿的大巴司机，才敢这样玩，不然迟早破产。要解决这个问题也不难，大巴司机等乘客数量超过了 25 个，才认定可以发车。</p>\n<p>现举个糊涂窗口综合症的栗子，考虑以下场景：</p>\n<p>接收方的窗口大小是 360 字节，但接收方由于某些原因陷入困境，假设接收方的应用层读取的能力如下：</p>\n<ul>\n<li>接收方每接收 3 个字节，应用程序就只能从缓冲区中读取 1 个字节的数据；</li>\n<li>在下一个发送方的 TCP 段到达之前，应用程序还从缓冲区中读取了 40 个额外的字节；</li>\n</ul>\n<p><img src="https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4592077522/5274/721b/944b/439c19bbfbb9c2b6d8dfc9d8b5e3fa8d.png"></p>\n<p>每个过程的窗口大小的变化，在图中都描述的很清楚了，可以发现窗口不断减少了，并且发送的数据都是比较小的了。</p>\n<p>所以，糊涂窗口综合症的现象是可以发生在发送方和接收方：</p>\n<ul>\n<li>接收方可以通告一个小的窗口</li>\n<li>而发送方可以发送小数据</li>\n</ul>\n<p>于是，要解决糊涂窗口综合症，就解决上面两个问题就可以了</p>\n<ul>\n<li>让接收方不通告小窗口给发送方</li>\n<li>让发送方避免发送小数据</li>\n</ul>\n<h5 id="怎么让接收方不通告小窗口呢？"><a href="#%E6%80%8E%E4%B9%88%E8%AE%A9%E6%8E%A5%E6%94%B6%E6%96%B9%E4%B8%8D%E9%80%9A%E5%91%8A%E5%B0%8F%E7%AA%97%E5%8F%A3%E5%91%A2%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>怎么让接收方不通告小窗口呢？</h5>\n<p>接收方通常的策略如下:</p>\n<p>当「窗口大小」小于 min( MSS，缓存空间/2 ) ，也就是小于 MSS 与 1/2 缓存大小中的最小值时，就会向发送方通告窗口为 0，也就阻止了发送方再发数据过来。</p>\n<p>等到接收方处理了一些数据后，窗口大小 >= MSS，或者接收方缓存空间有一半可以使用，就可以把窗口打开让发送方发送数据过来。</p>\n<h5 id="怎么让发送方避免发送小数据呢？"><a href="#%E6%80%8E%E4%B9%88%E8%AE%A9%E5%8F%91%E9%80%81%E6%96%B9%E9%81%BF%E5%85%8D%E5%8F%91%E9%80%81%E5%B0%8F%E6%95%B0%E6%8D%AE%E5%91%A2%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>怎么让发送方避免发送小数据呢？</h5>\n<p>发送方通常的策略:\n使用 Nagle 算法，该算法的思路是延时处理，它满足以下两个条件中的一条才可以发送数据：</p>\n<ul>\n<li>要等到窗口大小 >= MSS 或是 数据大小 >= MSS</li>\n<li>收到之前发送数据的 ack 回包</li>\n</ul>\n<p>只要没满足上面条件中的一条，发送方一直在囤积数据，直到满足上面的发送条件。</p>\n<h3 id="拥塞控制"><a href="#%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>拥塞控制</h3>\n<h4 id="为什么要有拥塞控制呀，不是有流量控制了吗？"><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9C%89%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E5%91%80%EF%BC%8C%E4%B8%8D%E6%98%AF%E6%9C%89%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%E4%BA%86%E5%90%97%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>为什么要有拥塞控制呀，不是有流量控制了吗？</h4>\n<p>前面的流量控制是避免「发送方」的数据填满「接收方」的缓存，但是并不知道网络的中发生了什么。</p>\n<p>一般来说，计算机网络都处在一个共享的环境。因此也有可能会因为其他主机之间的通信使得网络拥堵。</p>\n<p><strong>在网络出现拥堵时，如果继续发送大量数据包，可能会导致数据包时延、丢失等，这时 TCP 就会重传数据，但是一重传就会导致网络的负担更重，于是会导致更大的延迟以及更多的丢包，这个情况就会进入恶性循环被不断地放大…</strong></p>\n<p>所以，TCP 不能忽略网络上发生的事，它被设计成一个无私的协议，当网络发送拥塞时，TCP 会自我牺牲，降低发送的数据量。</p>\n<p>于是，就有了<strong>拥塞控制</strong>，控制的目的就是<strong>避免「发送方」的数据填满整个网络</strong>。</p>\n<p>为了在「发送方」调节所要发送数据的量，定义了一个叫做「<strong>拥塞窗口</strong>」的概念。</p>\n<h4 id="什么是拥塞窗口？和发送窗口有什么关系呢？"><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E6%8B%A5%E5%A1%9E%E7%AA%97%E5%8F%A3%EF%BC%9F%E5%92%8C%E5%8F%91%E9%80%81%E7%AA%97%E5%8F%A3%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB%E5%91%A2%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>什么是拥塞窗口？和发送窗口有什么关系呢？</h4>\n<p><strong>拥塞窗口 cwnd</strong>是发送方维护的一个的状态变量，它会根据<strong>网络的拥塞程度动态变化的</strong>。</p>\n<p>我们在前面提到过发送窗口 swnd 和接收窗口 rwnd 是约等于的关系，那么由于加入了拥塞窗口的概念后，此时发送窗口的值是swnd = min(cwnd, rwnd)，也就是拥塞窗口和接收窗口中的最小值。</p>\n<p>拥塞窗口 cwnd 变化的规则：</p>\n<ul>\n<li>只要网络中没有出现拥塞，cwnd 就会增大；</li>\n<li>但网络中出现了拥塞，cwnd 就减少；</li>\n</ul>\n<h5 id="那么怎么知道当前网络是否出现了拥塞呢？"><a href="#%E9%82%A3%E4%B9%88%E6%80%8E%E4%B9%88%E7%9F%A5%E9%81%93%E5%BD%93%E5%89%8D%E7%BD%91%E7%BB%9C%E6%98%AF%E5%90%A6%E5%87%BA%E7%8E%B0%E4%BA%86%E6%8B%A5%E5%A1%9E%E5%91%A2%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>那么怎么知道当前网络是否出现了拥塞呢？</h5>\n<p>其实只要「发送方」没有在规定时间内接收到 ACK 应答报文，也就是<strong>发生了超时重传，就会认为网络出现了用拥塞</strong>。</p>\n<h5 id="拥塞控制有哪些控制算法？"><a href="#%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E6%9C%89%E5%93%AA%E4%BA%9B%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>拥塞控制有哪些控制算法？</h5>\n<p>拥塞控制主要是四个算法：</p>\n<ul>\n<li>慢启动</li>\n<li>拥塞避免</li>\n<li>拥塞发生</li>\n<li>快速恢复</li>\n</ul>\n<h5 id="慢启动"><a href="#%E6%85%A2%E5%90%AF%E5%8A%A8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>慢启动</h5>\n<p>TCP 在刚建立连接完成后，首先是有个慢启动的过程，这个慢启动的意思就是一点一点的提高发送数据包的数量，如果一上来就发大量的数据，这不是给网络添堵吗？</p>\n<p>慢启动的算法记住一个规则就行：<strong>当发送方每收到一个 ACK，拥塞窗口 cwnd 的大小就会加 1</strong>。</p>\n<p>这里假定拥塞窗口 cwnd 和发送窗口 swnd 相等，下面举个栗子：</p>\n<p>连接建立完成后，一开始初始化 cwnd = 1，表示可以传一个 MSS 大小的数据。\n当收到一个 ACK 确认应答后，cwnd 增加 1，于是一次能够发送 2 个\n当收到 2 个的 ACK 确认应答后， cwnd 增加 2，于是就可以比之前多发2 个，所以这一次能够发送 4 个\n当这 4 个的 ACK 确认到来的时候，每个确认 cwnd 增加 1， 4 个确认 cwnd 增加 4，于是就可以比之前多发 4 个，所以这一次能够发送 8 个。</p>\n<p><img src="https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4592276216/3ec6/697c/3bea/431db7f840cd7af001cb696d008f8bfc.png"></p>\n<p>慢启动算法\n可以看出慢启动算法，发包的个数是<strong>指数性的增长</strong>。</p>\n<p>那慢启动涨到什么时候是个头呢？</p>\n<p>有一个叫慢启动门限<code class="gatsby-code-text">ssthresh</code>（slow start threshold）状态变量。</p>\n<ul>\n<li>当<code class="gatsby-code-text">cwnd &lt; ssthresh</code>时，使用慢启动算法。</li>\n<li>当<code class="gatsby-code-text">cwnd &gt;= ssthresh</code>时，就会使用「拥塞避免算法」。</li>\n</ul>\n<h5 id="拥塞避免算法"><a href="#%E6%8B%A5%E5%A1%9E%E9%81%BF%E5%85%8D%E7%AE%97%E6%B3%95" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>拥塞避免算法</h5>\n<p>前面说道，当拥塞窗口 cwnd 「超过」慢启动门限 ssthresh 就会进入拥塞避免算法。</p>\n<p>一般来说 ssthresh 的大小是 65535 字节。</p>\n<p>那么进入拥塞避免算法后，它的规则是：<strong>每当收到一个 ACK 时，cwnd 增加 1/cwnd</strong>。</p>\n<p>接上前面的慢启动的栗子，现假定 ssthresh 为 8：</p>\n<ul>\n<li>当 8 个 ACK 应答确认到来时，每个确认增加 1/8，8 个 ACK 确认 cwnd 一共增加 1，于是这一次能够发送 9 个 MSS 大小的数据，变成了线性增长。</li>\n</ul>\n<p><img src="https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4592304867/0faa/4e74/29af/f8cd189ecbabca5714223b39ad134861.png"></p>\n<p>拥塞避免\n所以，我们可以发现，拥塞避免算法就是将原本慢启动算法的指数增长变成了线性增长，还是增长阶段，但是增长速度缓慢了一些。</p>\n<p>就这么一直增长着后，网络就会慢慢进入了拥塞的状况了，于是就会出现丢包现象，这时就需要对丢失的数据包进行重传。</p>\n<p>当触发了重传机制，也就进入了「拥塞发生算法」。</p>\n<h5 id="拥塞发生"><a href="#%E6%8B%A5%E5%A1%9E%E5%8F%91%E7%94%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>拥塞发生</h5>\n<p>当网络出现拥塞，也就是会发生数据包重传，重传机制主要有两种：</p>\n<ul>\n<li>超时重传</li>\n<li>快速重传\n这两种使用的拥塞发送算法是不同的，接下来分别来说说。</li>\n</ul>\n<h5 id="发生超时重传的拥塞发生算法"><a href="#%E5%8F%91%E7%94%9F%E8%B6%85%E6%97%B6%E9%87%8D%E4%BC%A0%E7%9A%84%E6%8B%A5%E5%A1%9E%E5%8F%91%E7%94%9F%E7%AE%97%E6%B3%95" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>发生超时重传的拥塞发生算法</h5>\n<p>当发生了「超时重传」，则就会使用拥塞发生算法。</p>\n<p>这个时候，ssthresh 和 cwnd 的值会发生变化：</p>\n<ul>\n<li>ssthresh 设为 cwnd/2，</li>\n<li>cwnd 重置为 1</li>\n</ul>\n<p><img src="https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4592331001/0607/3743/99ea/ea5b7fcf7a39563a43b077d1eac3b431.png"></p>\n<p>拥塞发送 —— 超时重传\n接着，就重新开始慢启动，慢启动是会突然减少数据流的。这真是一旦「超时重传」，马上回到解放前。但是这种方式太激进了，反应也很强烈，会造成网络卡顿。</p>\n<p>就好像本来在秋名山高速漂移着，突然来个紧急刹车，轮胎受得了吗。。。</p>\n<h5 id="发生快速重传的拥塞发生算法"><a href="#%E5%8F%91%E7%94%9F%E5%BF%AB%E9%80%9F%E9%87%8D%E4%BC%A0%E7%9A%84%E6%8B%A5%E5%A1%9E%E5%8F%91%E7%94%9F%E7%AE%97%E6%B3%95" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>发生快速重传的拥塞发生算法</h5>\n<p>还有更好的方式，前面我们讲过「快速重传算法」。当接收方发现丢了一个中间包的时候，发送三次前一个包的 ACK，于是发送端就会快速地重传，不必等待超时再重传。</p>\n<p>TCP 认为这种情况不严重，因为大部分没丢，只丢了一小部分，则 ssthresh 和 cwnd 变化如下：</p>\n<ul>\n<li>cwnd = cwnd/2 ，也就是设置为原来的一半;</li>\n<li>ssthresh = cwnd;</li>\n<li>进入快速恢复算法;</li>\n</ul>\n<h5 id="快速恢复"><a href="#%E5%BF%AB%E9%80%9F%E6%81%A2%E5%A4%8D" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>快速恢复</h5>\n<p>快速重传和快速恢复算法一般同时使用，快速恢复算法是认为，你还能收到 3 个重复 ACK 说明网络也不那么糟糕，所以没有必要像 RTO 超时那么强烈。</p>\n<p>正如前面所说，进入快速恢复之前，cwnd 和 ssthresh 已被更新了：</p>\n<ul>\n<li>cwnd = cwnd/2 ，也就是设置为原来的一半;</li>\n<li>ssthresh = cwnd;</li>\n</ul>\n<p>然后，进入快速恢复算法如下：</p>\n<ul>\n<li>拥塞窗口 cwnd = ssthresh + 3 （ 3 的意思是确认有 3 个数据包被收到了）；</li>\n<li>重传丢失的数据包；</li>\n<li>如果再收到重复的 ACK，那么 cwnd 增加 1；</li>\n<li>如果收到新数据的 ACK 后，把 cwnd 设置为第一步中的 ssthresh 的值，原因是该 ACK 确认了新的数据，说明从 duplicated ACK 时的数据都已收到，该恢复过程已经结束，可以回到恢复之前的状态了，也即再次进入拥塞避免状态；</li>\n</ul>\n<p><img src="https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4592361241/d959/2202/8b5a/345dd754a9642a09607f99bcb5865d84.png"></p>\n<p>快速重传和快速恢复\n也就是没有像「超时重传」一夜回到解放前，而是还在比较高的值，后续呈线性增长。</p>\n<h5 id="拥塞算法示意图"><a href="#%E6%8B%A5%E5%A1%9E%E7%AE%97%E6%B3%95%E7%A4%BA%E6%84%8F%E5%9B%BE" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>拥塞算法示意图</h5>\n<p>好了，以上就是拥塞控制的全部内容了，看完后，你再来看下面这张图片，每个过程我相信你都能明白：</p>\n<p><img src="https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4592372193/f9ad/744b/b31a/4ac3ce4f9f24633f8afa374ba79284cf.png"></p>\n<h3 id="抓包"><a href="#%E6%8A%93%E5%8C%85" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>抓包</h3>\n<p>网络世界中的数据包交互我们肉眼是看不见的，它们就好像隐形了一样，我们对着课本学习计算机网络的时候就会觉得非常的抽象，加大了学习的难度。\n下面介绍两大抓包利器：<code class="gatsby-code-text">tcpdump</code>和<code class="gatsby-code-text">Wireshark</code></p>\n<h4 id="tcpdump-和-wireshark-有什么区别？"><a href="#tcpdump-%E5%92%8C-wireshark-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>tcpdump 和 Wireshark 有什么区别？</h4>\n<p><code class="gatsby-code-text">tcpdump</code>和<code class="gatsby-code-text">Wireshark</code>就是最常用的网络抓包和分析工具，更是分析网络性能必不可少的利器。</p>\n<ul>\n<li><code class="gatsby-code-text">tcpdump</code>仅支持命令行格式使用，常用在 Linux 服务器中抓取和分析网络包。</li>\n<li><code class="gatsby-code-text">Wireshark</code>除了可以抓包外，还提供了可视化分析网络包的图形页面。</li>\n</ul>\n<p>所以，这两者实际上是搭配使用的，先用 tcpdump 命令在 Linux 服务器上抓包，接着把抓包的文件拖出到 Windows/Mac 电脑后，用 Wireshark 可视化分析。</p>\n<p>下面简单的举例说明：\n我们要抓包请求数据地址为：<code class="gatsby-code-text">http://tcpdynamics.uk:4033/16K</code>的通信链路，则直接命令行输入：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-sh"><code class="gatsby-code-sh">sudo tcpdump host tcpdynamics.uk and port 4033 -w file1.cap</code></pre>\n      </div>\n<blockquote>\n<p>-w file1.cap 表示把抓包的数据通信链路保存到文件file1.cap中，后续交给Wireshark图形化解析</p>\n</blockquote>\n<p>然后继续使用命令行工具curl,请求数据:</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-sh"><code class="gatsby-code-sh">curl -v -4 -o /dev/null http://tcpdynamics.uk:4033/16K</code></pre>\n      </div>\n<p>数据请求完毕之后，在第一个终端中<code class="gatsby-code-text">control + c</code>，终止抓包，保存<code class="gatsby-code-text">file1.cap</code>文件,\n将生成的文件拖入<code class="gatsby-code-text">Wireshark</code>中，进行展示全部的建立链接的链路，可以看到tcp建立连接的“三次握手”和最后断开连接的“四次挥手”，更重要的是可以看到数据传输过程中的“丢包”，“快速重发”等等机制。</p>',
frontmatter:{title:"TCP 重传、滑动窗口、流量控制、拥塞控制",img:"./img/2015-03-25.jpg",author:["sylvenas"],excerpt:null,catalogue:["重传机制","滑动窗口","流量控制","拥塞控制","抓包"]},fields:{date:"December 21, 2018",path:"blog/http/2018-12-22-tcp.md",slug:"/blog/2018/12/22/tcp.html"}},allMarkdownRemark:{edges:[{node:{frontmatter:{title:"React Hooks 原理及实现"},fields:{slug:"/blog/2021/03/30/react-hooks.html"}}},{node:{frontmatter:{title:"被讨厌的勇气"},fields:{slug:"/blog/2020/05/14/被讨厌的勇气.html"}}},{node:{frontmatter:{title:"自然变换 - Natural Transformation"},fields:{slug:"/blog/2020/05/02/自然变换.html"}}},{node:{frontmatter:{title:"遍历与队列 - Traversable"},fields:{slug:"/blog/2020/04/25/遍历与队列.html"}}},{node:{frontmatter:{title:"加法是自然之道 - Monoid"},fields:{slug:"/blog/2020/03/02/加法是自然之道.html"}}},{node:{frontmatter:{title:"俄罗斯套娃娃 - Monad"},fields:{slug:"/blog/2020/02/12/俄罗斯套娃娃.html"}}},{node:{frontmatter:{title:"纪念刘和珍君"},fields:{slug:"/blog/2020/02/07/记念刘和珍君.html"}}},{node:{frontmatter:{title:"应用函子 - Applicative"},fields:{slug:"/blog/2020/02/05/应用函子.html"}}},{node:{frontmatter:{title:"动物庄园"},fields:{slug:"/blog/2020/02/01/动物庄园.html"}}},{node:{frontmatter:{title:"薛定谔的 Maybe - IO"},fields:{slug:"/blog/2020/01/30/薛定谔的Maybe.html"}}}]}},pathContext:{slug:"/blog/2018/12/22/tcp.html"}}}});