{"data":{"markdownRemark":{"html":"<h3 id=\"observer\"><a href=\"#observer\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Observer</h3>\n<p><strong>what is Observer?</strong> Observer(观察者)是Observable(可观察对象)推送的数据的消费者。在Rxjs中，Observer是由回调组成的对象，对象的键名分别为：<code class=\"gatsby-code-text\">next</code>、<code class=\"gatsby-code-text\">error</code>和<code class=\"gatsby-code-text\">complete</code>，以此接受Observable推送的不同类型的通知，下面的代码是Observer的一个简单示例：</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">var</span> observer <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  next<span class=\"token punctuation\">:</span> x <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Observer got a next value: '</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n</span><span class=\"gatsby-highlight-code-line\">  error<span class=\"token punctuation\">:</span> err <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Observer got an error: '</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n</span><span class=\"gatsby-highlight-code-line\">  complete<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Observer got a complete notification'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Observer的使用，只需要在<code class=\"gatsby-code-text\">subscribe</code>Observable时，把observer作为参数传递给<code class=\"gatsby-code-text\">subscribe</code>方法即可。</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">observable<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<blockquote>\n<p>Observers are just objects with three callbacks, one for each type of notification that an Observable may deliver.</p>\n</blockquote>\n<p>在Rxjs中，Observer中的<code class=\"gatsby-code-text\">next</code>,<code class=\"gatsby-code-text\">error</code>,<code class=\"gatsby-code-text\">complete</code>三个处理逻辑是可以部分缺失的，即使缺失了部分，Observable仍能正常运行的，只不过是对应的处理逻辑会被忽略，因为没有定义相应的处理逻辑，Observable也就无法处理的。</p>\n<p>下面例子中的Observer就缺少了<code class=\"gatsby-code-text\">complete</code>的处理逻辑：</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">var</span> observer <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  next<span class=\"token punctuation\">:</span> x <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Observer got a next value: '</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  error<span class=\"token punctuation\">:</span> err <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Observer got an error: '</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>在<code class=\"gatsby-code-text\">subscribe</code>Observable的时候，可以直接把函数作为参数传递给<code class=\"gatsby-code-text\">subscribe</code>方法，而不用传入整个Observer对象,当只传入一个函数的时候，Rxjs在内部会创建一个只含有<code class=\"gatsby-code-text\">next</code>处理逻辑的Observer。</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">observable<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Observer got a next value: '</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>当然你也可以把<code class=\"gatsby-code-text\">next</code>,<code class=\"gatsby-code-text\">error</code>,<code class=\"gatsby-code-text\">complete</code>的回调函数作为参数全部传入<code class=\"gatsby-code-text\">subscribe</code>方法：</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">observable<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>\n  x <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Observer got a next value: '</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  err <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Observer got an error: '</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Observer got a complete notification'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>上面的例子，在Observable的内部，依然可以正常的调用<code class=\"gatsby-code-text\">observer.next</code>,<code class=\"gatsby-code-text\">observer.error</code>,<code class=\"gatsby-code-text\">observer.complete</code>三个方法。</p>","frontmatter":{"title":"Rxjs Observer","img":"./img/2017-11-08.jpeg","author":["Sylvenas"],"excerpt":null,"catalogue":null},"fields":{"date":"November 07, 2017","path":"blog/rxjs/2017-11-8-Rxjs-Observer.md","slug":"/blog/2017/11/8/Rxjs-Observer.html"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"How JavaScript Work: 内存管理"},"fields":{"slug":"/blog/2019/02/05/menory-management.html"}}},{"node":{"frontmatter":{"title":"FP18：Semigroup"},"fields":{"slug":"/blog/2018/12/13/FP18-Semigroup.html"}}},{"node":{"frontmatter":{"title":"FP17：Transform Naturally"},"fields":{"slug":"/blog/2018/12/11/FP17-Transform-Naturally.html"}}},{"node":{"frontmatter":{"title":"How JavaScript Work: Event Loop"},"fields":{"slug":"/blog/2018/11/15/event-loop.html"}}},{"node":{"frontmatter":{"title":"How JavaScript Work: 引擎、运行时、调用栈概述"},"fields":{"slug":"/blog/2018/11/12/overview-of-the-engine-the-runtime-the-call-stack.html"}}},{"node":{"frontmatter":{"title":"FP16：Applicative Functor"},"fields":{"slug":"/blog/2018/11/07/FB16-Applicative-Functor.html"}}},{"node":{"frontmatter":{"title":"FP15：Monad-2"},"fields":{"slug":"/blog/2018/09/11/FB15-Monad-2.html"}}},{"node":{"frontmatter":{"title":"FP14：Monad-1"},"fields":{"slug":"/blog/2018/09/02/FP14-Monad-1.html"}}},{"node":{"frontmatter":{"title":"代理模式"},"fields":{"slug":"/blog/2018/08/24/代理-pattern.html"}}},{"node":{"frontmatter":{"title":"'类'模式"},"fields":{"slug":"/blog/2018/08/24/class-pattern.html"}}}]}},"pageContext":{"slug":"/blog/2017/11/8/Rxjs-Observer.html"}}