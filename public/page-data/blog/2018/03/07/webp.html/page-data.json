{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/2018/03/07/webp.html","result":{"data":{"markdownRemark":{"html":"<h3>what is webp</h3>\n<p>webp 是由 Google 收购 On2 Technologies 后发展出来的格式，以BSD授权条款发布。目前已经在不同厂商之间进行了尝试，如Google、Facebook、ebay、百度、腾讯、淘宝等。</p>\n<p>webp支持有损压缩和无损压缩，可以使用于大多数的图片、半透明、透明都可以；并且有损压缩的程度是可以调节的，用户可以在文件大小和图像质量之间作出权衡，根据研究，webp通常可以比jpg和jpeg图像在不损失图像质量的情况下，体积缩小30%。</p>\n<p>目前只有Chrome、Opera和最新版的Edge浏览器支持webp,不过Firefox也在开发计划中自持webp，不过现在已经支持webp的浏览器已经占到首场份额的75%，这已经让我们有足够的动力，让我们去使用webp了。</p>\n<h3>How can I detect browser support for WebP</h3>\n<p>在<a href=\"https://developers.google.com/speed/webp/faq#how_can_i_detect_browser_support_for_webp\">google开发者平台</a>提供了关于检测浏览器是否支持webp的方法：</p>\n<h4>Request Header</h4>\n<p>浏览器在支持 webp 图片格式的情况下，会在请求的 http header accept 中携带 webp/image 的字段，后端接收到请求之后可以按照该形式来判断是否返回 webp 图片内容。</p>\n<h4>前端代码检测是否支持webp格式的图片</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// check_webp_feature:</span>\n<span class=\"token comment\">// 'feature' can be one of 'lossy', 'lossless', 'alpha' or 'animation'.</span>\n<span class=\"token comment\">// 'callback(feature, result)' will be passed back the detection result (in an asynchronous way!)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">check_webp_feature</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">feature<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> kTestImages <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        lossy<span class=\"token operator\">:</span> <span class=\"token string\">\"UklGRiIAAABXRUJQVlA4IBYAAAAwAQCdASoBAAEADsD+JaQAA3AAAAAA\"</span><span class=\"token punctuation\">,</span>\n        lossless<span class=\"token operator\">:</span> <span class=\"token string\">\"UklGRhoAAABXRUJQVlA4TA0AAAAvAAAAEAcQERGIiP4HAA==\"</span><span class=\"token punctuation\">,</span>\n        alpha<span class=\"token operator\">:</span> <span class=\"token string\">\"UklGRkoAAABXRUJQVlA4WAoAAAAQAAAAAAAAAAAAQUxQSAwAAAARBxAR/Q9ERP8DAABWUDggGAAAABQBAJ0BKgEAAQAAAP4AAA3AAP7mtQAAAA==\"</span><span class=\"token punctuation\">,</span>\n        animation<span class=\"token operator\">:</span> <span class=\"token string\">\"UklGRlIAAABXRUJQVlA4WAoAAAASAAAAAAAAAAAAQU5JTQYAAAD/////AABBTk1GJgAAAAAAAAAAAAAAAAAAAGQAAABWUDhMDQAAAC8AAAAQBxAREYiI/gcA\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> img <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    img<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span>width <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span>height <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>feature<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    img<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>feature<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">\"data:image/webp;base64,\"</span> <span class=\"token operator\">+</span> kTestImages<span class=\"token punctuation\">[</span>feature<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当判断当前浏览器支持webp的时候，可以在localStorage中存储一个状态，方便后面JS使用；另外一方面可以给body元素添加一个<code class=\"language-text\">webpa</code>的class,方便以后的css选择器使用。</p>\n<h3>Using Webp In HTML</h3>\n<p>使用HTML5的新元素picture，可以使用source,使浏览器支持webp的时候，优先选择webp的图片加载webp图片。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>picture</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span>\n   <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image.webp<span class=\"token punctuation\">\"</span></span>\n   <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/webp<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span>\n   <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image.jpg<span class=\"token punctuation\">\"</span></span>\n   <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/jpeg<span class=\"token punctuation\">\"</span></span>\n   <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image description<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>picture</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h3>Using Webp In CSS</h3>\n<p>上面提到的我们可以在判断浏览器支持webp之后，给body元素添加一个<code class=\"language-text\">webpa</code>class，这个时候我们就可以配合css与处理器less或者sass和css选择器的权重使用了</p>\n<div class=\"gatsby-highlight\" data-language=\"less\"><pre class=\"language-less\"><code class=\"language-less\"><span class=\"token comment\">// webp兼容性方案</span>\n<span class=\"token selector\">.webpbg(<span class=\"token variable\">@url</span>)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>@url<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token selector\">.webpa &amp;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">'@{url}.webp'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.test</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 500px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token mixin-usage function\">.webpbg</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./bg.jpg'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>编译之后的css文件为：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.test</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 500px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">'./bg.jpg'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.webpa .test</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">'./bg.jpg.webp'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Using Webp In Lazy Load</h3>\n<p>图片大量使用的时候我们会使用懒加载进行图片的延迟加载。这时就可以修改懒加载插件，在插件里动态兼容webp图片了:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getWebpSrc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">imgsrc<span class=\"token punctuation\">,</span>webpimgsrc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> needwebp <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        src <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>localStorage <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> localStorage <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      needwebp <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpsupport'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'true'</span>\n    <span class=\"token punctuation\">}</span>\n    src <span class=\"token operator\">=</span> needwebp <span class=\"token operator\">?</span> webpimgsrc <span class=\"token operator\">:</span> imgsrc\n    <span class=\"token keyword\">return</span> src\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> imgSmall <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.img-small'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> loadImage <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> img <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> imgSmall<span class=\"token punctuation\">.</span>src\n    img<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'load'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      imgSmall<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loaded'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> imgLarge <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    imgLarge<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token function\">getWebpSrc</span><span class=\"token punctuation\">(</span>imgSmall<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>large<span class=\"token punctuation\">,</span>imgSmall<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>largewebp<span class=\"token punctuation\">)</span>\n  \n    imgLarge<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'load'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      imgLarge<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loaded'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    imgSmall<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>imgLarge<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Generate Webp</h3>\n<p>上面介绍了webp的基本的使用的方法，那么如何生产webp的图片，主要有一下两种思路，第一是前端生成静态的webp的图片，托管在服务器上，第二种是服务端动态生成webp的图片。</p>\n<h4>生成静态webp图片</h4>\n<p>使用<a href=\"https://github.com/imagemin/imagemin\"><code class=\"language-text\">imagemin</code></a>可以生成webp的图片，简单的使用方法如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> imagemin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"imagemin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// The imagemin module.</span>\n    webp <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"imagemin-webp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// imagemin's WebP plugin.</span>\n    outputFolder <span class=\"token operator\">=</span> <span class=\"token string\">\"./img\"</span><span class=\"token punctuation\">,</span>            <span class=\"token comment\">// Output folder</span>\n    PNGImages <span class=\"token operator\">=</span> <span class=\"token string\">\"./img/*.png\"</span><span class=\"token punctuation\">,</span>         <span class=\"token comment\">// PNG images</span>\n    JPEGImages <span class=\"token operator\">=</span> <span class=\"token string\">\"./img/*.jpg\"</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// JPEG images</span>\n\n<span class=\"token function\">imagemin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>PNGImages<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> outputFolder<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">webp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        lossless<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// Losslessly encode images</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">imagemin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>JPEGImages<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> outputFolder<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">webp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        quality<span class=\"token operator\">:</span> <span class=\"token number\">65</span> <span class=\"token comment\">// Quality setting from 0 to 100</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>另外一种是在前端资源打包的时候，利用webpack的loader，来生成webp，不过这样会严重拖慢打包的速度，故不如直接用node.js生成图片</p>\n<h4>服务端动态生成webp</h4>\n<p><code class=\"language-text\">nginx+lua+graphicsmagick</code>这套方案其实做的事情就是nginx对域名进行拦截，lua脚本进行域名后缀规则的匹配，比如说300x300.png/.webp类似的后缀，匹配完成后再在lua里调用graphicsmagick的命令，进行一些图片转换、裁剪等工作。</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">if</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">isLegal</span><span class=\"token punctuation\">(</span>size_list<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> extend <span class=\"token operator\">==</span> <span class=\"token string\">\"webp\"</span> <span class=\"token keyword\">then</span>\n        command <span class=\"token operator\">=</span> <span class=\"token string\">[[/usr/local/GraphicsMagick-1.3.25/bin/gm convert -quality 75 -density 72 +profile \"*\"  ]]</span> <span class=\"token operator\">..</span> ngx<span class=\"token punctuation\">.</span>var<span class=\"token punctuation\">.</span>image_root <span class=\"token operator\">..</span>  originalUri  <span class=\"token operator\">..</span> <span class=\"token string\">\" -geometry \"</span> <span class=\"token operator\">..</span> area <span class=\"token operator\">..</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">..</span> ngx<span class=\"token punctuation\">.</span>var<span class=\"token punctuation\">.</span>file<span class=\"token punctuation\">;</span>\n        os<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">end</span></code></pre></div>","excerpt":"what is webp webp 是由 Google 收购 On2 Technologies 后发展出来的格式，以BSD授权条款发布。目前已经在不同厂商之间进行了尝试，如Google、Facebook、ebay、百度、腾讯、淘宝等。 webp支持有损压缩和无损压缩，可以使用于大多数的图片、半透明、透明都可以；并且有损压缩的程度是可以调节的，用户可以在文件大小和图像质量之间作出权衡，根据研究，webp通常可以比jpg和jpeg图像在不损失图像质量的情况下，体积缩小30%。 目前只有Chrome…","fields":{"slug":"/blog/2018/03/07/webp.html","date":"2018-03-06T16:00:00.000Z"},"frontmatter":{"title":"web image 加载优化方案--webp","img":"./img/2018-03-07.jpeg","author":["Sylvenas"],"categories":"性能优化"}}},"pageContext":{"slug":"/blog/2018/03/07/webp.html"}},"staticQueryHashes":[]}