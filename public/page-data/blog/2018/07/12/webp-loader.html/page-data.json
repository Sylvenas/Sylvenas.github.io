{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/2018/07/12/webp-loader.html","result":{"data":{"markdownRemark":{"html":"<p>上一节介绍了webpack loader的基本概念以及处理流程，并且简单的实现了使用<code class=\"language-text\">name-loader</code>来动态的加载<code class=\"language-text\">.tpl</code>文件，正好前面总结了在项目中使用webp优化网站的方案，之前的思路是用一段JavaScript代码生成webp格式的图片，现在换个思路，可以在<code class=\"language-text\">import some-img from some-img.jpg</code>的时候，动态的生成webp的图片，而这个过程正好可以使用webpack loader来实现。</p>\n<h3>webp-loader的实现</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> imagemin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'imagemin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> imageminWebp <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'imagemin-webp'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> loaderUtils <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loader-utils'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">content</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cacheable <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">cacheable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>emitFile<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"emitFile is required from module system\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> callback <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> options <span class=\"token operator\">=</span> loaderUtils<span class=\"token punctuation\">.</span><span class=\"token function\">getOptions</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 写入原文件</span>\n    <span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> loaderUtils<span class=\"token punctuation\">.</span><span class=\"token function\">interpolateName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">.</span>name <span class=\"token operator\">||</span> <span class=\"token string\">\"[hash].[ext]\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        content<span class=\"token operator\">:</span> content<span class=\"token punctuation\">,</span>\n        regExp<span class=\"token operator\">:</span> options<span class=\"token punctuation\">.</span>regExp\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">emitFile</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 如果源文件比较小，则没必要转换为webp格式的图片，直接使用callback传递给下一个loader处理</span>\n    <span class=\"token keyword\">var</span> limit<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>limit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        limit <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>limit<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>limit <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> content<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> limit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> buffer<span class=\"token operator\">:</span> content<span class=\"token punctuation\">,</span> url <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 根据options内容生成webpOptions</span>\n    <span class=\"token keyword\">var</span> webpOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        preset<span class=\"token operator\">:</span> options<span class=\"token punctuation\">.</span>preset <span class=\"token operator\">||</span> <span class=\"token string\">'default'</span><span class=\"token punctuation\">,</span>\n        quality<span class=\"token operator\">:</span> options<span class=\"token punctuation\">.</span>quality <span class=\"token operator\">||</span> <span class=\"token number\">75</span><span class=\"token punctuation\">,</span>\n        alphaQuality<span class=\"token operator\">:</span> options<span class=\"token punctuation\">.</span>alphaQuality <span class=\"token operator\">||</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n        method<span class=\"token operator\">:</span> options<span class=\"token punctuation\">.</span>method <span class=\"token operator\">||</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        sns<span class=\"token operator\">:</span> options<span class=\"token punctuation\">.</span>sns <span class=\"token operator\">||</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span>\n        autoFilter<span class=\"token operator\">:</span> options<span class=\"token punctuation\">.</span>autoFilter <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        sharpness<span class=\"token operator\">:</span> options<span class=\"token punctuation\">.</span>sharpness <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        lossless<span class=\"token operator\">:</span> options<span class=\"token punctuation\">.</span>lossless <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        webpOptions<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        webpOptions<span class=\"token punctuation\">.</span>filter <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 生成的webp图片的名称为原图片的名称后面追加.webp,</span>\n    <span class=\"token comment\">// 例如：xxx.jpg.webp, 方便在css预处理器中的使用</span>\n    <span class=\"token keyword\">var</span> webpUrl <span class=\"token operator\">=</span> url <span class=\"token operator\">+</span> <span class=\"token string\">'.webp'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 原图片异步转换为webp的图片</span>\n    imagemin<span class=\"token punctuation\">.</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">imageminWebp</span><span class=\"token punctuation\">(</span>webpOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 写入webp图片并调用callback</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">emitFile</span><span class=\"token punctuation\">(</span>webpUrl<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 传递给svg-placrholder-loader，继续处理成placeholder</span>\n        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> buffer<span class=\"token operator\">:</span> content<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> webpUrl <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/* 如果要单独使用的话，可以使用该注释部分的代码\n        const exportJson = 'module.exports = { ' +\n            '\"originSrc\": __webpack_public_path__ + \"' + url +\n            '\" , \"webpSrc\": __webpack_public_path__ + \"' + webpUrl +\n            '\"' +\n            ' };';\n        callback(null, exportJson);   \n        */</span>  \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 要求webpack传入原始的buffer，方便处理图片</span>\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span>raw <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>注意事项</h3>\n<p>目前缩写的<code class=\"language-text\">webp-loader</code>还不能独立的使用，因为并没有导出合法的JavaScript模块，后面继续讲解<code class=\"language-text\">svg-placeholder</code>处理方案。</p>","excerpt":"上一节介绍了webpack loader的基本概念以及处理流程，并且简单的实现了使用来动态的加载文件，正好前面总结了在项目中使用webp优化网站的方案，之前的思路是用一段JavaScript代码生成webp格式的图片，现在换个思路，可以在的时候，动态的生成webp的图片，而这个过程正好可以使用webpack loader来实现。 webp-loader的实现 注意事项 目前缩写的还不能独立的使用，因为并没有导出合法的JavaScript模块，后面继续讲解处理方案。","fields":{"slug":"/blog/2018/07/12/webp-loader.html","date":"2018-07-11T16:00:00.000Z"},"frontmatter":{"title":"webpack webp loader","img":"./img/2015-03-25.jpg","author":["Sylvenas"],"categories":"bundlers"}}},"pageContext":{"slug":"/blog/2018/07/12/webp-loader.html"}},"staticQueryHashes":[]}