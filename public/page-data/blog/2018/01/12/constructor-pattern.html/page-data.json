{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/2018/01/12/constructor-pattern.html","result":{"data":{"markdownRemark":{"html":"<h3>构造函数</h3>\n<p>在JavaScript中，构造函数通常是用开创建实例的，JavaScript中没有类的概念，但是有特殊的构造函数，可以通过<code class=\"language-text\">new</code>关键字来调用构造函数，约定成俗的构造函数的首字母大写。</p>\n<h3>example</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> type<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sound</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> xiaobu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token string\">'小布'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'拉布拉多'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> erhuo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token string\">'傻子'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'哈士奇'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nxiaobu <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// true</span>\n\nxiaobu<span class=\"token punctuation\">.</span>sound <span class=\"token operator\">===</span> erhuo<span class=\"token punctuation\">.</span>sound<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// false</span></code></pre></div>\n<p>从上面的代码，我们能看到构造函数模式有一个严重的缺点，就是每次创建一个新的对象的时候，都要创建一个新的<code class=\"language-text\">sound</code>方法，这个却是非常没有必要的，因为一般来说，两个实例对象只是属性不一样，而方法是一样的，因此有些人表示这个问题好解决,我们可以把方法放到外面去：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> type<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sound <span class=\"token operator\">=</span> sound<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sound</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但是这样一改，却产生了一个仅仅供<code class=\"language-text\">Dog</code>使用的全部函数，这和构造函数模式本身的封装特性相悖，具体怎么做更好呢，请看下一篇的<a href=\"\">原型模式</a>。</p>\n<h3>不用new来创建对象</h3>\n<h4>用call,改变上下文</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> xiaobu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">Dog</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>xiaobu<span class=\"token punctuation\">,</span> <span class=\"token string\">'xiaobu'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'拉布拉多'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nxiaobu <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Dog</span>   <span class=\"token comment\">// false</span></code></pre></div>\n<p>用这种方法创建的<code class=\"language-text\">xiaobu</code>不是<code class=\"language-text\">Dog</code>的实例。</p>\n<h4>作为函数调用</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> xiaobu<span class=\"token operator\">=</span><span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xiaobu'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'拉布拉多'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> xiaobu<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span><span class=\"token function\">sound</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wang wang ...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 'wang wang ...'</span></code></pre></div>\n<p>因为不是通过<code class=\"language-text\">new</code>关键字，而是直接调用<code class=\"language-text\">Dog</code>构造函数，此时<code class=\"language-text\">Dog</code>函数内的<code class=\"language-text\">this</code>指向<code class=\"language-text\">window</code>对象。</p>","excerpt":"构造函数 在JavaScript中，构造函数通常是用开创建实例的，JavaScript中没有类的概念，但是有特殊的构造函数，可以通过关键字来调用构造函数，约定成俗的构造函数的首字母大写。 example…","fields":{"slug":"/blog/2018/01/12/constructor-pattern.html","date":"2018-01-11T16:00:00.000Z"},"frontmatter":{"title":"构造函数模式","img":"./img/2018-01-12.jpeg","author":["Sylvenas"],"categories":"design pattern"}}},"pageContext":{"slug":"/blog/2018/01/12/constructor-pattern.html"}},"staticQueryHashes":[]}